/* 
 * TextMagic API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TextMagicClient.Client;
using TextMagicClient.Model;

namespace TextMagicClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextMagicApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject);

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject);
        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns></returns>
        void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);
        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CancelSurvey (int? id);

        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CancelSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns></returns>
        void CheckPhoneVerificationCode (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject);

        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckPhoneVerificationCodeWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject);
        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns></returns>
        void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject);

        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject);
        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CloseReadChats ();

        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseReadChatsWithHttpInfo ();
        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CloseSubaccount (int? id);

        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject);

        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject);
        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id);

        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id);
        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject);

        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject);
        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateList (CreateListInputObject createListInputObject);

        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateListWithHttpInfo (CreateListInputObject createListInputObject);
        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns></returns>
        void CreatePushToken (CreatePushTokenInputObject createPushTokenInputObject);

        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePushTokenWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject);
        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateSurvey (CreateSurveyInputObject createSurveyInputObject);

        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateSurveyWithHttpInfo (CreateSurveyInputObject createSurveyInputObject);
        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateSurveyNode (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id);

        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateSurveyNodeWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id);
        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject);

        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject);
        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllContacts ();

        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllContactsWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllOutboundMessages ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ();
        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAvatar ();

        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAvatarWithHttpInfo ();
        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);

        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);
        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject);

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject);
        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContact (int? id);

        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactAvatar (int? id);

        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactNote (int? id);

        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);
        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns></returns>
        void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);
        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteCustomField (int? id);

        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteDedicatedNumber (int? id);

        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteInboundMessage (int? id);

        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteList (int? id);

        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteListAvatar (int? id);

        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);
        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject);

        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteMessageSession (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns></returns>
        void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteOutboundMessage (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);

        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        void DeletePushToken (string type, int? deviceId);

        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePushTokenWithHttpInfo (string type, int? deviceId);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteScheduledMessage (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);
        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSenderId (int? id);

        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSurvey (int? id);

        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSurveyNode (int? id);

        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSurveyNodeWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteTemplate (int? id);

        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns></returns>
        void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);

        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);
        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>DoAuthResponse</returns>
        DoAuthResponse DoAuth (DoAuthInputObject doAuthInputObject);

        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>ApiResponse of DoAuthResponse</returns>
        ApiResponse<DoAuthResponse> DoAuthWithHttpInfo (DoAuthInputObject doAuthInputObject);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        ApiResponse<DoCarrierLookupResponse> DoCarrierLookupWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>DoEmailLookupResponse</returns>
        DoEmailLookupResponse DoEmailLookup (string email);

        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        ApiResponse<DoEmailLookupResponse> DoEmailLookupWithHttpInfo (string email);
        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse DuplicateSurvey (int? id);

        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> DuplicateSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsPaginatedResponse</returns>
        GetAllBulkSessionsPaginatedResponse GetAllBulkSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsPaginatedResponse</returns>
        ApiResponse<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>GetAllChatsPaginatedResponse</returns>
        GetAllChatsPaginatedResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsPaginatedResponse</returns>
        ApiResponse<GetAllChatsPaginatedResponse> GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesPaginatedResponse</returns>
        GetAllInboundMessagesPaginatedResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesPaginatedResponse</returns>
        ApiResponse<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsPaginatedResponse</returns>
        GetAllMessageSessionsPaginatedResponse GetAllMessageSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsPaginatedResponse</returns>
        ApiResponse<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>GetAllOutboundMessagesPaginatedResponse</returns>
        GetAllOutboundMessagesPaginatedResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesPaginatedResponse</returns>
        ApiResponse<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesPaginatedResponse</returns>
        GetAllScheduledMessagesPaginatedResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesPaginatedResponse</returns>
        ApiResponse<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>GetAllTemplatesPaginatedResponse</returns>
        GetAllTemplatesPaginatedResponse GetAllTemplates (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesPaginatedResponse</returns>
        ApiResponse<GetAllTemplatesPaginatedResponse> GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        ApiResponse<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null);

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        ApiResponse<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        ApiResponse<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        ApiResponse<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetBlockedContactsPaginatedResponse</returns>
        GetBlockedContactsPaginatedResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsPaginatedResponse</returns>
        ApiResponse<GetBlockedContactsPaginatedResponse> GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        BulkSession GetBulkSession (int? id);

        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        ApiResponse<BulkSession> GetBulkSessionWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        GetCallbackSettingsResponse GetCallbackSettings ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        ApiResponse<GetCallbackSettingsResponse> GetCallbackSettingsWithHttpInfo ();
        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallsPricesResponse</returns>
        GetCallsPricesResponse GetCallsPrices ();

        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallsPricesResponse</returns>
        ApiResponse<GetCallsPricesResponse> GetCallsPricesWithHttpInfo ();
        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        Chat GetChat (int? id);

        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Chat</returns>
        Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>GetChatMessagesPaginatedResponse</returns>
        GetChatMessagesPaginatedResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesPaginatedResponse</returns>
        ApiResponse<GetChatMessagesPaginatedResponse> GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Contact</returns>
        Contact GetContact (int? id);

        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        Contact GetContactByPhone (string phone);

        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactByPhoneWithHttpInfo (string phone);
        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Contact</returns>
        Contact GetContactIfBlocked (string phone);

        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactIfBlockedWithHttpInfo (string phone);
        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id);

        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        ApiResponse<GetContactImportSessionProgressResponse> GetContactImportSessionProgressWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        ContactNote GetContactNote (int? id);

        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        ApiResponse<ContactNote> GetContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetContactNotesPaginatedResponse</returns>
        GetContactNotesPaginatedResponse GetContactNotes (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesPaginatedResponse</returns>
        ApiResponse<GetContactNotesPaginatedResponse> GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsPaginatedResponse</returns>
        GetContactsPaginatedResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsPaginatedResponse</returns>
        ApiResponse<GetContactsPaginatedResponse> GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>GetContactsAutocompleteResponse</returns>
        GetContactsAutocompleteResponse GetContactsAutocomplete (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContactsAutocompleteResponse</returns>
        ApiResponse<GetContactsAutocompleteResponse> GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsByListIdPaginatedResponse</returns>
        GetContactsByListIdPaginatedResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdPaginatedResponse</returns>
        ApiResponse<GetContactsByListIdPaginatedResponse> GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCountriesResponse</returns>
        GetCountriesResponse GetCountries ();

        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCountriesResponse</returns>
        ApiResponse<GetCountriesResponse> GetCountriesWithHttpInfo ();
        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetCurrentUser ();

        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        UserCustomField GetCustomField (int? id);

        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        ApiResponse<UserCustomField> GetCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetCustomFieldsPaginatedResponse</returns>
        GetCustomFieldsPaginatedResponse GetCustomFields (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsPaginatedResponse</returns>
        ApiResponse<GetCustomFieldsPaginatedResponse> GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        UsersInbound GetDedicatedNumber (int? id);

        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        ApiResponse<UsersInbound> GetDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetDisallowedRulesResponse</returns>
        GetDisallowedRulesResponse GetDisallowedRules ();

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetDisallowedRulesResponse</returns>
        ApiResponse<GetDisallowedRulesResponse> GetDisallowedRulesWithHttpInfo ();
        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>GetFavouritesPaginatedResponse</returns>
        GetFavouritesPaginatedResponse GetFavourites (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>ApiResponse of GetFavouritesPaginatedResponse</returns>
        ApiResponse<GetFavouritesPaginatedResponse> GetFavouritesWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetForwardedCallsPaginatedResponse</returns>
        GetForwardedCallsPaginatedResponse GetForwardedCalls (int? page = null, int? limit = null);

        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetForwardedCallsPaginatedResponse</returns>
        ApiResponse<GetForwardedCallsPaginatedResponse> GetForwardedCallsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageIn</returns>
        MessageIn GetInboundMessage (int? id);

        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageIn</returns>
        ApiResponse<MessageIn> GetInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        ApiResponse<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetInvoicesPaginatedResponse</returns>
        GetInvoicesPaginatedResponse GetInvoices (int? page = null, int? limit = null);

        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesPaginatedResponse</returns>
        ApiResponse<GetInvoicesPaginatedResponse> GetInvoicesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Group</returns>
        Group GetList (int? id);

        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetListWithHttpInfo (int? id);
        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        GetListContactsIdsResponse GetListContactsIds (int? id);

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        ApiResponse<GetListContactsIdsResponse> GetListContactsIdsWithHttpInfo (int? id);
        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetListsOfContactPaginatedResponse</returns>
        GetListsOfContactPaginatedResponse GetListsOfContact (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactPaginatedResponse</returns>
        ApiResponse<GetListsOfContactPaginatedResponse> GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        ApiResponse<GetMessagePreviewResponse> GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        ApiResponse<GetMessagePriceResponse> GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagePricesResponse</returns>
        GetMessagePricesResponse GetMessagePrices ();

        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagePricesResponse</returns>
        ApiResponse<GetMessagePricesResponse> GetMessagePricesWithHttpInfo ();
        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageSession</returns>
        MessageSession GetMessageSession (int? id);

        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageSession</returns>
        ApiResponse<MessageSession> GetMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        ApiResponse<GetMessageSessionStatResponse> GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdPaginatedResponse</returns>
        GetMessagesBySessionIdPaginatedResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdPaginatedResponse</returns>
        ApiResponse<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        GetMessagingCountersResponse GetMessagingCounters ();

        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        ApiResponse<GetMessagingCountersResponse> GetMessagingCountersWithHttpInfo ();
        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, string end = null);

        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        ApiResponse<GetMessagingStatResponse> GetMessagingStatWithHttpInfo (string by = null, int? start = null, string end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        MessageOut GetOutboundMessage (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        ApiResponse<MessageOut> GetOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryPaginatedResponse</returns>
        GetOutboundMessagesHistoryPaginatedResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryPaginatedResponse</returns>
        ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPushTokensResponse</returns>
        GetPushTokensResponse GetPushTokens ();

        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPushTokensResponse</returns>
        ApiResponse<GetPushTokensResponse> GetPushTokensWithHttpInfo ();
        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        MessagesIcs GetScheduledMessage (int? id);

        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        ApiResponse<MessagesIcs> GetScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        SenderId GetSenderId (int? id);

        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        ApiResponse<SenderId> GetSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSenderIdsPaginatedResponse</returns>
        GetSenderIdsPaginatedResponse GetSenderIds (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsPaginatedResponse</returns>
        ApiResponse<GetSenderIdsPaginatedResponse> GetSenderIdsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        GetSenderSettingsResponse GetSenderSettings (string country = null);

        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        ApiResponse<GetSenderSettingsResponse> GetSenderSettingsWithHttpInfo (string country = null);
        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetSpendingStatPaginatedResponse</returns>
        GetSpendingStatPaginatedResponse GetSpendingStat (int? page = null, int? limit = null, int? start = null, int? end = null);

        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatPaginatedResponse</returns>
        ApiResponse<GetSpendingStatPaginatedResponse> GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null);
        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetStateResponse</returns>
        GetStateResponse GetState ();

        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetStateResponse</returns>
        ApiResponse<GetStateResponse> GetStateWithHttpInfo ();
        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User GetSubaccount (int? id);

        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>User</returns>
        User GetSubaccounts (int? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        ApiResponse<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);
        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Survey</returns>
        Survey GetSurvey (int? id);

        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Survey</returns>
        ApiResponse<Survey> GetSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SurveyNode</returns>
        SurveyNode GetSurveyNode (int? id);

        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SurveyNode</returns>
        ApiResponse<SurveyNode> GetSurveyNodeWithHttpInfo (int? id);
        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSurveyNodesResponse</returns>
        GetSurveyNodesResponse GetSurveyNodes (int? id);

        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSurveyNodesResponse</returns>
        ApiResponse<GetSurveyNodesResponse> GetSurveyNodesWithHttpInfo (int? id);
        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSurveysPaginatedResponse</returns>
        GetSurveysPaginatedResponse GetSurveys (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSurveysPaginatedResponse</returns>
        ApiResponse<GetSurveysPaginatedResponse> GetSurveysWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        MessageTemplate GetTemplate (int? id);

        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        ApiResponse<MessageTemplate> GetTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>GetTimezonesResponse</returns>
        GetTimezonesResponse GetTimezones (int? full = null);

        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        ApiResponse<GetTimezonesResponse> GetTimezonesWithHttpInfo (int? full = null);
        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ();

        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        ApiResponse<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalWithHttpInfo ();
        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        UnsubscribedContact GetUnsubscribedContact (int? id);

        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        ApiResponse<UnsubscribedContact> GetUnsubscribedContactWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetUnsubscribersPaginatedResponse</returns>
        GetUnsubscribersPaginatedResponse GetUnsubscribers (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersPaginatedResponse</returns>
        ApiResponse<GetUnsubscribersPaginatedResponse> GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>GetUserDedicatedNumbersPaginatedResponse</returns>
        GetUserDedicatedNumbersPaginatedResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersPaginatedResponse</returns>
        ApiResponse<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>GetUserListsPaginatedResponse</returns>
        GetUserListsPaginatedResponse GetUserLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>ApiResponse of GetUserListsPaginatedResponse</returns>
        ApiResponse<GetUserListsPaginatedResponse> GetUserListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetVersionsResponse</returns>
        GetVersionsResponse GetVersions ();

        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetVersionsResponse</returns>
        ApiResponse<GetVersionsResponse> GetVersionsWithHttpInfo ();
        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns></returns>
        void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject);

        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject);
        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns></returns>
        void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);
        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns></returns>
        void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);
        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns></returns>
        void MergeSurveyNodes (MergeSurveyNodesInputObject mergeSurveyNodesInputObject);

        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MergeSurveyNodesWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject);
        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject);

        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject);
        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns></returns>
        void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject);

        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject);
        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        PingResponse Ping ();

        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        ApiResponse<PingResponse> PingWithHttpInfo ();
        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns></returns>
        void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject);

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject);
        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>User</returns>
        User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);

        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);
        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject);

        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject);
        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ResetSurvey (int? id);

        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ResetSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>SearchChatsPaginatedResponse</returns>
        SearchChatsPaginatedResponse SearchChats (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchChatsPaginatedResponse</returns>
        ApiResponse<SearchChatsPaginatedResponse> SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>SearchChatsByIdsPaginatedResponse</returns>
        SearchChatsByIdsPaginatedResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsPaginatedResponse</returns>
        ApiResponse<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentPaginatedResponse</returns>
        SearchChatsByReceipentPaginatedResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentPaginatedResponse</returns>
        ApiResponse<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchContactsPaginatedResponse</returns>
        SearchContactsPaginatedResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsPaginatedResponse</returns>
        ApiResponse<SearchContactsPaginatedResponse> SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesPaginatedResponse</returns>
        SearchInboundMessagesPaginatedResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesPaginatedResponse</returns>
        ApiResponse<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchListsPaginatedResponse</returns>
        SearchListsPaginatedResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsPaginatedResponse</returns>
        ApiResponse<SearchListsPaginatedResponse> SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>SearchOutboundMessagesPaginatedResponse</returns>
        SearchOutboundMessagesPaginatedResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesPaginatedResponse</returns>
        ApiResponse<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesPaginatedResponse</returns>
        SearchScheduledMessagesPaginatedResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesPaginatedResponse</returns>
        ApiResponse<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>SearchTemplatesPaginatedResponse</returns>
        SearchTemplatesPaginatedResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesPaginatedResponse</returns>
        ApiResponse<SearchTemplatesPaginatedResponse> SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SendEmailVerificationCode ();

        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailVerificationCodeWithHttpInfo ();
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject);
        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SendPhoneVerificationCode ();

        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendPhoneVerificationCodeWithHttpInfo ();
        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject);

        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject);
        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse StartSurvey (int? id);

        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> StartSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns></returns>
        void UnblockContact (UnblockContactInputObject unblockContactInputObject);

        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject);
        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns></returns>
        void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject);

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject);
        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns></returns>
        void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);
        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject);

        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);
        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id);

        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id);
        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);

        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);
        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>UpdateCurrentUserResponse</returns>
        UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject);

        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        ApiResponse<UpdateCurrentUserResponse> UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject);
        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);

        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);
        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id);

        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns></returns>
        void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);
        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns></returns>
        void UpdatePassword (UpdatePasswordInputObject updatePasswordInputObject);

        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePasswordWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject);
        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns></returns>
        void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject);

        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject);
        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateSurvey (UpdateSurveyInputObject updateSurveyInputObject, int? id);

        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateSurveyWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id);
        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateSurveyNode (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id);

        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateSurveyNodeWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id);
        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id);

        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id);
        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns></returns>
        void UploadAvatar (System.IO.Stream image);

        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        ApiResponse<UploadMessageAttachmentResponse> UploadMessageAttachmentWithHttpInfo (System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject);

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject);
        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject);
        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CancelSurveyAsync (int? id);

        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CancelSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckPhoneVerificationCodeAsync (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject);

        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeAsyncWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject);
        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject);

        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject);
        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseReadChatsAsync ();

        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ();
        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseSubaccountAsync (int? id);

        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject);

        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject);
        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id);

        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id);
        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject);

        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject);
        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject);

        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject);
        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePushTokenAsync (CreatePushTokenInputObject createPushTokenInputObject);

        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePushTokenAsyncWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject);
        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyAsync (CreateSurveyInputObject createSurveyInputObject);

        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyAsyncWithHttpInfo (CreateSurveyInputObject createSurveyInputObject);
        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyNodeAsync (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id);

        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyNodeAsyncWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id);
        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject);

        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject);
        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllContactsAsync ();

        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAvatarAsync ();

        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ();
        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);

        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id);
        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject);

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject);
        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync (int? id);

        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNoteAsync (int? id);

        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject);
        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject);
        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id);

        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id);

        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id);

        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAsync (int? id);

        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id);
        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject);

        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);

        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject);
        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePushTokenAsync (string type, int? deviceId);

        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTokenAsyncWithHttpInfo (string type, int? deviceId);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject);
        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSenderIdAsync (int? id);

        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSurveyAsync (int? id);

        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSurveyNodeAsync (int? id);

        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyNodeAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync (int? id);

        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);

        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject);
        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>Task of DoAuthResponse</returns>
        System.Threading.Tasks.Task<DoAuthResponse> DoAuthAsync (DoAuthInputObject doAuthInputObject);

        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>Task of ApiResponse (DoAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoAuthResponse>> DoAuthAsyncWithHttpInfo (DoAuthInputObject doAuthInputObject);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email);

        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email);
        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> DuplicateSurveyAsync (int? id);

        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> DuplicateSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsPaginatedResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllChatsPaginatedResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllChatsPaginatedResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesPaginatedResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsPaginatedResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesPaginatedResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesPaginatedResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of GetAllTemplatesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetAllTemplatesPaginatedResponse> GetAllTemplatesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesPaginatedResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null);

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetBlockedContactsPaginatedResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsPaginatedResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id);

        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallsPricesResponse</returns>
        System.Threading.Tasks.Task<GetCallsPricesResponse> GetCallsPricesAsync ();

        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallsPricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCallsPricesResponse>> GetCallsPricesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatAsync (int? id);

        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetChatMessagesPaginatedResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChatMessagesPaginatedResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactAsync (int? id);

        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone);

        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone);

        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id);

        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id);

        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactNotesPaginatedResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactNotesPaginatedResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactsPaginatedResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsPaginatedResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of GetContactsAutocompleteResponse</returns>
        System.Threading.Tasks.Task<GetContactsAutocompleteResponse> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContactsAutocompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetContactsByListIdPaginatedResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdPaginatedResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCountriesResponse</returns>
        System.Threading.Tasks.Task<GetCountriesResponse> GetCountriesAsync ();

        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCountriesResponse>> GetCountriesAsyncWithHttpInfo ();
        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync ();

        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id);

        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetCustomFieldsPaginatedResponse> GetCustomFieldsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsPaginatedResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id);

        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetDisallowedRulesResponse</returns>
        System.Threading.Tasks.Task<GetDisallowedRulesResponse> GetDisallowedRulesAsync ();

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetDisallowedRulesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDisallowedRulesResponse>> GetDisallowedRulesAsyncWithHttpInfo ();
        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of GetFavouritesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetFavouritesPaginatedResponse> GetFavouritesAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of ApiResponse (GetFavouritesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFavouritesPaginatedResponse>> GetFavouritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetForwardedCallsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetForwardedCallsPaginatedResponse> GetForwardedCallsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetForwardedCallsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetForwardedCallsPaginatedResponse>> GetForwardedCallsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageIn</returns>
        System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id);

        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetInvoicesPaginatedResponse> GetInvoicesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoicesPaginatedResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetListAsync (int? id);

        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id);

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetListsOfContactPaginatedResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListsOfContactPaginatedResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagePricesResponse</returns>
        System.Threading.Tasks.Task<GetMessagePricesResponse> GetMessagePricesAsync ();

        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagePricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePricesResponse>> GetMessagePricesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageSession</returns>
        System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id);

        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdPaginatedResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ();

        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ();
        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, string end = null);

        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, string end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPushTokensResponse</returns>
        System.Threading.Tasks.Task<GetPushTokensResponse> GetPushTokensAsync ();

        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPushTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPushTokensResponse>> GetPushTokensAsyncWithHttpInfo ();
        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id);

        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id);

        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetSenderIdsPaginatedResponse> GetSenderIdsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderIdsPaginatedResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null);

        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetSpendingStatPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetSpendingStatPaginatedResponse> GetSpendingStatAsync (int? page = null, int? limit = null, int? start = null, int? end = null);

        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpendingStatPaginatedResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null);
        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetStateResponse</returns>
        System.Threading.Tasks.Task<GetStateResponse> GetStateAsync ();

        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStateResponse>> GetStateAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id);

        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null);
        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Survey</returns>
        System.Threading.Tasks.Task<Survey> GetSurveyAsync (int? id);

        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Survey)</returns>
        System.Threading.Tasks.Task<ApiResponse<Survey>> GetSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SurveyNode</returns>
        System.Threading.Tasks.Task<SurveyNode> GetSurveyNodeAsync (int? id);

        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SurveyNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveyNode>> GetSurveyNodeAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSurveyNodesResponse</returns>
        System.Threading.Tasks.Task<GetSurveyNodesResponse> GetSurveyNodesAsync (int? id);

        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSurveyNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSurveyNodesResponse>> GetSurveyNodesAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSurveysPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetSurveysPaginatedResponse> GetSurveysAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSurveysPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSurveysPaginatedResponse>> GetSurveysAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id);

        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        System.Threading.Tasks.Task<GetTimezonesResponse> GetTimezonesAsync (int? full = null);

        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> GetTimezonesAsyncWithHttpInfo (int? full = null);
        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ();

        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id);

        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetUnsubscribersPaginatedResponse> GetUnsubscribersAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersPaginatedResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersPaginatedResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of GetUserListsPaginatedResponse</returns>
        System.Threading.Tasks.Task<GetUserListsPaginatedResponse> GetUserListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetUserListsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserListsPaginatedResponse>> GetUserListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetVersionsResponse</returns>
        System.Threading.Tasks.Task<GetVersionsResponse> GetVersionsAsync ();

        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVersionsResponse>> GetVersionsAsyncWithHttpInfo ();
        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject);

        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject);
        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject);
        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject);
        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MergeSurveyNodesAsync (MergeSurveyNodesInputObject mergeSurveyNodesInputObject);

        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeSurveyNodesAsyncWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject);
        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject);

        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject);
        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject);

        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject);
        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        System.Threading.Tasks.Task<PingResponse> PingAsync ();

        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ();
        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject);

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject);
        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);

        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject);
        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject);

        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject);
        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ResetSurveyAsync (int? id);

        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ResetSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of SearchChatsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsPaginatedResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsPaginatedResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of SearchChatsByIdsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsPaginatedResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentPaginatedResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchContactsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchContactsPaginatedResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContactsPaginatedResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesPaginatedResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchListsPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchListsPaginatedResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchListsPaginatedResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of SearchOutboundMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesPaginatedResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesPaginatedResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of SearchTemplatesPaginatedResponse</returns>
        System.Threading.Tasks.Task<SearchTemplatesPaginatedResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesPaginatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTemplatesPaginatedResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailVerificationCodeAsync ();

        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailVerificationCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject);
        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendPhoneVerificationCodeAsync ();

        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendPhoneVerificationCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject);

        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject);
        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> StartSurveyAsync (int? id);

        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> StartSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject);

        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject);
        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject);

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject);
        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject);
        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject);

        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject);
        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id);

        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id);
        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);

        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id);
        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject);

        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject);
        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);

        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id);
        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id);

        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject);
        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePasswordAsync (UpdatePasswordInputObject updatePasswordInputObject);

        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject);
        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject);

        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject);
        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyAsync (UpdateSurveyInputObject updateSurveyInputObject, int? id);

        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyAsyncWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id);
        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyNodeAsync (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id);

        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyNodeAsyncWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id);
        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id);

        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id);
        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image);

        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TextMagicApi : ITextMagicApi
    {
        private TextMagicClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextMagicApi(String basePath)
        {
            this.Configuration = new TextMagicClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextMagicApi(TextMagicClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TextMagicClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TextMagicClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TextMagicClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = AssignContactsToListWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await AssignContactsToListAsyncWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = BlockContactWithHttpInfo(blockContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await BlockContactAsyncWithHttpInfo(blockContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns></returns>
        public void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
             BuyDedicatedNumberWithHttpInfo(buyDedicatedNumberInputObject);
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
             await BuyDedicatedNumberAsyncWithHttpInfo(buyDedicatedNumberInputObject);

        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CancelSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CancelSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CancelSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CancelSurvey");

            var localVarPath = "/api/v2/surveys/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CancelSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CancelSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CancelSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CancelSurvey");

            var localVarPath = "/api/v2/surveys/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns></returns>
        public void CheckPhoneVerificationCode (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject)
        {
             CheckPhoneVerificationCodeWithHttpInfo(checkPhoneVerificationCodeInputObject);
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckPhoneVerificationCodeWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject)
        {
            // verify the required parameter 'checkPhoneVerificationCodeInputObject' is set
            if (checkPhoneVerificationCodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeInputObject' when calling TextMagicApi->CheckPhoneVerificationCode");

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPhoneVerificationCodeInputObject != null && checkPhoneVerificationCodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckPhoneVerificationCodeAsync (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject)
        {
             await CheckPhoneVerificationCodeAsyncWithHttpInfo(checkPhoneVerificationCodeInputObject);

        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeAsyncWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject)
        {
            // verify the required parameter 'checkPhoneVerificationCodeInputObject' is set
            if (checkPhoneVerificationCodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeInputObject' when calling TextMagicApi->CheckPhoneVerificationCode");

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checkPhoneVerificationCodeInputObject != null && checkPhoneVerificationCodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ClearAndAssignContactsToListWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ClearAndAssignContactsToListAsyncWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns></returns>
        public void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
             CloseChatsBulkWithHttpInfo(closeChatsBulkInputObject);
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
             await CloseChatsBulkAsyncWithHttpInfo(closeChatsBulkInputObject);

        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CloseReadChats ()
        {
             CloseReadChatsWithHttpInfo();
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseReadChatsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseReadChatsAsync ()
        {
             await CloseReadChatsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CloseSubaccount (int? id)
        {
             CloseSubaccountWithHttpInfo(id);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseSubaccountAsync (int? id)
        {
             await CloseSubaccountAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactWithHttpInfo(createContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactAsyncWithHttpInfo(createContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactNoteWithHttpInfo(createContactNoteInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactNoteAsyncWithHttpInfo(createContactNoteInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateCustomFieldWithHttpInfo(createCustomFieldInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateCustomFieldAsyncWithHttpInfo(createCustomFieldInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateList (CreateListInputObject createListInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateListWithHttpInfo(createListInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateListWithHttpInfo (CreateListInputObject createListInputObject)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateListAsyncWithHttpInfo(createListInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns></returns>
        public void CreatePushToken (CreatePushTokenInputObject createPushTokenInputObject)
        {
             CreatePushTokenWithHttpInfo(createPushTokenInputObject);
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePushTokenWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject)
        {
            // verify the required parameter 'createPushTokenInputObject' is set
            if (createPushTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createPushTokenInputObject' when calling TextMagicApi->CreatePushToken");

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createPushTokenInputObject != null && createPushTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPushTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPushTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePushTokenAsync (CreatePushTokenInputObject createPushTokenInputObject)
        {
             await CreatePushTokenAsyncWithHttpInfo(createPushTokenInputObject);

        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePushTokenAsyncWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject)
        {
            // verify the required parameter 'createPushTokenInputObject' is set
            if (createPushTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createPushTokenInputObject' when calling TextMagicApi->CreatePushToken");

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createPushTokenInputObject != null && createPushTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPushTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPushTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateSurvey (CreateSurveyInputObject createSurveyInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateSurveyWithHttpInfo(createSurveyInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateSurveyWithHttpInfo (CreateSurveyInputObject createSurveyInputObject)
        {
            // verify the required parameter 'createSurveyInputObject' is set
            if (createSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyInputObject' when calling TextMagicApi->CreateSurvey");

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSurveyInputObject != null && createSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyAsync (CreateSurveyInputObject createSurveyInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateSurveyAsyncWithHttpInfo(createSurveyInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyAsyncWithHttpInfo (CreateSurveyInputObject createSurveyInputObject)
        {
            // verify the required parameter 'createSurveyInputObject' is set
            if (createSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyInputObject' when calling TextMagicApi->CreateSurvey");

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSurveyInputObject != null && createSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateSurveyNode (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateSurveyNodeWithHttpInfo(createSurveyNodeInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateSurveyNodeWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id)
        {
            // verify the required parameter 'createSurveyNodeInputObject' is set
            if (createSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyNodeInputObject' when calling TextMagicApi->CreateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateSurveyNode");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createSurveyNodeInputObject != null && createSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyNodeAsync (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateSurveyNodeAsyncWithHttpInfo(createSurveyNodeInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyNodeAsyncWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id)
        {
            // verify the required parameter 'createSurveyNodeInputObject' is set
            if (createSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyNodeInputObject' when calling TextMagicApi->CreateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateSurveyNode");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (createSurveyNodeInputObject != null && createSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateTemplateWithHttpInfo(createTemplateInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateTemplateAsyncWithHttpInfo(createTemplateInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllContacts ()
        {
             DeleteAllContactsWithHttpInfo();
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllContactsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllContactsAsync ()
        {
             await DeleteAllContactsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllOutboundMessages ()
        {
             DeleteAllOutboundMessagesWithHttpInfo();
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ()
        {
             await DeleteAllOutboundMessagesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAvatar ()
        {
             DeleteAvatarWithHttpInfo();
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAvatarWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAvatarAsync ()
        {
             await DeleteAvatarAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
             DeleteChatMessagesWithHttpInfo(deleteChatMessagesBulkInputObject, id);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
             await DeleteChatMessagesAsyncWithHttpInfo(deleteChatMessagesBulkInputObject, id);

        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
             DeleteChatsBulkWithHttpInfo(deleteChatsBulkInputObject);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
             await DeleteChatsBulkAsyncWithHttpInfo(deleteChatsBulkInputObject);

        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContact (int? id)
        {
             DeleteContactWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync (int? id)
        {
             await DeleteContactAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactAvatar (int? id)
        {
             DeleteContactAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id)
        {
             await DeleteContactAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactNote (int? id)
        {
             DeleteContactNoteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNoteAsync (int? id)
        {
             await DeleteContactNoteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
             DeleteContactNotesBulkWithHttpInfo(id, deleteContactNotesBulkInputObject);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
             await DeleteContactNotesBulkAsyncWithHttpInfo(id, deleteContactNotesBulkInputObject);

        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns></returns>
        public void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
             DeleteContactsByIdsWithHttpInfo(deleteContactsByIdsInputObject);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
             await DeleteContactsByIdsAsyncWithHttpInfo(deleteContactsByIdsInputObject);

        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             DeleteContactsFromListWithHttpInfo(deleteContacsFromListObject, id);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             await DeleteContactsFromListAsyncWithHttpInfo(deleteContacsFromListObject, id);

        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteCustomField (int? id)
        {
             DeleteCustomFieldWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id)
        {
             await DeleteCustomFieldAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteDedicatedNumber (int? id)
        {
             DeleteDedicatedNumberWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id)
        {
             await DeleteDedicatedNumberAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteInboundMessage (int? id)
        {
             DeleteInboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id)
        {
             await DeleteInboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
             DeleteInboundMessagesBulkWithHttpInfo(deleteInboundMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
             await DeleteInboundMessagesBulkAsyncWithHttpInfo(deleteInboundMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteList (int? id)
        {
             DeleteListWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAsync (int? id)
        {
             await DeleteListAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteListAvatar (int? id)
        {
             DeleteListAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAvatarAsync (int? id)
        {
             await DeleteListAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
             DeleteListContactsBulkWithHttpInfo(deleteListContactsBulkInputObject, id);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
             await DeleteListContactsBulkAsyncWithHttpInfo(deleteListContactsBulkInputObject, id);

        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
             DeleteListsBulkWithHttpInfo(deleteListsBulkInputObject);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
             await DeleteListsBulkAsyncWithHttpInfo(deleteListsBulkInputObject);

        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteMessageSession (int? id)
        {
             DeleteMessageSessionWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id)
        {
             await DeleteMessageSessionAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
             DeleteMessageSessionsBulkWithHttpInfo(deleteMessageSessionsBulkInputObject);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
             await DeleteMessageSessionsBulkAsyncWithHttpInfo(deleteMessageSessionsBulkInputObject);

        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteOutboundMessage (int? id)
        {
             DeleteOutboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id)
        {
             await DeleteOutboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
             DeleteOutboundMessagesBulkWithHttpInfo(deleteOutboundMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
             await DeleteOutboundMessagesBulkAsyncWithHttpInfo(deleteOutboundMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        public void DeletePushToken (string type, int? deviceId)
        {
             DeletePushTokenWithHttpInfo(type, deviceId);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePushTokenWithHttpInfo (string type, int? deviceId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TextMagicApi->DeletePushToken");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling TextMagicApi->DeletePushToken");

            var localVarPath = "/api/v2/push/tokens/{type}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePushTokenAsync (string type, int? deviceId)
        {
             await DeletePushTokenAsyncWithHttpInfo(type, deviceId);

        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTokenAsyncWithHttpInfo (string type, int? deviceId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TextMagicApi->DeletePushToken");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling TextMagicApi->DeletePushToken");

            var localVarPath = "/api/v2/push/tokens/{type}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteScheduledMessage (int? id)
        {
             DeleteScheduledMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id)
        {
             await DeleteScheduledMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
             DeleteScheduledMessagesBulkWithHttpInfo(deleteScheduledMessagesBulkInputObject);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
             await DeleteScheduledMessagesBulkAsyncWithHttpInfo(deleteScheduledMessagesBulkInputObject);

        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSenderId (int? id)
        {
             DeleteSenderIdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSenderIdAsync (int? id)
        {
             await DeleteSenderIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSurvey (int? id)
        {
             DeleteSurveyWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSurveyAsync (int? id)
        {
             await DeleteSurveyAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSurveyNode (int? id)
        {
             DeleteSurveyNodeWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSurveyNodeWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSurveyNodeAsync (int? id)
        {
             await DeleteSurveyNodeAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyNodeAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteTemplate (int? id)
        {
             DeleteTemplateWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync (int? id)
        {
             await DeleteTemplateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns></returns>
        public void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
             DeleteTemplatesBulkWithHttpInfo(deleteTemplatesBulkInputObject);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
             await DeleteTemplatesBulkAsyncWithHttpInfo(deleteTemplatesBulkInputObject);

        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>DoAuthResponse</returns>
        public DoAuthResponse DoAuth (DoAuthInputObject doAuthInputObject)
        {
             ApiResponse<DoAuthResponse> localVarResponse = DoAuthWithHttpInfo(doAuthInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>ApiResponse of DoAuthResponse</returns>
        public ApiResponse< DoAuthResponse > DoAuthWithHttpInfo (DoAuthInputObject doAuthInputObject)
        {
            // verify the required parameter 'doAuthInputObject' is set
            if (doAuthInputObject == null)
                throw new ApiException(400, "Missing required parameter 'doAuthInputObject' when calling TextMagicApi->DoAuth");

            var localVarPath = "/api/v2/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doAuthInputObject != null && doAuthInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doAuthInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doAuthInputObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoAuthResponse)));
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>Task of DoAuthResponse</returns>
        public async System.Threading.Tasks.Task<DoAuthResponse> DoAuthAsync (DoAuthInputObject doAuthInputObject)
        {
             ApiResponse<DoAuthResponse> localVarResponse = await DoAuthAsyncWithHttpInfo(doAuthInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <returns>Task of ApiResponse (DoAuthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoAuthResponse>> DoAuthAsyncWithHttpInfo (DoAuthInputObject doAuthInputObject)
        {
            // verify the required parameter 'doAuthInputObject' is set
            if (doAuthInputObject == null)
                throw new ApiException(400, "Missing required parameter 'doAuthInputObject' when calling TextMagicApi->DoAuth");

            var localVarPath = "/api/v2/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (doAuthInputObject != null && doAuthInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doAuthInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doAuthInputObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoAuthResponse)));
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        public DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = DoCarrierLookupWithHttpInfo(phone, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        public ApiResponse< DoCarrierLookupResponse > DoCarrierLookupWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = await DoCarrierLookupAsyncWithHttpInfo(phone, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>DoEmailLookupResponse</returns>
        public DoEmailLookupResponse DoEmailLookup (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = DoEmailLookupWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        public ApiResponse< DoEmailLookupResponse > DoEmailLookupWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = await DoEmailLookupAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse DuplicateSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = DuplicateSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > DuplicateSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DuplicateSurvey");

            var localVarPath = "/api/v2/surveys/{id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> DuplicateSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await DuplicateSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> DuplicateSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DuplicateSurvey");

            var localVarPath = "/api/v2/surveys/{id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsPaginatedResponse</returns>
        public GetAllBulkSessionsPaginatedResponse GetAllBulkSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsPaginatedResponse> localVarResponse = GetAllBulkSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsPaginatedResponse</returns>
        public ApiResponse< GetAllBulkSessionsPaginatedResponse > GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllBulkSessionsPaginatedResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsPaginatedResponse> localVarResponse = await GetAllBulkSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsPaginatedResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>GetAllChatsPaginatedResponse</returns>
        public GetAllChatsPaginatedResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsPaginatedResponse> localVarResponse = GetAllChatsWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsPaginatedResponse</returns>
        public ApiResponse< GetAllChatsPaginatedResponse > GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsPaginatedResponse)));
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllChatsPaginatedResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsPaginatedResponse> localVarResponse = await GetAllChatsAsyncWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllChatsPaginatedResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsPaginatedResponse)));
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesPaginatedResponse</returns>
        public GetAllInboundMessagesPaginatedResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesPaginatedResponse> localVarResponse = GetAllInboundMessagesWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllInboundMessagesPaginatedResponse > GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInboundMessagesPaginatedResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesPaginatedResponse> localVarResponse = await GetAllInboundMessagesAsyncWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesPaginatedResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsPaginatedResponse</returns>
        public GetAllMessageSessionsPaginatedResponse GetAllMessageSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsPaginatedResponse> localVarResponse = GetAllMessageSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsPaginatedResponse</returns>
        public ApiResponse< GetAllMessageSessionsPaginatedResponse > GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllMessageSessionsPaginatedResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsPaginatedResponse> localVarResponse = await GetAllMessageSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsPaginatedResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsPaginatedResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>GetAllOutboundMessagesPaginatedResponse</returns>
        public GetAllOutboundMessagesPaginatedResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesPaginatedResponse> localVarResponse = GetAllOutboundMessagesWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllOutboundMessagesPaginatedResponse > GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllOutboundMessagesPaginatedResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesPaginatedResponse> localVarResponse = await GetAllOutboundMessagesAsyncWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesPaginatedResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesPaginatedResponse</returns>
        public GetAllScheduledMessagesPaginatedResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesPaginatedResponse> localVarResponse = GetAllScheduledMessagesWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesPaginatedResponse</returns>
        public ApiResponse< GetAllScheduledMessagesPaginatedResponse > GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllScheduledMessagesPaginatedResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesPaginatedResponse> localVarResponse = await GetAllScheduledMessagesAsyncWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesPaginatedResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>GetAllTemplatesPaginatedResponse</returns>
        public GetAllTemplatesPaginatedResponse GetAllTemplates (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesPaginatedResponse> localVarResponse = GetAllTemplatesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesPaginatedResponse</returns>
        public ApiResponse< GetAllTemplatesPaginatedResponse > GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of GetAllTemplatesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTemplatesPaginatedResponse> GetAllTemplatesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesPaginatedResponse> localVarResponse = await GetAllTemplatesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesPaginatedResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        public GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = GetAvailableDedicatedNumbersWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        public ApiResponse< GetAvailableDedicatedNumbersResponse > GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = await GetAvailableDedicatedNumbersAsyncWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        public GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = GetAvailableSenderSettingOptionsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        public ApiResponse< GetAvailableSenderSettingOptionsResponse > GetAvailableSenderSettingOptionsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = await GetAvailableSenderSettingOptionsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        public GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = GetBalanceNotificationOptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        public ApiResponse< GetBalanceNotificationOptionsResponse > GetBalanceNotificationOptionsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = await GetBalanceNotificationOptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        public GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = GetBalanceNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        public ApiResponse< GetBalanceNotificationSettingsResponse > GetBalanceNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = await GetBalanceNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetBlockedContactsPaginatedResponse</returns>
        public GetBlockedContactsPaginatedResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsPaginatedResponse> localVarResponse = GetBlockedContactsWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsPaginatedResponse</returns>
        public ApiResponse< GetBlockedContactsPaginatedResponse > GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetBlockedContactsPaginatedResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsPaginatedResponse> localVarResponse = await GetBlockedContactsAsyncWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsPaginatedResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        public BulkSession GetBulkSession (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = GetBulkSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        public ApiResponse< BulkSession > GetBulkSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        public async System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = await GetBulkSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        public GetCallbackSettingsResponse GetCallbackSettings ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = GetCallbackSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        public ApiResponse< GetCallbackSettingsResponse > GetCallbackSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = await GetCallbackSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallsPricesResponse</returns>
        public GetCallsPricesResponse GetCallsPrices ()
        {
             ApiResponse<GetCallsPricesResponse> localVarResponse = GetCallsPricesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallsPricesResponse</returns>
        public ApiResponse< GetCallsPricesResponse > GetCallsPricesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/calls/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallsPricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallsPricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallsPricesResponse)));
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallsPricesResponse</returns>
        public async System.Threading.Tasks.Task<GetCallsPricesResponse> GetCallsPricesAsync ()
        {
             ApiResponse<GetCallsPricesResponse> localVarResponse = await GetCallsPricesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallsPricesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCallsPricesResponse>> GetCallsPricesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/calls/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallsPricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallsPricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallsPricesResponse)));
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        public Chat GetChat (int? id)
        {
             ApiResponse<Chat> localVarResponse = GetChatWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatAsync (int? id)
        {
             ApiResponse<Chat> localVarResponse = await GetChatAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Chat</returns>
        public Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = GetChatByPhoneWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = await GetChatByPhoneAsyncWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>GetChatMessagesPaginatedResponse</returns>
        public GetChatMessagesPaginatedResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesPaginatedResponse> localVarResponse = GetChatMessagesWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesPaginatedResponse</returns>
        public ApiResponse< GetChatMessagesPaginatedResponse > GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetChatMessagesPaginatedResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesPaginatedResponse> localVarResponse = await GetChatMessagesAsyncWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChatMessagesPaginatedResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Contact</returns>
        public Contact GetContact (int? id)
        {
             ApiResponse<Contact> localVarResponse = GetContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactAsync (int? id)
        {
             ApiResponse<Contact> localVarResponse = await GetContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        public Contact GetContactByPhone (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactByPhoneWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactByPhoneWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactByPhoneAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Contact</returns>
        public Contact GetContactIfBlocked (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactIfBlockedWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactIfBlockedWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactIfBlockedAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        public GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = GetContactImportSessionProgressWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        public ApiResponse< GetContactImportSessionProgressResponse > GetContactImportSessionProgressWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        public async System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = await GetContactImportSessionProgressAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        public ContactNote GetContactNote (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = GetContactNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        public ApiResponse< ContactNote > GetContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        public async System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = await GetContactNoteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetContactNotesPaginatedResponse</returns>
        public GetContactNotesPaginatedResponse GetContactNotes (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesPaginatedResponse> localVarResponse = GetContactNotesWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesPaginatedResponse</returns>
        public ApiResponse< GetContactNotesPaginatedResponse > GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesPaginatedResponse)));
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactNotesPaginatedResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesPaginatedResponse> localVarResponse = await GetContactNotesAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactNotesPaginatedResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesPaginatedResponse)));
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsPaginatedResponse</returns>
        public GetContactsPaginatedResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsPaginatedResponse> localVarResponse = GetContactsWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsPaginatedResponse</returns>
        public ApiResponse< GetContactsPaginatedResponse > GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsPaginatedResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsPaginatedResponse> localVarResponse = await GetContactsAsyncWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsPaginatedResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsPaginatedResponse)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>GetContactsAutocompleteResponse</returns>
        public GetContactsAutocompleteResponse GetContactsAutocomplete (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<GetContactsAutocompleteResponse> localVarResponse = GetContactsAutocompleteWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContactsAutocompleteResponse</returns>
        public ApiResponse< GetContactsAutocompleteResponse > GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsAutocompleteResponse)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of GetContactsAutocompleteResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsAutocompleteResponse> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<GetContactsAutocompleteResponse> localVarResponse = await GetContactsAutocompleteAsyncWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContactsAutocompleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsAutocompleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsAutocompleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsAutocompleteResponse)));
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsByListIdPaginatedResponse</returns>
        public GetContactsByListIdPaginatedResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdPaginatedResponse> localVarResponse = GetContactsByListIdWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdPaginatedResponse</returns>
        public ApiResponse< GetContactsByListIdPaginatedResponse > GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdPaginatedResponse)));
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsByListIdPaginatedResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdPaginatedResponse> localVarResponse = await GetContactsByListIdAsyncWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdPaginatedResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdPaginatedResponse)));
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCountriesResponse</returns>
        public GetCountriesResponse GetCountries ()
        {
             ApiResponse<GetCountriesResponse> localVarResponse = GetCountriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCountriesResponse</returns>
        public ApiResponse< GetCountriesResponse > GetCountriesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountriesResponse)));
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCountriesResponse</returns>
        public async System.Threading.Tasks.Task<GetCountriesResponse> GetCountriesAsync ()
        {
             ApiResponse<GetCountriesResponse> localVarResponse = await GetCountriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCountriesResponse>> GetCountriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCountriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCountriesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCountriesResponse)));
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetCurrentUser ()
        {
             ApiResponse<User> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetCurrentUserAsync ()
        {
             ApiResponse<User> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        public UserCustomField GetCustomField (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = GetCustomFieldWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        public ApiResponse< UserCustomField > GetCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        public async System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = await GetCustomFieldAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetCustomFieldsPaginatedResponse</returns>
        public GetCustomFieldsPaginatedResponse GetCustomFields (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsPaginatedResponse> localVarResponse = GetCustomFieldsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsPaginatedResponse</returns>
        public ApiResponse< GetCustomFieldsPaginatedResponse > GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsPaginatedResponse)));
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomFieldsPaginatedResponse> GetCustomFieldsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsPaginatedResponse> localVarResponse = await GetCustomFieldsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsPaginatedResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsPaginatedResponse)));
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        public UsersInbound GetDedicatedNumber (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = GetDedicatedNumberWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        public ApiResponse< UsersInbound > GetDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        public async System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = await GetDedicatedNumberAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetDisallowedRulesResponse</returns>
        public GetDisallowedRulesResponse GetDisallowedRules ()
        {
             ApiResponse<GetDisallowedRulesResponse> localVarResponse = GetDisallowedRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetDisallowedRulesResponse</returns>
        public ApiResponse< GetDisallowedRulesResponse > GetDisallowedRulesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/disallowed-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDisallowedRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDisallowedRulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDisallowedRulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDisallowedRulesResponse)));
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetDisallowedRulesResponse</returns>
        public async System.Threading.Tasks.Task<GetDisallowedRulesResponse> GetDisallowedRulesAsync ()
        {
             ApiResponse<GetDisallowedRulesResponse> localVarResponse = await GetDisallowedRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetDisallowedRulesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDisallowedRulesResponse>> GetDisallowedRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/disallowed-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDisallowedRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDisallowedRulesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetDisallowedRulesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDisallowedRulesResponse)));
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>GetFavouritesPaginatedResponse</returns>
        public GetFavouritesPaginatedResponse GetFavourites (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavouritesPaginatedResponse> localVarResponse = GetFavouritesWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>ApiResponse of GetFavouritesPaginatedResponse</returns>
        public ApiResponse< GetFavouritesPaginatedResponse > GetFavouritesWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavourites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavouritesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavouritesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavouritesPaginatedResponse)));
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of GetFavouritesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetFavouritesPaginatedResponse> GetFavouritesAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavouritesPaginatedResponse> localVarResponse = await GetFavouritesAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of ApiResponse (GetFavouritesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFavouritesPaginatedResponse>> GetFavouritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavourites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavouritesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavouritesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavouritesPaginatedResponse)));
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetForwardedCallsPaginatedResponse</returns>
        public GetForwardedCallsPaginatedResponse GetForwardedCalls (int? page = null, int? limit = null)
        {
             ApiResponse<GetForwardedCallsPaginatedResponse> localVarResponse = GetForwardedCallsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetForwardedCallsPaginatedResponse</returns>
        public ApiResponse< GetForwardedCallsPaginatedResponse > GetForwardedCallsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardedCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetForwardedCallsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetForwardedCallsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetForwardedCallsPaginatedResponse)));
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetForwardedCallsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetForwardedCallsPaginatedResponse> GetForwardedCallsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetForwardedCallsPaginatedResponse> localVarResponse = await GetForwardedCallsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetForwardedCallsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetForwardedCallsPaginatedResponse>> GetForwardedCallsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardedCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetForwardedCallsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetForwardedCallsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetForwardedCallsPaginatedResponse)));
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageIn</returns>
        public MessageIn GetInboundMessage (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = GetInboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageIn</returns>
        public ApiResponse< MessageIn > GetInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageIn</returns>
        public async System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = await GetInboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        public GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = GetInboundMessagesNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        public ApiResponse< GetInboundMessagesNotificationSettingsResponse > GetInboundMessagesNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = await GetInboundMessagesNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetInvoicesPaginatedResponse</returns>
        public GetInvoicesPaginatedResponse GetInvoices (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesPaginatedResponse> localVarResponse = GetInvoicesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesPaginatedResponse</returns>
        public ApiResponse< GetInvoicesPaginatedResponse > GetInvoicesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesPaginatedResponse)));
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoicesPaginatedResponse> GetInvoicesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesPaginatedResponse> localVarResponse = await GetInvoicesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInvoicesPaginatedResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesPaginatedResponse)));
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Group</returns>
        public Group GetList (int? id)
        {
             ApiResponse<Group> localVarResponse = GetListWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Group</returns>
        public ApiResponse< Group > GetListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetListAsync (int? id)
        {
             ApiResponse<Group> localVarResponse = await GetListAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Group>> GetListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        public GetListContactsIdsResponse GetListContactsIds (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = GetListContactsIdsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        public ApiResponse< GetListContactsIdsResponse > GetListContactsIdsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        public async System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = await GetListContactsIdsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetListsOfContactPaginatedResponse</returns>
        public GetListsOfContactPaginatedResponse GetListsOfContact (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactPaginatedResponse> localVarResponse = GetListsOfContactWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactPaginatedResponse</returns>
        public ApiResponse< GetListsOfContactPaginatedResponse > GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactPaginatedResponse)));
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetListsOfContactPaginatedResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactPaginatedResponse> localVarResponse = await GetListsOfContactAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListsOfContactPaginatedResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactPaginatedResponse)));
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        public GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = GetMessagePreviewWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        public ApiResponse< GetMessagePreviewResponse > GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = await GetMessagePreviewAsyncWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        public GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = GetMessagePriceWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        public ApiResponse< GetMessagePriceResponse > GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = await GetMessagePriceAsyncWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagePricesResponse</returns>
        public GetMessagePricesResponse GetMessagePrices ()
        {
             ApiResponse<GetMessagePricesResponse> localVarResponse = GetMessagePricesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagePricesResponse</returns>
        public ApiResponse< GetMessagePricesResponse > GetMessagePricesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/messages/prices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePricesResponse)));
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagePricesResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePricesResponse> GetMessagePricesAsync ()
        {
             ApiResponse<GetMessagePricesResponse> localVarResponse = await GetMessagePricesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagePricesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePricesResponse>> GetMessagePricesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/messages/prices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePricesResponse)));
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageSession</returns>
        public MessageSession GetMessageSession (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = GetMessageSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageSession</returns>
        public ApiResponse< MessageSession > GetMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageSession</returns>
        public async System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = await GetMessageSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        public GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = GetMessageSessionStatWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        public ApiResponse< GetMessageSessionStatResponse > GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = await GetMessageSessionStatAsyncWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdPaginatedResponse</returns>
        public GetMessagesBySessionIdPaginatedResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdPaginatedResponse> localVarResponse = GetMessagesBySessionIdWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdPaginatedResponse</returns>
        public ApiResponse< GetMessagesBySessionIdPaginatedResponse > GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdPaginatedResponse)));
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagesBySessionIdPaginatedResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdPaginatedResponse> localVarResponse = await GetMessagesBySessionIdAsyncWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdPaginatedResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdPaginatedResponse)));
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        public GetMessagingCountersResponse GetMessagingCounters ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = GetMessagingCountersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        public ApiResponse< GetMessagingCountersResponse > GetMessagingCountersWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = await GetMessagingCountersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        public GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, string end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = GetMessagingStatWithHttpInfo(by, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        public ApiResponse< GetMessagingStatResponse > GetMessagingStatWithHttpInfo (string by = null, int? start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, string end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = await GetMessagingStatAsyncWithHttpInfo(by, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        public MessageOut GetOutboundMessage (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = GetOutboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        public ApiResponse< MessageOut > GetOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        public async System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = await GetOutboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryPaginatedResponse</returns>
        public GetOutboundMessagesHistoryPaginatedResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> localVarResponse = GetOutboundMessagesHistoryWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryPaginatedResponse</returns>
        public ApiResponse< GetOutboundMessagesHistoryPaginatedResponse > GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryPaginatedResponse)));
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetOutboundMessagesHistoryPaginatedResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryPaginatedResponse> localVarResponse = await GetOutboundMessagesHistoryAsyncWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryPaginatedResponse)));
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPushTokensResponse</returns>
        public GetPushTokensResponse GetPushTokens ()
        {
             ApiResponse<GetPushTokensResponse> localVarResponse = GetPushTokensWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPushTokensResponse</returns>
        public ApiResponse< GetPushTokensResponse > GetPushTokensWithHttpInfo ()
        {

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushTokensResponse)));
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPushTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetPushTokensResponse> GetPushTokensAsync ()
        {
             ApiResponse<GetPushTokensResponse> localVarResponse = await GetPushTokensAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPushTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPushTokensResponse>> GetPushTokensAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushTokensResponse)));
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        public MessagesIcs GetScheduledMessage (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = GetScheduledMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        public ApiResponse< MessagesIcs > GetScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        public async System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = await GetScheduledMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        public SenderId GetSenderId (int? id)
        {
             ApiResponse<SenderId> localVarResponse = GetSenderIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        public ApiResponse< SenderId > GetSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        public async System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id)
        {
             ApiResponse<SenderId> localVarResponse = await GetSenderIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSenderIdsPaginatedResponse</returns>
        public GetSenderIdsPaginatedResponse GetSenderIds (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsPaginatedResponse> localVarResponse = GetSenderIdsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsPaginatedResponse</returns>
        public ApiResponse< GetSenderIdsPaginatedResponse > GetSenderIdsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsPaginatedResponse)));
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderIdsPaginatedResponse> GetSenderIdsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsPaginatedResponse> localVarResponse = await GetSenderIdsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderIdsPaginatedResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsPaginatedResponse)));
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        public GetSenderSettingsResponse GetSenderSettings (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = GetSenderSettingsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        public ApiResponse< GetSenderSettingsResponse > GetSenderSettingsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = await GetSenderSettingsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetSpendingStatPaginatedResponse</returns>
        public GetSpendingStatPaginatedResponse GetSpendingStat (int? page = null, int? limit = null, int? start = null, int? end = null)
        {
             ApiResponse<GetSpendingStatPaginatedResponse> localVarResponse = GetSpendingStatWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatPaginatedResponse</returns>
        public ApiResponse< GetSpendingStatPaginatedResponse > GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatPaginatedResponse)));
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetSpendingStatPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetSpendingStatPaginatedResponse> GetSpendingStatAsync (int? page = null, int? limit = null, int? start = null, int? end = null)
        {
             ApiResponse<GetSpendingStatPaginatedResponse> localVarResponse = await GetSpendingStatAsyncWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpendingStatPaginatedResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatPaginatedResponse)));
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetStateResponse</returns>
        public GetStateResponse GetState ()
        {
             ApiResponse<GetStateResponse> localVarResponse = GetStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetStateResponse</returns>
        public ApiResponse< GetStateResponse > GetStateWithHttpInfo ()
        {

            var localVarPath = "/api/v2/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateResponse)));
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetStateResponse</returns>
        public async System.Threading.Tasks.Task<GetStateResponse> GetStateAsync ()
        {
             ApiResponse<GetStateResponse> localVarResponse = await GetStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStateResponse>> GetStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateResponse)));
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User GetSubaccount (int? id)
        {
             ApiResponse<User> localVarResponse = GetSubaccountWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>User</returns>
        public User GetSubaccounts (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = GetSubaccountsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        public GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = GetSubaccountsWithTokensWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        public ApiResponse< GetSubaccountsWithTokensResponse > GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = await GetSubaccountsWithTokensAsyncWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Survey</returns>
        public Survey GetSurvey (int? id)
        {
             ApiResponse<Survey> localVarResponse = GetSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Survey</returns>
        public ApiResponse< Survey > GetSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Survey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Survey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Survey)));
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Survey</returns>
        public async System.Threading.Tasks.Task<Survey> GetSurveyAsync (int? id)
        {
             ApiResponse<Survey> localVarResponse = await GetSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Survey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Survey>> GetSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Survey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Survey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Survey)));
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SurveyNode</returns>
        public SurveyNode GetSurveyNode (int? id)
        {
             ApiResponse<SurveyNode> localVarResponse = GetSurveyNodeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SurveyNode</returns>
        public ApiResponse< SurveyNode > GetSurveyNodeWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurveyNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SurveyNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurveyNode)));
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SurveyNode</returns>
        public async System.Threading.Tasks.Task<SurveyNode> GetSurveyNodeAsync (int? id)
        {
             ApiResponse<SurveyNode> localVarResponse = await GetSurveyNodeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SurveyNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SurveyNode>> GetSurveyNodeAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurveyNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SurveyNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurveyNode)));
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSurveyNodesResponse</returns>
        public GetSurveyNodesResponse GetSurveyNodes (int? id)
        {
             ApiResponse<GetSurveyNodesResponse> localVarResponse = GetSurveyNodesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSurveyNodesResponse</returns>
        public ApiResponse< GetSurveyNodesResponse > GetSurveyNodesWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNodes");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveyNodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveyNodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveyNodesResponse)));
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSurveyNodesResponse</returns>
        public async System.Threading.Tasks.Task<GetSurveyNodesResponse> GetSurveyNodesAsync (int? id)
        {
             ApiResponse<GetSurveyNodesResponse> localVarResponse = await GetSurveyNodesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSurveyNodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSurveyNodesResponse>> GetSurveyNodesAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNodes");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveyNodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveyNodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveyNodesResponse)));
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSurveysPaginatedResponse</returns>
        public GetSurveysPaginatedResponse GetSurveys (int? page = null, int? limit = null)
        {
             ApiResponse<GetSurveysPaginatedResponse> localVarResponse = GetSurveysWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSurveysPaginatedResponse</returns>
        public ApiResponse< GetSurveysPaginatedResponse > GetSurveysWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveysPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveysPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveysPaginatedResponse)));
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSurveysPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetSurveysPaginatedResponse> GetSurveysAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetSurveysPaginatedResponse> localVarResponse = await GetSurveysAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSurveysPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSurveysPaginatedResponse>> GetSurveysAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveysPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveysPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveysPaginatedResponse)));
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        public MessageTemplate GetTemplate (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = GetTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        public ApiResponse< MessageTemplate > GetTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        public async System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = await GetTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>GetTimezonesResponse</returns>
        public GetTimezonesResponse GetTimezones (int? full = null)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = GetTimezonesWithHttpInfo(full);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of GetTimezonesResponse</returns>
        public ApiResponse< GetTimezonesResponse > GetTimezonesWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of GetTimezonesResponse</returns>
        public async System.Threading.Tasks.Task<GetTimezonesResponse> GetTimezonesAsync (int? full = null)
        {
             ApiResponse<GetTimezonesResponse> localVarResponse = await GetTimezonesAsyncWithHttpInfo(full);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetTimezonesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTimezonesResponse>> GetTimezonesAsyncWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTimezonesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetTimezonesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTimezonesResponse)));
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        public GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = GetUnreadMessagesTotalWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        public ApiResponse< GetUnreadMessagesTotalResponse > GetUnreadMessagesTotalWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        public async System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = await GetUnreadMessagesTotalAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        public UnsubscribedContact GetUnsubscribedContact (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = GetUnsubscribedContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        public ApiResponse< UnsubscribedContact > GetUnsubscribedContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        public async System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = await GetUnsubscribedContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetUnsubscribersPaginatedResponse</returns>
        public GetUnsubscribersPaginatedResponse GetUnsubscribers (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersPaginatedResponse> localVarResponse = GetUnsubscribersWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersPaginatedResponse</returns>
        public ApiResponse< GetUnsubscribersPaginatedResponse > GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersPaginatedResponse)));
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetUnsubscribersPaginatedResponse> GetUnsubscribersAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersPaginatedResponse> localVarResponse = await GetUnsubscribersAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersPaginatedResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersPaginatedResponse)));
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>GetUserDedicatedNumbersPaginatedResponse</returns>
        public GetUserDedicatedNumbersPaginatedResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersPaginatedResponse> localVarResponse = GetUserDedicatedNumbersWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersPaginatedResponse</returns>
        public ApiResponse< GetUserDedicatedNumbersPaginatedResponse > GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersPaginatedResponse)));
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetUserDedicatedNumbersPaginatedResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersPaginatedResponse> localVarResponse = await GetUserDedicatedNumbersAsyncWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersPaginatedResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersPaginatedResponse)));
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>GetUserListsPaginatedResponse</returns>
        public GetUserListsPaginatedResponse GetUserLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetUserListsPaginatedResponse> localVarResponse = GetUserListsWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>ApiResponse of GetUserListsPaginatedResponse</returns>
        public ApiResponse< GetUserListsPaginatedResponse > GetUserListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserListsPaginatedResponse)));
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of GetUserListsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<GetUserListsPaginatedResponse> GetUserListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetUserListsPaginatedResponse> localVarResponse = await GetUserListsAsyncWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetUserListsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserListsPaginatedResponse>> GetUserListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserListsPaginatedResponse)));
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetVersionsResponse</returns>
        public GetVersionsResponse GetVersions ()
        {
             ApiResponse<GetVersionsResponse> localVarResponse = GetVersionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetVersionsResponse</returns>
        public ApiResponse< GetVersionsResponse > GetVersionsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVersionsResponse)));
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GetVersionsResponse> GetVersionsAsync ()
        {
             ApiResponse<GetVersionsResponse> localVarResponse = await GetVersionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVersionsResponse>> GetVersionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVersionsResponse)));
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns></returns>
        public void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
             InviteSubaccountWithHttpInfo(inviteSubaccountInputObject);
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
             await InviteSubaccountAsyncWithHttpInfo(inviteSubaccountInputObject);

        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns></returns>
        public void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
             MarkChatsReadBulkWithHttpInfo(markChatsReadBulkInputObject);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
             await MarkChatsReadBulkAsyncWithHttpInfo(markChatsReadBulkInputObject);

        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns></returns>
        public void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
             MarkChatsUnreadBulkWithHttpInfo(markChatsUnreadBulkInputObject);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
             await MarkChatsUnreadBulkAsyncWithHttpInfo(markChatsUnreadBulkInputObject);

        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns></returns>
        public void MergeSurveyNodes (MergeSurveyNodesInputObject mergeSurveyNodesInputObject)
        {
             MergeSurveyNodesWithHttpInfo(mergeSurveyNodesInputObject);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MergeSurveyNodesWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject)
        {
            // verify the required parameter 'mergeSurveyNodesInputObject' is set
            if (mergeSurveyNodesInputObject == null)
                throw new ApiException(400, "Missing required parameter 'mergeSurveyNodesInputObject' when calling TextMagicApi->MergeSurveyNodes");

            var localVarPath = "/api/v2/surveys/nodes/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mergeSurveyNodesInputObject != null && mergeSurveyNodesInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeSurveyNodesInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeSurveyNodesInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MergeSurveyNodesAsync (MergeSurveyNodesInputObject mergeSurveyNodesInputObject)
        {
             await MergeSurveyNodesAsyncWithHttpInfo(mergeSurveyNodesInputObject);

        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MergeSurveyNodesAsyncWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject)
        {
            // verify the required parameter 'mergeSurveyNodesInputObject' is set
            if (mergeSurveyNodesInputObject == null)
                throw new ApiException(400, "Missing required parameter 'mergeSurveyNodesInputObject' when calling TextMagicApi->MergeSurveyNodes");

            var localVarPath = "/api/v2/surveys/nodes/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mergeSurveyNodesInputObject != null && mergeSurveyNodesInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeSurveyNodesInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeSurveyNodesInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = MuteChatWithHttpInfo(muteChatInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await MuteChatAsyncWithHttpInfo(muteChatInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
             MuteChatsBulkWithHttpInfo(muteChatsBulkInputObject);
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
             await MuteChatsBulkAsyncWithHttpInfo(muteChatsBulkInputObject);

        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        public PingResponse Ping ()
        {
             ApiResponse<PingResponse> localVarResponse = PingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        public ApiResponse< PingResponse > PingWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        public async System.Threading.Tasks.Task<PingResponse> PingAsync ()
        {
             ApiResponse<PingResponse> localVarResponse = await PingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns></returns>
        public void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
             ReopenChatsBulkWithHttpInfo(reopenChatsBulkInputObject);
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
             await ReopenChatsBulkAsyncWithHttpInfo(reopenChatsBulkInputObject);

        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>User</returns>
        public User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
             ApiResponse<User> localVarResponse = RequestNewSubaccountTokenWithHttpInfo(requestNewSubaccountTokenInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
             ApiResponse<User> localVarResponse = await RequestNewSubaccountTokenAsyncWithHttpInfo(requestNewSubaccountTokenInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = RequestSenderIdWithHttpInfo(requestSenderIdInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await RequestSenderIdAsyncWithHttpInfo(requestSenderIdInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ResetSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ResetSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ResetSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ResetSurvey");

            var localVarPath = "/api/v2/surveys/{id}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ResetSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ResetSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ResetSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ResetSurvey");

            var localVarPath = "/api/v2/surveys/{id}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>SearchChatsPaginatedResponse</returns>
        public SearchChatsPaginatedResponse SearchChats (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsPaginatedResponse> localVarResponse = SearchChatsWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchChatsPaginatedResponse</returns>
        public ApiResponse< SearchChatsPaginatedResponse > SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of SearchChatsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsPaginatedResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsPaginatedResponse> localVarResponse = await SearchChatsAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsPaginatedResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>SearchChatsByIdsPaginatedResponse</returns>
        public SearchChatsByIdsPaginatedResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsPaginatedResponse> localVarResponse = SearchChatsByIdsWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsPaginatedResponse</returns>
        public ApiResponse< SearchChatsByIdsPaginatedResponse > SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of SearchChatsByIdsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByIdsPaginatedResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsPaginatedResponse> localVarResponse = await SearchChatsByIdsAsyncWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsPaginatedResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentPaginatedResponse</returns>
        public SearchChatsByReceipentPaginatedResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentPaginatedResponse> localVarResponse = SearchChatsByReceipentWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentPaginatedResponse</returns>
        public ApiResponse< SearchChatsByReceipentPaginatedResponse > SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentPaginatedResponse)));
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByReceipentPaginatedResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentPaginatedResponse> localVarResponse = await SearchChatsByReceipentAsyncWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentPaginatedResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentPaginatedResponse)));
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchContactsPaginatedResponse</returns>
        public SearchContactsPaginatedResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsPaginatedResponse> localVarResponse = SearchContactsWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsPaginatedResponse</returns>
        public ApiResponse< SearchContactsPaginatedResponse > SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsPaginatedResponse)));
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchContactsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchContactsPaginatedResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsPaginatedResponse> localVarResponse = await SearchContactsAsyncWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContactsPaginatedResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsPaginatedResponse)));
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesPaginatedResponse</returns>
        public SearchInboundMessagesPaginatedResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesPaginatedResponse> localVarResponse = SearchInboundMessagesWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesPaginatedResponse</returns>
        public ApiResponse< SearchInboundMessagesPaginatedResponse > SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchInboundMessagesPaginatedResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesPaginatedResponse> localVarResponse = await SearchInboundMessagesAsyncWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesPaginatedResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchListsPaginatedResponse</returns>
        public SearchListsPaginatedResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsPaginatedResponse> localVarResponse = SearchListsWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsPaginatedResponse</returns>
        public ApiResponse< SearchListsPaginatedResponse > SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsPaginatedResponse)));
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchListsPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchListsPaginatedResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsPaginatedResponse> localVarResponse = await SearchListsAsyncWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchListsPaginatedResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsPaginatedResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>SearchOutboundMessagesPaginatedResponse</returns>
        public SearchOutboundMessagesPaginatedResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesPaginatedResponse> localVarResponse = SearchOutboundMessagesWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesPaginatedResponse</returns>
        public ApiResponse< SearchOutboundMessagesPaginatedResponse > SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of SearchOutboundMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchOutboundMessagesPaginatedResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesPaginatedResponse> localVarResponse = await SearchOutboundMessagesAsyncWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesPaginatedResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesPaginatedResponse</returns>
        public SearchScheduledMessagesPaginatedResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesPaginatedResponse> localVarResponse = SearchScheduledMessagesWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesPaginatedResponse</returns>
        public ApiResponse< SearchScheduledMessagesPaginatedResponse > SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchScheduledMessagesPaginatedResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesPaginatedResponse> localVarResponse = await SearchScheduledMessagesAsyncWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesPaginatedResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesPaginatedResponse)));
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>SearchTemplatesPaginatedResponse</returns>
        public SearchTemplatesPaginatedResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesPaginatedResponse> localVarResponse = SearchTemplatesWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesPaginatedResponse</returns>
        public ApiResponse< SearchTemplatesPaginatedResponse > SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of SearchTemplatesPaginatedResponse</returns>
        public async System.Threading.Tasks.Task<SearchTemplatesPaginatedResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesPaginatedResponse> localVarResponse = await SearchTemplatesAsyncWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesPaginatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchTemplatesPaginatedResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesPaginatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesPaginatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesPaginatedResponse)));
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SendEmailVerificationCode ()
        {
             SendEmailVerificationCodeWithHttpInfo();
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendEmailVerificationCodeWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/email/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailVerificationCodeAsync ()
        {
             await SendEmailVerificationCodeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailVerificationCodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/email/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject)
        {
             ApiResponse<SendMessageResponse> localVarResponse = SendMessageWithHttpInfo(sendMessageInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse< SendMessageResponse > SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject)
        {
             ApiResponse<SendMessageResponse> localVarResponse = await SendMessageAsyncWithHttpInfo(sendMessageInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SendPhoneVerificationCode ()
        {
             SendPhoneVerificationCodeWithHttpInfo();
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendPhoneVerificationCodeWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendPhoneVerificationCodeAsync ()
        {
             await SendPhoneVerificationCodeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendPhoneVerificationCodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = SetChatStatusWithHttpInfo(setChatStatusInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await SetChatStatusAsyncWithHttpInfo(setChatStatusInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse StartSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = StartSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > StartSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->StartSurvey");

            var localVarPath = "/api/v2/surveys/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> StartSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await StartSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> StartSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->StartSurvey");

            var localVarPath = "/api/v2/surveys/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns></returns>
        public void UnblockContact (UnblockContactInputObject unblockContactInputObject)
        {
             UnblockContactWithHttpInfo(unblockContactInputObject);
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject)
        {
             await UnblockContactAsyncWithHttpInfo(unblockContactInputObject);

        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns></returns>
        public void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
             UnblockContactsBulkWithHttpInfo(unblockContactsBulkInputObject);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
             await UnblockContactsBulkAsyncWithHttpInfo(unblockContactsBulkInputObject);

        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns></returns>
        public void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
             UnmuteChatsBulkWithHttpInfo(unmuteChatsBulkInputObject);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
             await UnmuteChatsBulkAsyncWithHttpInfo(unmuteChatsBulkInputObject);

        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UnsubscribeContactWithHttpInfo(unsubscribeContactInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UnsubscribeContactAsyncWithHttpInfo(unsubscribeContactInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
             UpdateBalanceNotificationSettingsWithHttpInfo(updateBalanceNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
             await UpdateBalanceNotificationSettingsAsyncWithHttpInfo(updateBalanceNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
             UpdateCallbackSettingsWithHttpInfo(updateCallbackSettingsInputObject);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
             await UpdateCallbackSettingsAsyncWithHttpInfo(updateCallbackSettingsInputObject);

        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
             UpdateChatDesktopNotificationSettingsWithHttpInfo(updateChatDesktopNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
             await UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo(updateChatDesktopNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactWithHttpInfo(updateContactInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactAsyncWithHttpInfo(updateContactInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactNoteWithHttpInfo(updateContactNoteInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactNoteAsyncWithHttpInfo(updateContactNoteInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>UpdateCurrentUserResponse</returns>
        public UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = UpdateCurrentUserWithHttpInfo(updateCurrentUserInputObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        public ApiResponse< UpdateCurrentUserResponse > UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = await UpdateCurrentUserAsyncWithHttpInfo(updateCurrentUserInputObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldWithHttpInfo(updateCustomFieldInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldAsyncWithHttpInfo(updateCustomFieldInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldValueWithHttpInfo(updateCustomFieldValueInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldValueAsyncWithHttpInfo(updateCustomFieldValueInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns></returns>
        public void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
             UpdateInboundMessagesNotificationSettingsWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
             await UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject);

        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateListWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateListAsyncWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns></returns>
        public void UpdatePassword (UpdatePasswordInputObject updatePasswordInputObject)
        {
             UpdatePasswordWithHttpInfo(updatePasswordInputObject);
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePasswordWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject)
        {
            // verify the required parameter 'updatePasswordInputObject' is set
            if (updatePasswordInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordInputObject' when calling TextMagicApi->UpdatePassword");

            var localVarPath = "/api/v2/user/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePasswordInputObject != null && updatePasswordInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePasswordInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePasswordAsync (UpdatePasswordInputObject updatePasswordInputObject)
        {
             await UpdatePasswordAsyncWithHttpInfo(updatePasswordInputObject);

        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject)
        {
            // verify the required parameter 'updatePasswordInputObject' is set
            if (updatePasswordInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordInputObject' when calling TextMagicApi->UpdatePassword");

            var localVarPath = "/api/v2/user/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updatePasswordInputObject != null && updatePasswordInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePasswordInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns></returns>
        public void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
             UpdateSenderSettingWithHttpInfo(updateSenderSettingInputObject);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
             await UpdateSenderSettingAsyncWithHttpInfo(updateSenderSettingInputObject);

        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateSurvey (UpdateSurveyInputObject updateSurveyInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateSurveyWithHttpInfo(updateSurveyInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateSurveyWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id)
        {
            // verify the required parameter 'updateSurveyInputObject' is set
            if (updateSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyInputObject' when calling TextMagicApi->UpdateSurvey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSurveyInputObject != null && updateSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyAsync (UpdateSurveyInputObject updateSurveyInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateSurveyAsyncWithHttpInfo(updateSurveyInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyAsyncWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id)
        {
            // verify the required parameter 'updateSurveyInputObject' is set
            if (updateSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyInputObject' when calling TextMagicApi->UpdateSurvey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSurveyInputObject != null && updateSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateSurveyNode (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateSurveyNodeWithHttpInfo(updateSurveyNodeInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateSurveyNodeWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id)
        {
            // verify the required parameter 'updateSurveyNodeInputObject' is set
            if (updateSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyNodeInputObject' when calling TextMagicApi->UpdateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSurveyNodeInputObject != null && updateSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyNodeAsync (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateSurveyNodeAsyncWithHttpInfo(updateSurveyNodeInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyNodeAsyncWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id)
        {
            // verify the required parameter 'updateSurveyNodeInputObject' is set
            if (updateSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyNodeInputObject' when calling TextMagicApi->UpdateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateSurveyNodeInputObject != null && updateSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateTemplateWithHttpInfo(updateTemplateInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(updateTemplateInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns></returns>
        public void UploadAvatar (System.IO.Stream image)
        {
             UploadAvatarWithHttpInfo(image);
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image)
        {
             await UploadAvatarAsyncWithHttpInfo(image);

        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadContactAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadContactAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadListAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadListAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        public UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = UploadMessageAttachmentWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        public ApiResponse< UploadMessageAttachmentResponse > UploadMessageAttachmentWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = await UploadMessageAttachmentAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

    }
}
