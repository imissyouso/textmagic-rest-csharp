/* 
 * TextMagic API Documentation
 *
 * # Overview ## Introduction <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TextMagicClient.Client;
using TextMagicClient.Model;

namespace TextMagicClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextMagicApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CancelSurvey (int? id);

        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CancelSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void CheckPhoneVerificationCode (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CheckPhoneVerificationCodeWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CloseReadChats ();

        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseReadChatsWithHttpInfo ();
        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CloseSubaccount (int? id);

        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateList (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateListWithHttpInfo (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void CreatePushToken (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePushTokenWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateSurvey (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateSurveyWithHttpInfo (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateSurveyNode (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateSurveyNodeWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllContacts ();

        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllContactsWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAllOutboundMessages ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ();
        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void DeleteAvatar ();

        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAvatarWithHttpInfo ();
        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContact (int? id);

        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactAvatar (int? id);

        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactNote (int? id);

        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteCustomField (int? id);

        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteDedicatedNumber (int? id);

        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteInboundMessage (int? id);

        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteList (int? id);

        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteListAvatar (int? id);

        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteMessageSession (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteOutboundMessage (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        void DeletePushToken (string type, int? deviceId);

        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePushTokenWithHttpInfo (string type, int? deviceId);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteScheduledMessage (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSenderId (int? id);

        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSurvey (int? id);

        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteSurveyNode (int? id);

        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSurveyNodeWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteTemplate (int? id);

        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>DoAuthResponse</returns>
        DoAuthResponse DoAuth (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of DoAuthResponse</returns>
        ApiResponse<DoAuthResponse> DoAuthWithHttpInfo (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        ApiResponse<DoCarrierLookupResponse> DoCarrierLookupWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>DoEmailLookupResponse</returns>
        DoEmailLookupResponse DoEmailLookup (string email);

        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        ApiResponse<DoEmailLookupResponse> DoEmailLookupWithHttpInfo (string email);
        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse DuplicateSurvey (int? id);

        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> DuplicateSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsResponse</returns>
        GetAllBulkSessionsResponse GetAllBulkSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsResponse</returns>
        ApiResponse<GetAllBulkSessionsResponse> GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>GetAllChatsResponse</returns>
        GetAllChatsResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsResponse</returns>
        ApiResponse<GetAllChatsResponse> GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesResponse</returns>
        GetAllInboundMessagesResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesResponse</returns>
        ApiResponse<GetAllInboundMessagesResponse> GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsResponse</returns>
        GetAllMessageSessionsResponse GetAllMessageSessions (int? page = null, int? limit = null);

        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsResponse</returns>
        ApiResponse<GetAllMessageSessionsResponse> GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>GetAllOutboundMessagesResponse</returns>
        GetAllOutboundMessagesResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesResponse</returns>
        ApiResponse<GetAllOutboundMessagesResponse> GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesResponse</returns>
        GetAllScheduledMessagesResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesResponse</returns>
        ApiResponse<GetAllScheduledMessagesResponse> GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>GetAllTemplatesResponse</returns>
        GetAllTemplatesResponse GetAllTemplates (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesResponse</returns>
        ApiResponse<GetAllTemplatesResponse> GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        ApiResponse<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null);

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        ApiResponse<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        ApiResponse<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        ApiResponse<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetBlockedContactsResponse</returns>
        GetBlockedContactsResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsResponse</returns>
        ApiResponse<GetBlockedContactsResponse> GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        BulkSession GetBulkSession (int? id);

        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        ApiResponse<BulkSession> GetBulkSessionWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        GetCallbackSettingsResponse GetCallbackSettings ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        ApiResponse<GetCallbackSettingsResponse> GetCallbackSettingsWithHttpInfo ();
        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GetCallsPrices ();

        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GetCallsPricesWithHttpInfo ();
        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        Chat GetChat (int? id);

        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Chat</returns>
        Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        ApiResponse<Chat> GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>GetChatMessagesResponse</returns>
        GetChatMessagesResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesResponse</returns>
        ApiResponse<GetChatMessagesResponse> GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Contact</returns>
        Contact GetContact (int? id);

        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        Contact GetContactByPhone (string phone);

        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactByPhoneWithHttpInfo (string phone);
        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Contact</returns>
        Contact GetContactIfBlocked (string phone);

        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>ApiResponse of Contact</returns>
        ApiResponse<Contact> GetContactIfBlockedWithHttpInfo (string phone);
        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id);

        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        ApiResponse<GetContactImportSessionProgressResponse> GetContactImportSessionProgressWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        ContactNote GetContactNote (int? id);

        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        ApiResponse<ContactNote> GetContactNoteWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetContactNotesResponse</returns>
        GetContactNotesResponse GetContactNotes (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesResponse</returns>
        ApiResponse<GetContactNotesResponse> GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsResponse</returns>
        GetContactsResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsResponse</returns>
        ApiResponse<GetContactsResponse> GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>List&lt;GetContactsAutocompleteResponse&gt;</returns>
        List<GetContactsAutocompleteResponse> GetContactsAutocomplete (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;GetContactsAutocompleteResponse&gt;</returns>
        ApiResponse<List<GetContactsAutocompleteResponse>> GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsByListIdResponse</returns>
        GetContactsByListIdResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdResponse</returns>
        ApiResponse<GetContactsByListIdResponse> GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Country&gt;</returns>
        List<Country> GetCountries ();

        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        ApiResponse<List<Country>> GetCountriesWithHttpInfo ();
        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        User GetCurrentUser ();

        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        UserCustomField GetCustomField (int? id);

        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        ApiResponse<UserCustomField> GetCustomFieldWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetCustomFieldsResponse</returns>
        GetCustomFieldsResponse GetCustomFields (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsResponse</returns>
        ApiResponse<GetCustomFieldsResponse> GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        UsersInbound GetDedicatedNumber (int? id);

        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        ApiResponse<UsersInbound> GetDedicatedNumberWithHttpInfo (int? id);
        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetDisallowedRules ();

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetDisallowedRulesWithHttpInfo ();
        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>GetFavouritesResponse</returns>
        GetFavouritesResponse GetFavourites (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>ApiResponse of GetFavouritesResponse</returns>
        ApiResponse<GetFavouritesResponse> GetFavouritesWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetForwardedCallsResponse</returns>
        GetForwardedCallsResponse GetForwardedCalls (int? page = null, int? limit = null);

        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetForwardedCallsResponse</returns>
        ApiResponse<GetForwardedCallsResponse> GetForwardedCallsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageIn</returns>
        MessageIn GetInboundMessage (int? id);

        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageIn</returns>
        ApiResponse<MessageIn> GetInboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        ApiResponse<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsWithHttpInfo ();
        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetInvoicesResponse</returns>
        GetInvoicesResponse GetInvoices (int? page = null, int? limit = null);

        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesResponse</returns>
        ApiResponse<GetInvoicesResponse> GetInvoicesWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Group</returns>
        Group GetList (int? id);

        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Group</returns>
        ApiResponse<Group> GetListWithHttpInfo (int? id);
        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        GetListContactsIdsResponse GetListContactsIds (int? id);

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        ApiResponse<GetListContactsIdsResponse> GetListContactsIdsWithHttpInfo (int? id);
        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetListsOfContactResponse</returns>
        GetListsOfContactResponse GetListsOfContact (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactResponse</returns>
        ApiResponse<GetListsOfContactResponse> GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        ApiResponse<GetMessagePreviewResponse> GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        ApiResponse<GetMessagePriceResponse> GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagePricesResponse</returns>
        GetMessagePricesResponse GetMessagePrices ();

        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagePricesResponse</returns>
        ApiResponse<GetMessagePricesResponse> GetMessagePricesWithHttpInfo ();
        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageSession</returns>
        MessageSession GetMessageSession (int? id);

        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageSession</returns>
        ApiResponse<MessageSession> GetMessageSessionWithHttpInfo (int? id);
        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        ApiResponse<GetMessageSessionStatResponse> GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdResponse</returns>
        GetMessagesBySessionIdResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdResponse</returns>
        ApiResponse<GetMessagesBySessionIdResponse> GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        GetMessagingCountersResponse GetMessagingCounters ();

        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        ApiResponse<GetMessagingCountersResponse> GetMessagingCountersWithHttpInfo ();
        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, string end = null);

        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        ApiResponse<GetMessagingStatResponse> GetMessagingStatWithHttpInfo (string by = null, int? start = null, string end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        MessageOut GetOutboundMessage (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        ApiResponse<MessageOut> GetOutboundMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryResponse</returns>
        GetOutboundMessagesHistoryResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryResponse</returns>
        ApiResponse<GetOutboundMessagesHistoryResponse> GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPushTokensResponse</returns>
        GetPushTokensResponse GetPushTokens ();

        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPushTokensResponse</returns>
        ApiResponse<GetPushTokensResponse> GetPushTokensWithHttpInfo ();
        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        MessagesIcs GetScheduledMessage (int? id);

        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        ApiResponse<MessagesIcs> GetScheduledMessageWithHttpInfo (int? id);
        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        SenderId GetSenderId (int? id);

        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        ApiResponse<SenderId> GetSenderIdWithHttpInfo (int? id);
        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSenderIdsResponse</returns>
        GetSenderIdsResponse GetSenderIds (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsResponse</returns>
        ApiResponse<GetSenderIdsResponse> GetSenderIdsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        GetSenderSettingsResponse GetSenderSettings (string country = null);

        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        ApiResponse<GetSenderSettingsResponse> GetSenderSettingsWithHttpInfo (string country = null);
        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetSpendingStatResponse</returns>
        GetSpendingStatResponse GetSpendingStat (int? page = null, int? limit = null, int? start = null, int? end = null);

        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatResponse</returns>
        ApiResponse<GetSpendingStatResponse> GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null);
        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetStateResponse</returns>
        GetStateResponse GetState ();

        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetStateResponse</returns>
        ApiResponse<GetStateResponse> GetStateWithHttpInfo ();
        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        User GetSubaccount (int? id);

        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountWithHttpInfo (int? id);
        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>User</returns>
        User GetSubaccounts (int? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetSubaccountsWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        ApiResponse<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Survey</returns>
        Survey GetSurvey (int? id);

        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Survey</returns>
        ApiResponse<Survey> GetSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SurveyNode</returns>
        SurveyNode GetSurveyNode (int? id);

        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SurveyNode</returns>
        ApiResponse<SurveyNode> GetSurveyNodeWithHttpInfo (int? id);
        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSurveyNodesResponse</returns>
        GetSurveyNodesResponse GetSurveyNodes (int? id);

        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSurveyNodesResponse</returns>
        ApiResponse<GetSurveyNodesResponse> GetSurveyNodesWithHttpInfo (int? id);
        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSurveysResponse</returns>
        GetSurveysResponse GetSurveys (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSurveysResponse</returns>
        ApiResponse<GetSurveysResponse> GetSurveysWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        MessageTemplate GetTemplate (int? id);

        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        ApiResponse<MessageTemplate> GetTemplateWithHttpInfo (int? id);
        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Object</returns>
        Object GetTimezones (int? full = null);

        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetTimezonesWithHttpInfo (int? full = null);
        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ();

        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        ApiResponse<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalWithHttpInfo ();
        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        UnsubscribedContact GetUnsubscribedContact (int? id);

        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        ApiResponse<UnsubscribedContact> GetUnsubscribedContactWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetUnsubscribersResponse</returns>
        GetUnsubscribersResponse GetUnsubscribers (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersResponse</returns>
        ApiResponse<GetUnsubscribersResponse> GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>GetUserDedicatedNumbersResponse</returns>
        GetUserDedicatedNumbersResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersResponse</returns>
        ApiResponse<GetUserDedicatedNumbersResponse> GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>GetUserListsResponse</returns>
        GetUserListsResponse GetUserLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>ApiResponse of GetUserListsResponse</returns>
        ApiResponse<GetUserListsResponse> GetUserListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetVersionsResponse</returns>
        GetVersionsResponse GetVersions ();

        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetVersionsResponse</returns>
        ApiResponse<GetVersionsResponse> GetVersionsWithHttpInfo ();
        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void MergeSurveyNodes (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MergeSurveyNodesWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        PingResponse Ping ();

        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        ApiResponse<PingResponse> PingWithHttpInfo ();
        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>User</returns>
        User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse ResetSurvey (int? id);

        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> ResetSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>SearchChatsResponse</returns>
        SearchChatsResponse SearchChats (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchChatsResponse</returns>
        ApiResponse<SearchChatsResponse> SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>SearchChatsByIdsResponse</returns>
        SearchChatsByIdsResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsResponse</returns>
        ApiResponse<SearchChatsByIdsResponse> SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentResponse</returns>
        SearchChatsByReceipentResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentResponse</returns>
        ApiResponse<SearchChatsByReceipentResponse> SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchContactsResponse</returns>
        SearchContactsResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsResponse</returns>
        ApiResponse<SearchContactsResponse> SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesResponse</returns>
        SearchInboundMessagesResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesResponse</returns>
        ApiResponse<SearchInboundMessagesResponse> SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchListsResponse</returns>
        SearchListsResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsResponse</returns>
        ApiResponse<SearchListsResponse> SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>SearchOutboundMessagesResponse</returns>
        SearchOutboundMessagesResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesResponse</returns>
        ApiResponse<SearchOutboundMessagesResponse> SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesResponse</returns>
        SearchScheduledMessagesResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesResponse</returns>
        ApiResponse<SearchScheduledMessagesResponse> SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>SearchTemplatesResponse</returns>
        SearchTemplatesResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesResponse</returns>
        ApiResponse<SearchTemplatesResponse> SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SendEmailVerificationCode ();

        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendEmailVerificationCodeWithHttpInfo ();
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>SendMessageResponse</returns>
        SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        ApiResponse<SendMessageResponse> SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void SendPhoneVerificationCode ();

        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendPhoneVerificationCodeWithHttpInfo ();
        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse StartSurvey (int? id);

        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> StartSurveyWithHttpInfo (int? id);
        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UnblockContact (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>UpdateCurrentUserResponse</returns>
        UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        ApiResponse<UpdateCurrentUserResponse> UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdatePassword (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePasswordWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateSurvey (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateSurveyWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateSurveyNode (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateSurveyNodeWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns></returns>
        void UploadAvatar (System.IO.Stream image);

        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        ApiResponse<ResourceLinkResponse> UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        ApiResponse<UploadMessageAttachmentResponse> UploadMessageAttachmentWithHttpInfo (System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id);

        /// <summary>
        /// Assign contacts to the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id);
        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CancelSurveyAsync (int? id);

        /// <summary>
        /// Cancel a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CancelSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CheckPhoneVerificationCodeAsync (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Check user phone verification code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeAsyncWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);

        /// <summary>
        /// Reset list members to the specified contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id);
        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Close chats by chat ids or close all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseReadChatsAsync ();

        /// <summary>
        /// Close all chats that have no unread messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ();
        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseSubaccountAsync (int? id);

        /// <summary>
        /// Close subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new contact from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new custom field from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new list from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePushTokenAsync (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Add or update a device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePushTokenAsyncWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyAsync (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new survey from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyAsyncWithHttpInfo (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyNodeAsync (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new node from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyNodeAsyncWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Create a new template from the submitted data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllContactsAsync ();

        /// <summary>
        /// Delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ();
        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ();

        /// <summary>
        /// Delete all messages
        /// </summary>
        /// <remarks>
        /// Delete all messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ();
        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAvatarAsync ();

        /// <summary>
        /// Delete an avatar for the current user.\\
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ();
        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages from chat by given messages ID(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync (int? id);

        /// <summary>
        /// Delete a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNoteAsync (int? id);

        /// <summary>
        /// Delete a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id);

        /// <summary>
        /// Unassign contacts from the specified list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id);
        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id);

        /// <summary>
        /// Delete a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id);

        /// <summary>
        /// Cancel dedicated number subscription.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id);

        /// <summary>
        /// Delete the incoming message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAsync (int? id);

        /// <summary>
        /// Delete a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAvatarAsync (int? id);

        /// <summary>
        /// Delete an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete list by given ID(s) or delete all lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id);

        /// <summary>
        /// Delete message
        /// </summary>
        /// <remarks>
        /// Delete a single message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete messages by IDs
        /// </summary>
        /// <remarks>
        /// Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePushTokenAsync (string type, int? deviceId);

        /// <summary>
        /// Delete a push notification device token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTokenAsyncWithHttpInfo (string type, int? deviceId);
        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id);

        /// <summary>
        /// Delete a message session, together with all nested messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSenderIdAsync (int? id);

        /// <summary>
        /// Delete a Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSurveyAsync (int? id);

        /// <summary>
        /// Delete a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSurveyNodeAsync (int? id);

        /// <summary>
        /// Delete a node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyNodeAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync (int? id);

        /// <summary>
        /// Delete a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Delete template by given ID(s) or delete all templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of DoAuthResponse</returns>
        System.Threading.Tasks.Task<DoAuthResponse> DoAuthAsync (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Authenticate user by given username and password.
        /// </summary>
        /// <remarks>
        /// Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (DoAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoAuthResponse>> DoAuthAsyncWithHttpInfo (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null);

        /// <summary>
        /// Carrier Lookup
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null);
        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email);

        /// <summary>
        /// Validate Email address using Email Lookup tool
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email);
        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> DuplicateSurveyAsync (int? id);

        /// <summary>
        /// Duplicate a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> DuplicateSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsResponse</returns>
        System.Threading.Tasks.Task<GetAllBulkSessionsResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all bulk sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsResponse</returns>
        System.Threading.Tasks.Task<GetAllChatsResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);

        /// <summary>
        /// Get all user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllChatsResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null);
        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesResponse</returns>
        System.Threading.Tasks.Task<GetAllInboundMessagesResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all inbox messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsResponse</returns>
        System.Threading.Tasks.Task<GetAllMessageSessionsResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all message sending sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesResponse</returns>
        System.Threading.Tasks.Task<GetAllOutboundMessagesResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null);

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <remarks>
        /// Get all user oubound messages.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null);
        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesResponse</returns>
        System.Threading.Tasks.Task<GetAllScheduledMessagesResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all scheduled messages.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of GetAllTemplatesResponse</returns>
        System.Threading.Tasks.Task<GetAllTemplatesResponse> GetAllTemplatesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user templates.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null);

        /// <summary>
        /// Find available dedicated numbers to buy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null);
        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null);

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ();

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ();

        /// <summary>
        /// Get balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsResponse</returns>
        System.Threading.Tasks.Task<GetBlockedContactsResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get blocked contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id);

        /// <summary>
        /// Get bulk message session status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ();

        /// <summary>
        /// Fetch callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GetCallsPricesAsync ();

        /// <summary>
        /// Check pricing for a inbound/outbound call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetCallsPricesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatAsync (int? id);

        /// <summary>
        /// Get a single chat.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null);

        /// <summary>
        /// Find chats by phone.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null);
        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesResponse</returns>
        System.Threading.Tasks.Task<GetChatMessagesResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);

        /// <summary>
        /// Fetch messages from chat with specified chat id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChatMessagesResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null);
        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactAsync (int? id);

        /// <summary>
        /// Get a single contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone);

        /// <summary>
        /// Get a single contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of Contact</returns>
        System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone);

        /// <summary>
        /// Check is that phone number blocked
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone);
        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id);

        /// <summary>
        /// Get contact import session progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id);

        /// <summary>
        /// Get a single contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesResponse</returns>
        System.Threading.Tasks.Task<GetContactNotesResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Fetch notes assigned to the given contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactNotesResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsResponse</returns>
        System.Threading.Tasks.Task<GetContactsResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get all user contacts.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of List&lt;GetContactsAutocompleteResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null);

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContactsAutocompleteResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetContactsAutocompleteResponse>>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null);
        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdResponse</returns>
        System.Threading.Tasks.Task<GetContactsByListIdResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Fetch user contacts by given group id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Country&gt;</returns>
        System.Threading.Tasks.Task<List<Country>> GetCountriesAsync ();

        /// <summary>
        /// Return list of countries.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetCountriesAsyncWithHttpInfo ();
        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync ();

        /// <summary>
        /// Get current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id);

        /// <summary>
        /// Get a single custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsResponse</returns>
        System.Threading.Tasks.Task<GetCustomFieldsResponse> GetCustomFieldsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact custom fields.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id);

        /// <summary>
        /// Get a single dedicated number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetDisallowedRulesAsync ();

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDisallowedRulesAsyncWithHttpInfo ();
        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of GetFavouritesResponse</returns>
        System.Threading.Tasks.Task<GetFavouritesResponse> GetFavouritesAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Get favorite contacts and lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of ApiResponse (GetFavouritesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFavouritesResponse>> GetFavouritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetForwardedCallsResponse</returns>
        System.Threading.Tasks.Task<GetForwardedCallsResponse> GetForwardedCallsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all forwarded calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetForwardedCallsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetForwardedCallsResponse>> GetForwardedCallsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageIn</returns>
        System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id);

        /// <summary>
        /// Get a single inbox message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ();

        /// <summary>
        /// Get inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesResponse</returns>
        System.Threading.Tasks.Task<GetInvoicesResponse> GetInvoicesAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Return account invoices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInvoicesResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Group</returns>
        System.Threading.Tasks.Task<Group> GetListAsync (int? id);

        /// <summary>
        /// Get a single list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        System.Threading.Tasks.Task<ApiResponse<Group>> GetListAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id);

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactResponse</returns>
        System.Threading.Tasks.Task<GetListsOfContactResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null);

        /// <summary>
        /// Return lists which contact belongs to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListsOfContactResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null);
        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Preview message
        /// </summary>
        /// <remarks>
        /// Get messages preview (with tags merged) up to 100 messages per session.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);

        /// <summary>
        /// Check price
        /// </summary>
        /// <remarks>
        /// Check pricing for a new outbound message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null);
        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagePricesResponse</returns>
        System.Threading.Tasks.Task<GetMessagePricesResponse> GetMessagePricesAsync ();

        /// <summary>
        /// Get pricing
        /// </summary>
        /// <remarks>
        /// Get message prices for all countries.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagePricesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagePricesResponse>> GetMessagePricesAsyncWithHttpInfo ();
        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageSession</returns>
        System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id);

        /// <summary>
        /// Get a message session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null);

        /// <summary>
        /// Get sending session statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null);
        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdResponse</returns>
        System.Threading.Tasks.Task<GetMessagesBySessionIdResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);

        /// <summary>
        /// Fetch messages by given session id.
        /// </summary>
        /// <remarks>
        /// A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null);
        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ();

        /// <summary>
        /// Return counters for messaging data views.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ();
        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, string end = null);

        /// <summary>
        /// Return messaging statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, string end = null);
        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id);

        /// <summary>
        /// Get a single message
        /// </summary>
        /// <remarks>
        /// Get a single outgoing message.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryResponse</returns>
        System.Threading.Tasks.Task<GetOutboundMessagesHistoryResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Get history
        /// </summary>
        /// <remarks>
        /// Get outbound messages history.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPushTokensResponse</returns>
        System.Threading.Tasks.Task<GetPushTokensResponse> GetPushTokensAsync ();

        /// <summary>
        /// Get all device tokens assigned to the current account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPushTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPushTokensResponse>> GetPushTokensAsyncWithHttpInfo ();
        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id);

        /// <summary>
        /// Get message schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id);

        /// <summary>
        /// Get a single Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsResponse</returns>
        System.Threading.Tasks.Task<GetSenderIdsResponse> GetSenderIdsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all sender IDs of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderIdsResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null);

        /// <summary>
        /// Get current user sender settings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null);
        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetSpendingStatResponse</returns>
        System.Threading.Tasks.Task<GetSpendingStatResponse> GetSpendingStatAsync (int? page = null, int? limit = null, int? start = null, int? end = null);

        /// <summary>
        /// Return account spending statistics.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSpendingStatResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null);
        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetStateResponse</returns>
        System.Threading.Tasks.Task<GetStateResponse> GetStateAsync ();

        /// <summary>
        /// Get current entities state
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetStateResponse>> GetStateAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id);

        /// <summary>
        /// Get a single subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all subaccounts of current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name.
        /// </summary>
        /// <remarks>
        /// When more than one token related to app name, last key will be returned.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Survey</returns>
        System.Threading.Tasks.Task<Survey> GetSurveyAsync (int? id);

        /// <summary>
        /// Get a survey by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Survey)</returns>
        System.Threading.Tasks.Task<ApiResponse<Survey>> GetSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SurveyNode</returns>
        System.Threading.Tasks.Task<SurveyNode> GetSurveyNodeAsync (int? id);

        /// <summary>
        /// Get a node by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SurveyNode)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveyNode>> GetSurveyNodeAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSurveyNodesResponse</returns>
        System.Threading.Tasks.Task<GetSurveyNodesResponse> GetSurveyNodesAsync (int? id);

        /// <summary>
        /// Fetch nodes by given survey id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSurveyNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSurveyNodesResponse>> GetSurveyNodesAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSurveysResponse</returns>
        System.Threading.Tasks.Task<GetSurveysResponse> GetSurveysAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all user surveys.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSurveysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSurveysResponse>> GetSurveysAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id);

        /// <summary>
        /// Get a single template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetTimezonesAsync (int? full = null);

        /// <summary>
        /// Return all available timezone IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetTimezonesAsyncWithHttpInfo (int? full = null);
        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ();

        /// <summary>
        /// Get total amount of unread messages in the current user chats.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ();
        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id);

        /// <summary>
        /// Get a single unsubscribed contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersResponse</returns>
        System.Threading.Tasks.Task<GetUnsubscribersResponse> GetUnsubscribersAsync (int? page = null, int? limit = null);

        /// <summary>
        /// Get all contact have unsubscribed from your communication.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null);
        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersResponse</returns>
        System.Threading.Tasks.Task<GetUserDedicatedNumbersResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null);

        /// <summary>
        /// Get user&#39;s dedicated numbers.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null);
        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of GetUserListsResponse</returns>
        System.Threading.Tasks.Task<GetUserListsResponse> GetUserListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);

        /// <summary>
        /// Get all user lists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetUserListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserListsResponse>> GetUserListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null);
        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetVersionsResponse</returns>
        System.Threading.Tasks.Task<GetVersionsResponse> GetVersionsAsync ();

        /// <summary>
        /// Get minimal valid apps versions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetVersionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVersionsResponse>> GetVersionsAsyncWithHttpInfo ();
        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Invite new subaccount.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MergeSurveyNodesAsync (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Merge two question nodes.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MergeSurveyNodesAsyncWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Set mute mode.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Mute several chats by chat ids or mute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        System.Threading.Tasks.Task<PingResponse> PingAsync ();

        /// <summary>
        /// Just does a pong.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ();
        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Request a new REST API token for subaccount.
        /// </summary>
        /// <remarks>
        /// Returning user object, key and app name.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Request for a new Sender ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> ResetSurveyAsync (int? id);

        /// <summary>
        /// Reset a survey flow.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ResetSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of SearchChatsResponse</returns>
        System.Threading.Tasks.Task<SearchChatsResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null);

        /// <summary>
        /// Find chats by inbound or outbound messages text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null);
        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of SearchChatsByIdsResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByIdsResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null);

        /// <summary>
        /// Find chats by IDs.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null);
        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentResponse</returns>
        System.Threading.Tasks.Task<SearchChatsByReceipentResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null);

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null);
        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchContactsResponse</returns>
        System.Threading.Tasks.Task<SearchContactsResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find user contacts by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchContactsResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesResponse</returns>
        System.Threading.Tasks.Task<SearchInboundMessagesResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);

        /// <summary>
        /// Find inbound messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null);
        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchListsResponse</returns>
        System.Threading.Tasks.Task<SearchListsResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find contact lists by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchListsResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of SearchOutboundMessagesResponse</returns>
        System.Threading.Tasks.Task<SearchOutboundMessagesResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);

        /// <summary>
        /// Find messages
        /// </summary>
        /// <remarks>
        /// Find outbound messages by given parameters.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null);
        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesResponse</returns>
        System.Threading.Tasks.Task<SearchScheduledMessagesResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);

        /// <summary>
        /// Find scheduled messages by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null);
        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of SearchTemplatesResponse</returns>
        System.Threading.Tasks.Task<SearchTemplatesResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);

        /// <summary>
        /// Find user templates by given parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchTemplatesResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null);
        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendEmailVerificationCodeAsync ();

        /// <summary>
        /// Send user email verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailVerificationCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of SendMessageResponse</returns>
        System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// The main entrypoint to send messages. See examples above for the reference.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendPhoneVerificationCodeAsync ();

        /// <summary>
        /// Send user phone verification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendPhoneVerificationCodeAsyncWithHttpInfo ();
        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Set status of the chat given by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> StartSurveyAsync (int? id);

        /// <summary>
        /// Start a survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> StartSurveyAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unblock contact by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Unsubscribe contact from your communication by phone number.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update balance notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update callback URL settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update chat desktop notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing contact note.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update current user info.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing custom field.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update contact&#39;s custom field value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update inbound messages notification settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null);

        /// <summary>
        /// Update existing list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null);
        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePasswordAsync (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Change user password.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Change sender settings for specified country.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyAsync (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing survey.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyAsyncWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyNodeAsync (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing node.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyNodeAsyncWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null);

        /// <summary>
        /// Update existing template.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null);
        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image);

        /// <summary>
        /// Add an avatar for the current user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image);
        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the contact.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id);

        /// <summary>
        /// Add an avatar for the list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id);
        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file);

        /// <summary>
        /// Upload message attachment
        /// </summary>
        /// <remarks>
        /// Upload a new file to insert it as a link.
        /// </remarks>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TextMagicApi : ITextMagicApi
    {
        private TextMagicClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextMagicApi(String basePath)
        {
            this.Configuration = new TextMagicClient.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextMagicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextMagicApi(TextMagicClient.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TextMagicClient.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TextMagicClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TextMagicClient.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TextMagicClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse AssignContactsToList (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = AssignContactsToListWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > AssignContactsToListWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> AssignContactsToListAsync (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await AssignContactsToListAsyncWithHttpInfo(assignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign contacts to the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> AssignContactsToListAsyncWithHttpInfo (AssignContactsToListInputObject assignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'assignContactsToListInputObject' is set
            if (assignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'assignContactsToListInputObject' when calling TextMagicApi->AssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->AssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (assignContactsToListInputObject != null && assignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(assignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = assignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse BlockContact (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = BlockContactWithHttpInfo(blockContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > BlockContactWithHttpInfo (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> BlockContactAsync (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await BlockContactAsyncWithHttpInfo(blockContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Block contact from inbound and outbound communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="blockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> BlockContactAsyncWithHttpInfo (BlockContactInputObject blockContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'blockContactInputObject' is set
            if (blockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'blockContactInputObject' when calling TextMagicApi->BlockContact");

            var localVarPath = "/api/v2/contacts/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (blockContactInputObject != null && blockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(blockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void BuyDedicatedNumber (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null)
        {
             BuyDedicatedNumberWithHttpInfo(buyDedicatedNumberInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BuyDedicatedNumberWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BuyDedicatedNumberAsync (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null)
        {
             await BuyDedicatedNumberAsyncWithHttpInfo(buyDedicatedNumberInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Buy a dedicated number and assign it to the specified account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyDedicatedNumberInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BuyDedicatedNumberAsyncWithHttpInfo (BuyDedicatedNumberInputObject buyDedicatedNumberInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'buyDedicatedNumberInputObject' is set
            if (buyDedicatedNumberInputObject == null)
                throw new ApiException(400, "Missing required parameter 'buyDedicatedNumberInputObject' when calling TextMagicApi->BuyDedicatedNumber");

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (buyDedicatedNumberInputObject != null && buyDedicatedNumberInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(buyDedicatedNumberInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = buyDedicatedNumberInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuyDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CancelSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CancelSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CancelSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CancelSurvey");

            var localVarPath = "/api/v2/surveys/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CancelSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CancelSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CancelSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CancelSurvey");

            var localVarPath = "/api/v2/surveys/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void CheckPhoneVerificationCode (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null)
        {
             CheckPhoneVerificationCodeWithHttpInfo(checkPhoneVerificationCodeInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CheckPhoneVerificationCodeWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'checkPhoneVerificationCodeInputObject' is set
            if (checkPhoneVerificationCodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeInputObject' when calling TextMagicApi->CheckPhoneVerificationCode");

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (checkPhoneVerificationCodeInputObject != null && checkPhoneVerificationCodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CheckPhoneVerificationCodeAsync (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null)
        {
             await CheckPhoneVerificationCodeAsyncWithHttpInfo(checkPhoneVerificationCodeInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Check user phone verification code 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkPhoneVerificationCodeInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CheckPhoneVerificationCodeAsyncWithHttpInfo (CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'checkPhoneVerificationCodeInputObject' is set
            if (checkPhoneVerificationCodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'checkPhoneVerificationCodeInputObject' when calling TextMagicApi->CheckPhoneVerificationCode");

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (checkPhoneVerificationCodeInputObject != null && checkPhoneVerificationCodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(checkPhoneVerificationCodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkPhoneVerificationCodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ClearAndAssignContactsToList (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ClearAndAssignContactsToListWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ClearAndAssignContactsToListWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ClearAndAssignContactsToListAsync (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ClearAndAssignContactsToListAsyncWithHttpInfo(clearAndAssignContactsToListInputObject, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset list members to the specified contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clearAndAssignContactsToListInputObject">Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ClearAndAssignContactsToListAsyncWithHttpInfo (ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject, int? id)
        {
            // verify the required parameter 'clearAndAssignContactsToListInputObject' is set
            if (clearAndAssignContactsToListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'clearAndAssignContactsToListInputObject' when calling TextMagicApi->ClearAndAssignContactsToList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ClearAndAssignContactsToList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearAndAssignContactsToListInputObject != null && clearAndAssignContactsToListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clearAndAssignContactsToListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearAndAssignContactsToListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ClearAndAssignContactsToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void CloseChatsBulk (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             CloseChatsBulkWithHttpInfo(closeChatsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseChatsBulkWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseChatsBulkAsync (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await CloseChatsBulkAsyncWithHttpInfo(closeChatsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Close chats by chat ids or close all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseChatsBulkAsyncWithHttpInfo (CloseChatsBulkInputObject closeChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'closeChatsBulkInputObject' is set
            if (closeChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'closeChatsBulkInputObject' when calling TextMagicApi->CloseChatsBulk");

            var localVarPath = "/api/v2/chats/close/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (closeChatsBulkInputObject != null && closeChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(closeChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = closeChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CloseReadChats ()
        {
             CloseReadChatsWithHttpInfo();
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseReadChatsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseReadChatsAsync ()
        {
             await CloseReadChatsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Close all chats that have no unread messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseReadChatsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/close/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseReadChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CloseSubaccount (int? id)
        {
             CloseSubaccountWithHttpInfo(id);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseSubaccountAsync (int? id)
        {
             await CloseSubaccountAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Close subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CloseSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContact (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactWithHttpInfo(createContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactWithHttpInfo (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactAsync (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactAsyncWithHttpInfo(createContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactAsyncWithHttpInfo (CreateContactInputObject createContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createContactInputObject' is set
            if (createContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactInputObject' when calling TextMagicApi->CreateContact");

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createContactInputObject != null && createContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateContactNote (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateContactNoteWithHttpInfo(createContactNoteInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateContactNoteWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateContactNoteAsync (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateContactNoteAsyncWithHttpInfo(createContactNoteInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateContactNoteAsyncWithHttpInfo (CreateContactNoteInputObject createContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createContactNoteInputObject' is set
            if (createContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createContactNoteInputObject' when calling TextMagicApi->CreateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateContactNote");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createContactNoteInputObject != null && createContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateCustomField (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateCustomFieldWithHttpInfo(createCustomFieldInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateCustomFieldWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateCustomFieldAsync (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateCustomFieldAsyncWithHttpInfo(createCustomFieldInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new custom field from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateCustomFieldAsyncWithHttpInfo (CreateCustomFieldInputObject createCustomFieldInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createCustomFieldInputObject' is set
            if (createCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createCustomFieldInputObject' when calling TextMagicApi->CreateCustomField");

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createCustomFieldInputObject != null && createCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateList (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateListWithHttpInfo(createListInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateListWithHttpInfo (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateListAsync (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateListAsyncWithHttpInfo(createListInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new list from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateListAsyncWithHttpInfo (CreateListInputObject createListInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createListInputObject' is set
            if (createListInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createListInputObject' when calling TextMagicApi->CreateList");

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createListInputObject != null && createListInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createListInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createListInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void CreatePushToken (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null)
        {
             CreatePushTokenWithHttpInfo(createPushTokenInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePushTokenWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createPushTokenInputObject' is set
            if (createPushTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createPushTokenInputObject' when calling TextMagicApi->CreatePushToken");

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createPushTokenInputObject != null && createPushTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPushTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPushTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePushTokenAsync (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null)
        {
             await CreatePushTokenAsyncWithHttpInfo(createPushTokenInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Add or update a device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPushTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePushTokenAsyncWithHttpInfo (CreatePushTokenInputObject createPushTokenInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createPushTokenInputObject' is set
            if (createPushTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createPushTokenInputObject' when calling TextMagicApi->CreatePushToken");

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createPushTokenInputObject != null && createPushTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPushTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPushTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateSurvey (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateSurveyWithHttpInfo(createSurveyInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateSurveyWithHttpInfo (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createSurveyInputObject' is set
            if (createSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyInputObject' when calling TextMagicApi->CreateSurvey");

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createSurveyInputObject != null && createSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyAsync (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateSurveyAsyncWithHttpInfo(createSurveyInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new survey from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyAsyncWithHttpInfo (CreateSurveyInputObject createSurveyInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createSurveyInputObject' is set
            if (createSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyInputObject' when calling TextMagicApi->CreateSurvey");

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createSurveyInputObject != null && createSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateSurveyNode (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateSurveyNodeWithHttpInfo(createSurveyNodeInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateSurveyNodeWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createSurveyNodeInputObject' is set
            if (createSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyNodeInputObject' when calling TextMagicApi->CreateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateSurveyNode");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createSurveyNodeInputObject != null && createSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateSurveyNodeAsync (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateSurveyNodeAsyncWithHttpInfo(createSurveyNodeInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new node from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateSurveyNodeAsyncWithHttpInfo (CreateSurveyNodeInputObject createSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createSurveyNodeInputObject' is set
            if (createSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createSurveyNodeInputObject' when calling TextMagicApi->CreateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->CreateSurveyNode");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createSurveyNodeInputObject != null && createSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse CreateTemplate (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = CreateTemplateWithHttpInfo(createTemplateInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > CreateTemplateWithHttpInfo (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> CreateTemplateAsync (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await CreateTemplateAsyncWithHttpInfo(createTemplateInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new template from the submitted data. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTemplateInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> CreateTemplateAsyncWithHttpInfo (CreateTemplateInputObject createTemplateInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'createTemplateInputObject' is set
            if (createTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'createTemplateInputObject' when calling TextMagicApi->CreateTemplate");

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (createTemplateInputObject != null && createTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllContacts ()
        {
             DeleteAllContactsWithHttpInfo();
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllContactsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllContactsAsync ()
        {
             await DeleteAllContactsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllContactsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/contact/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAllOutboundMessages ()
        {
             DeleteAllOutboundMessagesWithHttpInfo();
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAllOutboundMessagesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllOutboundMessagesAsync ()
        {
             await DeleteAllOutboundMessagesAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete all messages Delete all messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllOutboundMessagesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/message/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void DeleteAvatar ()
        {
             DeleteAvatarWithHttpInfo();
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAvatarWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAvatarAsync ()
        {
             await DeleteAvatarAsyncWithHttpInfo();

        }

        /// <summary>
        /// Delete an avatar for the current user.\\ 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAvatarAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteChatMessages (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             DeleteChatMessagesWithHttpInfo(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatMessagesWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatMessagesAsync (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             await DeleteChatMessagesAsyncWithHttpInfo(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete messages from chat by given messages ID(s). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatMessagesBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatMessagesAsyncWithHttpInfo (DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteChatMessagesBulkInputObject' is set
            if (deleteChatMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatMessagesBulkInputObject' when calling TextMagicApi->DeleteChatMessages");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteChatMessages");

            var localVarPath = "/api/v2/chats/{id}/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteChatMessagesBulkInputObject != null && deleteChatMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteChatsBulk (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteChatsBulkWithHttpInfo(deleteChatsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChatsBulkWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChatsBulkAsync (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteChatsBulkAsyncWithHttpInfo(deleteChatsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete chats by given ID(s) or delete all chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChatsBulkAsyncWithHttpInfo (DeleteChatsBulkInputObject deleteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteChatsBulkInputObject' is set
            if (deleteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteChatsBulkInputObject' when calling TextMagicApi->DeleteChatsBulk");

            var localVarPath = "/api/v2/chats/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteChatsBulkInputObject != null && deleteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContact (int? id)
        {
             DeleteContactWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync (int? id)
        {
             await DeleteContactAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactAvatar (int? id)
        {
             DeleteContactAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAvatarAsync (int? id)
        {
             await DeleteContactAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactNote (int? id)
        {
             DeleteContactNoteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNoteAsync (int? id)
        {
             await DeleteContactNoteAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteContactNotesBulk (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteContactNotesBulkWithHttpInfo(id, deleteContactNotesBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactNotesBulkWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactNotesBulkAsync (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteContactNotesBulkAsyncWithHttpInfo(id, deleteContactNotesBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete contact note by given ID(s) or delete all contact notes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="deleteContactNotesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactNotesBulkAsyncWithHttpInfo (int? id, DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactNotesBulk");
            // verify the required parameter 'deleteContactNotesBulkInputObject' is set
            if (deleteContactNotesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactNotesBulkInputObject' when calling TextMagicApi->DeleteContactNotesBulk");

            var localVarPath = "/api/v2/contacts/{id}/notes/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteContactNotesBulkInputObject != null && deleteContactNotesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactNotesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactNotesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactNotesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteContactsByIds (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteContactsByIdsWithHttpInfo(deleteContactsByIdsInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsByIdsWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsByIdsAsync (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteContactsByIdsAsyncWithHttpInfo(deleteContactsByIdsInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete contact by given ID(s) or delete all contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContactsByIdsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsByIdsAsyncWithHttpInfo (DeleteContactsByIdsInputObject deleteContactsByIdsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteContactsByIdsInputObject' is set
            if (deleteContactsByIdsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContactsByIdsInputObject' when calling TextMagicApi->DeleteContactsByIds");

            var localVarPath = "/api/v2/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteContactsByIdsInputObject != null && deleteContactsByIdsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContactsByIdsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContactsByIdsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteContactsFromList (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             DeleteContactsFromListWithHttpInfo(deleteContacsFromListObject, id);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteContactsFromListWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactsFromListAsync (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
             await DeleteContactsFromListAsyncWithHttpInfo(deleteContacsFromListObject, id);

        }

        /// <summary>
        /// Unassign contacts from the specified list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteContacsFromListObject">Contact ID(s), separated by comma</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactsFromListAsyncWithHttpInfo (DeleteContacsFromListObject deleteContacsFromListObject, int? id)
        {
            // verify the required parameter 'deleteContacsFromListObject' is set
            if (deleteContacsFromListObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteContacsFromListObject' when calling TextMagicApi->DeleteContactsFromList");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteContactsFromList");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteContacsFromListObject != null && deleteContacsFromListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteContacsFromListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteContacsFromListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteCustomField (int? id)
        {
             DeleteCustomFieldWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomFieldAsync (int? id)
        {
             await DeleteCustomFieldAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteDedicatedNumber (int? id)
        {
             DeleteDedicatedNumberWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDedicatedNumberAsync (int? id)
        {
             await DeleteDedicatedNumberAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancel dedicated number subscription. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteInboundMessage (int? id)
        {
             DeleteInboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessageAsync (int? id)
        {
             await DeleteInboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete the incoming message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteInboundMessagesBulk (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteInboundMessagesBulkWithHttpInfo(deleteInboundMessagesBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInboundMessagesBulkWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInboundMessagesBulkAsync (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteInboundMessagesBulkAsyncWithHttpInfo(deleteInboundMessagesBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete inbound messages by given ID(s) or delete all inbound messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteInboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInboundMessagesBulkAsyncWithHttpInfo (DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteInboundMessagesBulkInputObject' is set
            if (deleteInboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteInboundMessagesBulkInputObject' when calling TextMagicApi->DeleteInboundMessagesBulk");

            var localVarPath = "/api/v2/replies/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteInboundMessagesBulkInputObject != null && deleteInboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteInboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteInboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteList (int? id)
        {
             DeleteListWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAsync (int? id)
        {
             await DeleteListAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteListAvatar (int? id)
        {
             DeleteListAvatarWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListAvatarWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAvatarAsync (int? id)
        {
             await DeleteListAvatarAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAvatarAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteListContactsBulk (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             DeleteListContactsBulkWithHttpInfo(deleteListContactsBulkInputObject, id, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListContactsBulkWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListContactsBulkAsync (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             await DeleteListContactsBulkAsyncWithHttpInfo(deleteListContactsBulkInputObject, id, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete contact from list by given ID(s) or all contacts from list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListContactsBulkInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListContactsBulkAsyncWithHttpInfo (DeleteListContactsBulkInputObject deleteListContactsBulkInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteListContactsBulkInputObject' is set
            if (deleteListContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListContactsBulkInputObject' when calling TextMagicApi->DeleteListContactsBulk");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteListContactsBulk");

            var localVarPath = "/api/v2/lists/{id}/contacts/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteListContactsBulkInputObject != null && deleteListContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteListsBulk (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteListsBulkWithHttpInfo(deleteListsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListsBulkWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListsBulkAsync (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteListsBulkAsyncWithHttpInfo(deleteListsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete list by given ID(s) or delete all lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteListsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListsBulkAsyncWithHttpInfo (DeleteListsBulkInputObject deleteListsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteListsBulkInputObject' is set
            if (deleteListsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteListsBulkInputObject' when calling TextMagicApi->DeleteListsBulk");

            var localVarPath = "/api/v2/lists/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteListsBulkInputObject != null && deleteListsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteListsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteListsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteListsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteMessageSession (int? id)
        {
             DeleteMessageSessionWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionAsync (int? id)
        {
             await DeleteMessageSessionAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteMessageSessionsBulk (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteMessageSessionsBulkWithHttpInfo(deleteMessageSessionsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMessageSessionsBulkWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMessageSessionsBulkAsync (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteMessageSessionsBulkAsyncWithHttpInfo(deleteMessageSessionsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteMessageSessionsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMessageSessionsBulkAsyncWithHttpInfo (DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteMessageSessionsBulkInputObject' is set
            if (deleteMessageSessionsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteMessageSessionsBulkInputObject' when calling TextMagicApi->DeleteMessageSessionsBulk");

            var localVarPath = "/api/v2/sessions/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteMessageSessionsBulkInputObject != null && deleteMessageSessionsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteMessageSessionsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteMessageSessionsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMessageSessionsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteOutboundMessage (int? id)
        {
             DeleteOutboundMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessageAsync (int? id)
        {
             await DeleteOutboundMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete message Delete a single message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteOutboundMessagesBulk (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteOutboundMessagesBulkWithHttpInfo(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOutboundMessagesBulkWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOutboundMessagesBulkAsync (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteOutboundMessagesBulkAsyncWithHttpInfo(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete messages by IDs Delete outbound messages by given ID(s) or delete all outbound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteOutboundMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOutboundMessagesBulkAsyncWithHttpInfo (DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteOutboundMessagesBulkInputObject' is set
            if (deleteOutboundMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteOutboundMessagesBulkInputObject' when calling TextMagicApi->DeleteOutboundMessagesBulk");

            var localVarPath = "/api/v2/messages/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteOutboundMessagesBulkInputObject != null && deleteOutboundMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteOutboundMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteOutboundMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOutboundMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns></returns>
        public void DeletePushToken (string type, int? deviceId)
        {
             DeletePushTokenWithHttpInfo(type, deviceId);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePushTokenWithHttpInfo (string type, int? deviceId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TextMagicApi->DeletePushToken");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling TextMagicApi->DeletePushToken");

            var localVarPath = "/api/v2/push/tokens/{type}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePushTokenAsync (string type, int? deviceId)
        {
             await DeletePushTokenAsyncWithHttpInfo(type, deviceId);

        }

        /// <summary>
        /// Delete a push notification device token. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTokenAsyncWithHttpInfo (string type, int? deviceId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TextMagicApi->DeletePushToken");
            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new ApiException(400, "Missing required parameter 'deviceId' when calling TextMagicApi->DeletePushToken");

            var localVarPath = "/api/v2/push/tokens/{type}/{deviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (deviceId != null) localVarPathParams.Add("deviceId", this.Configuration.ApiClient.ParameterToString(deviceId)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteScheduledMessage (int? id)
        {
             DeleteScheduledMessageWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessageAsync (int? id)
        {
             await DeleteScheduledMessageAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a message session, together with all nested messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteScheduledMessagesBulk (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteScheduledMessagesBulkWithHttpInfo(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScheduledMessagesBulkWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduledMessagesBulkAsync (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteScheduledMessagesBulkAsyncWithHttpInfo(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete scheduled messages by given ID(s) or delete all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteScheduledMessagesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduledMessagesBulkAsyncWithHttpInfo (DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteScheduledMessagesBulkInputObject' is set
            if (deleteScheduledMessagesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteScheduledMessagesBulkInputObject' when calling TextMagicApi->DeleteScheduledMessagesBulk");

            var localVarPath = "/api/v2/schedules/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteScheduledMessagesBulkInputObject != null && deleteScheduledMessagesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteScheduledMessagesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteScheduledMessagesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScheduledMessagesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSenderId (int? id)
        {
             DeleteSenderIdWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSenderIdAsync (int? id)
        {
             await DeleteSenderIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSurvey (int? id)
        {
             DeleteSurveyWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSurveyAsync (int? id)
        {
             await DeleteSurveyAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteSurveyNode (int? id)
        {
             DeleteSurveyNodeWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSurveyNodeWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSurveyNodeAsync (int? id)
        {
             await DeleteSurveyNodeAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSurveyNodeAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteTemplate (int? id)
        {
             DeleteTemplateWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync (int? id)
        {
             await DeleteTemplateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DeleteTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void DeleteTemplatesBulk (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             DeleteTemplatesBulkWithHttpInfo(deleteTemplatesBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplatesBulkWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplatesBulkAsync (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await DeleteTemplatesBulkAsyncWithHttpInfo(deleteTemplatesBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Delete template by given ID(s) or delete all templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteTemplatesBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplatesBulkAsyncWithHttpInfo (DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'deleteTemplatesBulkInputObject' is set
            if (deleteTemplatesBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'deleteTemplatesBulkInputObject' when calling TextMagicApi->DeleteTemplatesBulk");

            var localVarPath = "/api/v2/templates/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (deleteTemplatesBulkInputObject != null && deleteTemplatesBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteTemplatesBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteTemplatesBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplatesBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>DoAuthResponse</returns>
        public DoAuthResponse DoAuth (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<DoAuthResponse> localVarResponse = DoAuthWithHttpInfo(doAuthInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of DoAuthResponse</returns>
        public ApiResponse< DoAuthResponse > DoAuthWithHttpInfo (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'doAuthInputObject' is set
            if (doAuthInputObject == null)
                throw new ApiException(400, "Missing required parameter 'doAuthInputObject' when calling TextMagicApi->DoAuth");

            var localVarPath = "/api/v2/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (doAuthInputObject != null && doAuthInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doAuthInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doAuthInputObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoAuthResponse)));
        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of DoAuthResponse</returns>
        public async System.Threading.Tasks.Task<DoAuthResponse> DoAuthAsync (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<DoAuthResponse> localVarResponse = await DoAuthAsyncWithHttpInfo(doAuthInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate user by given username and password. Returning a username and token that you should pass to the all requests (in X-TM-Username and X-TM-Key, respectively)
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="doAuthInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (DoAuthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoAuthResponse>> DoAuthAsyncWithHttpInfo (DoAuthInputObject doAuthInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'doAuthInputObject' is set
            if (doAuthInputObject == null)
                throw new ApiException(400, "Missing required parameter 'doAuthInputObject' when calling TextMagicApi->DoAuth");

            var localVarPath = "/api/v2/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (doAuthInputObject != null && doAuthInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(doAuthInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = doAuthInputObject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoAuthResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoAuthResponse)));
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>DoCarrierLookupResponse</returns>
        public DoCarrierLookupResponse DoCarrierLookup (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = DoCarrierLookupWithHttpInfo(phone, country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>ApiResponse of DoCarrierLookupResponse</returns>
        public ApiResponse< DoCarrierLookupResponse > DoCarrierLookupWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of DoCarrierLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoCarrierLookupResponse> DoCarrierLookupAsync (string phone, string country = null)
        {
             ApiResponse<DoCarrierLookupResponse> localVarResponse = await DoCarrierLookupAsyncWithHttpInfo(phone, country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Carrier Lookup 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="country">Country code for local formatted numbers (optional, default to US)</param>
        /// <returns>Task of ApiResponse (DoCarrierLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoCarrierLookupResponse>> DoCarrierLookupAsyncWithHttpInfo (string phone, string country = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->DoCarrierLookup");

            var localVarPath = "/api/v2/lookups/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoCarrierLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoCarrierLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoCarrierLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoCarrierLookupResponse)));
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>DoEmailLookupResponse</returns>
        public DoEmailLookupResponse DoEmailLookup (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = DoEmailLookupWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>ApiResponse of DoEmailLookupResponse</returns>
        public ApiResponse< DoEmailLookupResponse > DoEmailLookupWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of DoEmailLookupResponse</returns>
        public async System.Threading.Tasks.Task<DoEmailLookupResponse> DoEmailLookupAsync (string email)
        {
             ApiResponse<DoEmailLookupResponse> localVarResponse = await DoEmailLookupAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Email address using Email Lookup tool 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email"></param>
        /// <returns>Task of ApiResponse (DoEmailLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DoEmailLookupResponse>> DoEmailLookupAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TextMagicApi->DoEmailLookup");

            var localVarPath = "/api/v2/email-lookups/{email}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (email != null) localVarPathParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DoEmailLookup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DoEmailLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DoEmailLookupResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DoEmailLookupResponse)));
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse DuplicateSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = DuplicateSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > DuplicateSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DuplicateSurvey");

            var localVarPath = "/api/v2/surveys/{id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> DuplicateSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await DuplicateSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Duplicate a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> DuplicateSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->DuplicateSurvey");

            var localVarPath = "/api/v2/surveys/{id}/duplicate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DuplicateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllBulkSessionsResponse</returns>
        public GetAllBulkSessionsResponse GetAllBulkSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsResponse> localVarResponse = GetAllBulkSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllBulkSessionsResponse</returns>
        public ApiResponse< GetAllBulkSessionsResponse > GetAllBulkSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsResponse)));
        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllBulkSessionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllBulkSessionsResponse> GetAllBulkSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllBulkSessionsResponse> localVarResponse = await GetAllBulkSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all bulk sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllBulkSessionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllBulkSessionsResponse>> GetAllBulkSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/bulks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllBulkSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllBulkSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllBulkSessionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllBulkSessionsResponse)));
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>GetAllChatsResponse</returns>
        public GetAllChatsResponse GetAllChats (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsResponse> localVarResponse = GetAllChatsWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAllChatsResponse</returns>
        public ApiResponse< GetAllChatsResponse > GetAllChatsWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsResponse)));
        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of GetAllChatsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllChatsResponse> GetAllChatsAsync (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {
             ApiResponse<GetAllChatsResponse> localVarResponse = await GetAllChatsAsyncWithHttpInfo(status, page, limit, orderBy, voice, flat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <param name="flat">Should additional contact info be included (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAllChatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllChatsResponse>> GetAllChatsAsyncWithHttpInfo (string status = null, int? page = null, int? limit = null, string orderBy = null, int? voice = null, int? flat = null)
        {

            var localVarPath = "/api/v2/chats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter
            if (flat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "flat", flat)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllChatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllChatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllChatsResponse)));
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllInboundMessagesResponse</returns>
        public GetAllInboundMessagesResponse GetAllInboundMessages (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesResponse> localVarResponse = GetAllInboundMessagesWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllInboundMessagesResponse</returns>
        public ApiResponse< GetAllInboundMessagesResponse > GetAllInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesResponse)));
        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllInboundMessagesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllInboundMessagesResponse> GetAllInboundMessagesAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllInboundMessagesResponse> localVarResponse = await GetAllInboundMessagesAsyncWithHttpInfo(page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all inbox messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllInboundMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllInboundMessagesResponse>> GetAllInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/replies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllInboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllInboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllInboundMessagesResponse)));
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetAllMessageSessionsResponse</returns>
        public GetAllMessageSessionsResponse GetAllMessageSessions (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsResponse> localVarResponse = GetAllMessageSessionsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetAllMessageSessionsResponse</returns>
        public ApiResponse< GetAllMessageSessionsResponse > GetAllMessageSessionsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsResponse)));
        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetAllMessageSessionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllMessageSessionsResponse> GetAllMessageSessionsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllMessageSessionsResponse> localVarResponse = await GetAllMessageSessionsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all message sending sessions. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetAllMessageSessionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllMessageSessionsResponse>> GetAllMessageSessionsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMessageSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllMessageSessionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllMessageSessionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllMessageSessionsResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>GetAllOutboundMessagesResponse</returns>
        public GetAllOutboundMessagesResponse GetAllOutboundMessages (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesResponse> localVarResponse = GetAllOutboundMessagesWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>ApiResponse of GetAllOutboundMessagesResponse</returns>
        public ApiResponse< GetAllOutboundMessagesResponse > GetAllOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesResponse)));
        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of GetAllOutboundMessagesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllOutboundMessagesResponse> GetAllOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null)
        {
             ApiResponse<GetAllOutboundMessagesResponse> localVarResponse = await GetAllOutboundMessagesAsyncWithHttpInfo(page, limit, lastId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all messages Get all user oubound messages.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <returns>Task of ApiResponse (GetAllOutboundMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllOutboundMessagesResponse>> GetAllOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null)
        {

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllOutboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllOutboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllOutboundMessagesResponse)));
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetAllScheduledMessagesResponse</returns>
        public GetAllScheduledMessagesResponse GetAllScheduledMessages (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesResponse> localVarResponse = GetAllScheduledMessagesWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetAllScheduledMessagesResponse</returns>
        public ApiResponse< GetAllScheduledMessagesResponse > GetAllScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesResponse)));
        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetAllScheduledMessagesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllScheduledMessagesResponse> GetAllScheduledMessagesAsync (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetAllScheduledMessagesResponse> localVarResponse = await GetAllScheduledMessagesAsyncWithHttpInfo(page, limit, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all scheduled messages. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetAllScheduledMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllScheduledMessagesResponse>> GetAllScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllScheduledMessagesResponse)));
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>GetAllTemplatesResponse</returns>
        public GetAllTemplatesResponse GetAllTemplates (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesResponse> localVarResponse = GetAllTemplatesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>ApiResponse of GetAllTemplatesResponse</returns>
        public ApiResponse< GetAllTemplatesResponse > GetAllTemplatesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesResponse)));
        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of GetAllTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllTemplatesResponse> GetAllTemplatesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetAllTemplatesResponse> localVarResponse = await GetAllTemplatesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user templates. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional)</param>
        /// <param name="limit">How many results to return (optional)</param>
        /// <returns>Task of ApiResponse (GetAllTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllTemplatesResponse>> GetAllTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllTemplatesResponse)));
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>GetAvailableDedicatedNumbersResponse</returns>
        public GetAvailableDedicatedNumbersResponse GetAvailableDedicatedNumbers (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = GetAvailableDedicatedNumbersWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>ApiResponse of GetAvailableDedicatedNumbersResponse</returns>
        public ApiResponse< GetAvailableDedicatedNumbersResponse > GetAvailableDedicatedNumbersWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of GetAvailableDedicatedNumbersResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableDedicatedNumbersResponse> GetAvailableDedicatedNumbersAsync (string country, int? prefix = null, int? tollfree = null)
        {
             ApiResponse<GetAvailableDedicatedNumbersResponse> localVarResponse = await GetAvailableDedicatedNumbersAsyncWithHttpInfo(country, prefix, tollfree);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find available dedicated numbers to buy. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Dedicated number country. Two letters in upper case</param>
        /// <param name="prefix">Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)</param>
        /// <param name="tollfree">Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetAvailableDedicatedNumbersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableDedicatedNumbersResponse>> GetAvailableDedicatedNumbersAsyncWithHttpInfo (string country, int? prefix = null, int? tollfree = null)
        {
            // verify the required parameter 'country' is set
            if (country == null)
                throw new ApiException(400, "Missing required parameter 'country' when calling TextMagicApi->GetAvailableDedicatedNumbers");

            var localVarPath = "/api/v2/numbers/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            if (tollfree != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tollfree", tollfree)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>GetAvailableSenderSettingOptionsResponse</returns>
        public GetAvailableSenderSettingOptionsResponse GetAvailableSenderSettingOptions (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = GetAvailableSenderSettingOptionsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetAvailableSenderSettingOptionsResponse</returns>
        public ApiResponse< GetAvailableSenderSettingOptionsResponse > GetAvailableSenderSettingOptionsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of GetAvailableSenderSettingOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAvailableSenderSettingOptionsResponse> GetAvailableSenderSettingOptionsAsync (string country = null)
        {
             ApiResponse<GetAvailableSenderSettingOptionsResponse> localVarResponse = await GetAvailableSenderSettingOptionsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender setting options available in specific country only. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetAvailableSenderSettingOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAvailableSenderSettingOptionsResponse>> GetAvailableSenderSettingOptionsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableSenderSettingOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAvailableSenderSettingOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAvailableSenderSettingOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAvailableSenderSettingOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationOptionsResponse</returns>
        public GetBalanceNotificationOptionsResponse GetBalanceNotificationOptions ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = GetBalanceNotificationOptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationOptionsResponse</returns>
        public ApiResponse< GetBalanceNotificationOptionsResponse > GetBalanceNotificationOptionsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationOptionsResponse> GetBalanceNotificationOptionsAsync ()
        {
             ApiResponse<GetBalanceNotificationOptionsResponse> localVarResponse = await GetBalanceNotificationOptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationOptionsResponse>> GetBalanceNotificationOptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationOptionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationOptionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationOptionsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetBalanceNotificationSettingsResponse</returns>
        public GetBalanceNotificationSettingsResponse GetBalanceNotificationSettings ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = GetBalanceNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetBalanceNotificationSettingsResponse</returns>
        public ApiResponse< GetBalanceNotificationSettingsResponse > GetBalanceNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetBalanceNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetBalanceNotificationSettingsResponse> GetBalanceNotificationSettingsAsync ()
        {
             ApiResponse<GetBalanceNotificationSettingsResponse> localVarResponse = await GetBalanceNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetBalanceNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBalanceNotificationSettingsResponse>> GetBalanceNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBalanceNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBalanceNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBalanceNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetBlockedContactsResponse</returns>
        public GetBlockedContactsResponse GetBlockedContacts (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsResponse> localVarResponse = GetBlockedContactsWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetBlockedContactsResponse</returns>
        public ApiResponse< GetBlockedContactsResponse > GetBlockedContactsWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsResponse)));
        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetBlockedContactsResponse</returns>
        public async System.Threading.Tasks.Task<GetBlockedContactsResponse> GetBlockedContactsAsync (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetBlockedContactsResponse> localVarResponse = await GetBlockedContactsAsyncWithHttpInfo(page, limit, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get blocked contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find blocked contacts by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetBlockedContactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetBlockedContactsResponse>> GetBlockedContactsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/block/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockedContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetBlockedContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetBlockedContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetBlockedContactsResponse)));
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>BulkSession</returns>
        public BulkSession GetBulkSession (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = GetBulkSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of BulkSession</returns>
        public ApiResponse< BulkSession > GetBulkSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of BulkSession</returns>
        public async System.Threading.Tasks.Task<BulkSession> GetBulkSessionAsync (int? id)
        {
             ApiResponse<BulkSession> localVarResponse = await GetBulkSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bulk message session status. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (BulkSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulkSession>> GetBulkSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetBulkSession");

            var localVarPath = "/api/v2/bulks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBulkSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulkSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulkSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulkSession)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetCallbackSettingsResponse</returns>
        public GetCallbackSettingsResponse GetCallbackSettings ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = GetCallbackSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetCallbackSettingsResponse</returns>
        public ApiResponse< GetCallbackSettingsResponse > GetCallbackSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetCallbackSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetCallbackSettingsResponse> GetCallbackSettingsAsync ()
        {
             ApiResponse<GetCallbackSettingsResponse> localVarResponse = await GetCallbackSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetCallbackSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCallbackSettingsResponse>> GetCallbackSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCallbackSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCallbackSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCallbackSettingsResponse)));
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GetCallsPrices ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = GetCallsPricesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > GetCallsPricesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/calls/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GetCallsPricesAsync ()
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await GetCallsPricesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check pricing for a inbound/outbound call. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GetCallsPricesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/calls/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCallsPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Chat</returns>
        public Chat GetChat (int? id)
        {
             ApiResponse<Chat> localVarResponse = GetChatWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatAsync (int? id)
        {
             ApiResponse<Chat> localVarResponse = await GetChatAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single chat. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChat");

            var localVarPath = "/api/v2/chats/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Chat</returns>
        public Chat GetChatByPhone (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = GetChatByPhoneWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>ApiResponse of Chat</returns>
        public ApiResponse< Chat > GetChatByPhoneWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of Chat</returns>
        public async System.Threading.Tasks.Task<Chat> GetChatByPhoneAsync (string phone, int? upsert = null, int? reopen = null)
        {
             ApiResponse<Chat> localVarResponse = await GetChatByPhoneAsyncWithHttpInfo(phone, upsert, reopen);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by phone. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <param name="upsert">Create a new chat if not found (optional, default to 0)</param>
        /// <param name="reopen">Reopen chat if found or do not change status (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Chat)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chat>> GetChatByPhoneAsyncWithHttpInfo (string phone, int? upsert = null, int? reopen = null)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetChatByPhone");

            var localVarPath = "/api/v2/chats/{phone}/by/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter
            if (upsert != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsert", upsert)); // query parameter
            if (reopen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reopen", reopen)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chat>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chat) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chat)));
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>GetChatMessagesResponse</returns>
        public GetChatMessagesResponse GetChatMessages (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesResponse> localVarResponse = GetChatMessagesWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChatMessagesResponse</returns>
        public ApiResponse< GetChatMessagesResponse > GetChatMessagesWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesResponse)));
        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of GetChatMessagesResponse</returns>
        public async System.Threading.Tasks.Task<GetChatMessagesResponse> GetChatMessagesAsync (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
             ApiResponse<GetChatMessagesResponse> localVarResponse = await GetChatMessagesAsyncWithHttpInfo(id, page, limit, query, start, end, direction, voice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch messages from chat with specified chat id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="start">Return messages since specified timestamp only (optional)</param>
        /// <param name="end">Return messages up to specified timestamp only (optional)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="voice">Fetch results with voice calls (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChatMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChatMessagesResponse>> GetChatMessagesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string query = null, int? start = null, int? end = null, string direction = null, int? voice = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetChatMessages");

            var localVarPath = "/api/v2/chats/{id}/message";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (voice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "voice", voice)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChatMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChatMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetChatMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChatMessagesResponse)));
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Contact</returns>
        public Contact GetContact (int? id)
        {
             ApiResponse<Contact> localVarResponse = GetContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactAsync (int? id)
        {
             ApiResponse<Contact> localVarResponse = await GetContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The contact id</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Contact</returns>
        public Contact GetContactByPhone (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactByPhoneWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactByPhoneWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactByPhoneAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactByPhoneAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone"></param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactByPhoneAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactByPhone");

            var localVarPath = "/api/v2/contacts/phone/{phone}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarPathParams.Add("phone", this.Configuration.ApiClient.ParameterToString(phone)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactByPhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Contact</returns>
        public Contact GetContactIfBlocked (string phone)
        {
             ApiResponse<Contact> localVarResponse = GetContactIfBlockedWithHttpInfo(phone);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>ApiResponse of Contact</returns>
        public ApiResponse< Contact > GetContactIfBlockedWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of Contact</returns>
        public async System.Threading.Tasks.Task<Contact> GetContactIfBlockedAsync (string phone)
        {
             ApiResponse<Contact> localVarResponse = await GetContactIfBlockedAsyncWithHttpInfo(phone);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check is that phone number blocked 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phone">Phone number to check</param>
        /// <returns>Task of ApiResponse (Contact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Contact>> GetContactIfBlockedAsyncWithHttpInfo (string phone)
        {
            // verify the required parameter 'phone' is set
            if (phone == null)
                throw new ApiException(400, "Missing required parameter 'phone' when calling TextMagicApi->GetContactIfBlocked");

            var localVarPath = "/api/v2/contacts/block/phone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (phone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phone", phone)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactIfBlocked", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Contact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Contact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Contact)));
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetContactImportSessionProgressResponse</returns>
        public GetContactImportSessionProgressResponse GetContactImportSessionProgress (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = GetContactImportSessionProgressWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetContactImportSessionProgressResponse</returns>
        public ApiResponse< GetContactImportSessionProgressResponse > GetContactImportSessionProgressWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetContactImportSessionProgressResponse</returns>
        public async System.Threading.Tasks.Task<GetContactImportSessionProgressResponse> GetContactImportSessionProgressAsync (int? id)
        {
             ApiResponse<GetContactImportSessionProgressResponse> localVarResponse = await GetContactImportSessionProgressAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contact import session progress. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetContactImportSessionProgressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactImportSessionProgressResponse>> GetContactImportSessionProgressAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactImportSessionProgress");

            var localVarPath = "/api/v2/contacts/import/progress/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactImportSessionProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactImportSessionProgressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactImportSessionProgressResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactImportSessionProgressResponse)));
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ContactNote</returns>
        public ContactNote GetContactNote (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = GetContactNoteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ContactNote</returns>
        public ApiResponse< ContactNote > GetContactNoteWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ContactNote</returns>
        public async System.Threading.Tasks.Task<ContactNote> GetContactNoteAsync (int? id)
        {
             ApiResponse<ContactNote> localVarResponse = await GetContactNoteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ContactNote)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactNote>> GetContactNoteAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactNote>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactNote) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactNote)));
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetContactNotesResponse</returns>
        public GetContactNotesResponse GetContactNotes (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesResponse> localVarResponse = GetContactNotesWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetContactNotesResponse</returns>
        public ApiResponse< GetContactNotesResponse > GetContactNotesWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesResponse)));
        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetContactNotesResponse</returns>
        public async System.Threading.Tasks.Task<GetContactNotesResponse> GetContactNotesAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetContactNotesResponse> localVarResponse = await GetContactNotesAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch notes assigned to the given contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetContactNotesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactNotesResponse>> GetContactNotesAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactNotes");

            var localVarPath = "/api/v2/contacts/{id}/notes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactNotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactNotesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactNotesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactNotesResponse)));
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsResponse</returns>
        public GetContactsResponse GetContacts (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsResponse> localVarResponse = GetContactsWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsResponse</returns>
        public ApiResponse< GetContactsResponse > GetContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsResponse)));
        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsResponse> GetContactsAsync (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsResponse> localVarResponse = await GetContactsAsyncWithHttpInfo(page, limit, shared, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user contacts. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsResponse>> GetContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsResponse)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>List&lt;GetContactsAutocompleteResponse&gt;</returns>
        public List<GetContactsAutocompleteResponse> GetContactsAutocomplete (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<List<GetContactsAutocompleteResponse>> localVarResponse = GetContactsAutocompleteWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>ApiResponse of List&lt;GetContactsAutocompleteResponse&gt;</returns>
        public ApiResponse< List<GetContactsAutocompleteResponse> > GetContactsAutocompleteWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContactsAutocompleteResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContactsAutocompleteResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContactsAutocompleteResponse>)));
        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of List&lt;GetContactsAutocompleteResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetContactsAutocompleteResponse>> GetContactsAutocompleteAsync (string query, int? limit = null, int? lists = null)
        {
             ApiResponse<List<GetContactsAutocompleteResponse>> localVarResponse = await GetContactsAutocompleteAsyncWithHttpInfo(query, limit, lists);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contacts autocomplete suggestions by given search term. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Find recipients by specified search query</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lists">Should lists be returned or not (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (List&lt;GetContactsAutocompleteResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GetContactsAutocompleteResponse>>> GetContactsAutocompleteAsyncWithHttpInfo (string query, int? limit = null, int? lists = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new ApiException(400, "Missing required parameter 'query' when calling TextMagicApi->GetContactsAutocomplete");

            var localVarPath = "/api/v2/contacts/autocomplete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsAutocomplete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GetContactsAutocompleteResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GetContactsAutocompleteResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GetContactsAutocompleteResponse>)));
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetContactsByListIdResponse</returns>
        public GetContactsByListIdResponse GetContactsByListId (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdResponse> localVarResponse = GetContactsByListIdWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetContactsByListIdResponse</returns>
        public ApiResponse< GetContactsByListIdResponse > GetContactsByListIdWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdResponse)));
        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetContactsByListIdResponse</returns>
        public async System.Threading.Tasks.Task<GetContactsByListIdResponse> GetContactsByListIdAsync (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetContactsByListIdResponse> localVarResponse = await GetContactsByListIdAsyncWithHttpInfo(id, page, limit, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch user contacts by given group id. A useful synonym for \&quot;contacts/search\&quot; command with provided \&quot;listId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Given group Id.</param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetContactsByListIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContactsByListIdResponse>> GetContactsByListIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string orderBy = null, string direction = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetContactsByListId");

            var localVarPath = "/api/v2/lists/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsByListId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContactsByListIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetContactsByListIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContactsByListIdResponse)));
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Country&gt;</returns>
        public List<Country> GetCountries ()
        {
             ApiResponse<List<Country>> localVarResponse = GetCountriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        public ApiResponse< List<Country> > GetCountriesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Country>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Country>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Country>)));
        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Country&gt;</returns>
        public async System.Threading.Tasks.Task<List<Country>> GetCountriesAsync ()
        {
             ApiResponse<List<Country>> localVarResponse = await GetCountriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return list of countries. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetCountriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Country>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Country>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Country>)));
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>User</returns>
        public User GetCurrentUser ()
        {
             ApiResponse<User> localVarResponse = GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetCurrentUserAsync ()
        {
             ApiResponse<User> localVarResponse = await GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserCustomField</returns>
        public UserCustomField GetCustomField (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = GetCustomFieldWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserCustomField</returns>
        public ApiResponse< UserCustomField > GetCustomFieldWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UserCustomField</returns>
        public async System.Threading.Tasks.Task<UserCustomField> GetCustomFieldAsync (int? id)
        {
             ApiResponse<UserCustomField> localVarResponse = await GetCustomFieldAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UserCustomField)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserCustomField>> GetCustomFieldAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserCustomField>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserCustomField) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserCustomField)));
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetCustomFieldsResponse</returns>
        public GetCustomFieldsResponse GetCustomFields (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsResponse> localVarResponse = GetCustomFieldsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetCustomFieldsResponse</returns>
        public ApiResponse< GetCustomFieldsResponse > GetCustomFieldsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsResponse)));
        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetCustomFieldsResponse</returns>
        public async System.Threading.Tasks.Task<GetCustomFieldsResponse> GetCustomFieldsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetCustomFieldsResponse> localVarResponse = await GetCustomFieldsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact custom fields. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetCustomFieldsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCustomFieldsResponse>> GetCustomFieldsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/customfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCustomFieldsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCustomFieldsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCustomFieldsResponse)));
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UsersInbound</returns>
        public UsersInbound GetDedicatedNumber (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = GetDedicatedNumberWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UsersInbound</returns>
        public ApiResponse< UsersInbound > GetDedicatedNumberWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UsersInbound</returns>
        public async System.Threading.Tasks.Task<UsersInbound> GetDedicatedNumberAsync (int? id)
        {
             ApiResponse<UsersInbound> localVarResponse = await GetDedicatedNumberAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single dedicated number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UsersInbound)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersInbound>> GetDedicatedNumberAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetDedicatedNumber");

            var localVarPath = "/api/v2/numbers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDedicatedNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UsersInbound>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UsersInbound) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UsersInbound)));
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetDisallowedRules ()
        {
             ApiResponse<List<string>> localVarResponse = GetDisallowedRulesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetDisallowedRulesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/disallowed-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDisallowedRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetDisallowedRulesAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetDisallowedRulesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an array of all rules that are disallowed to the current account. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetDisallowedRulesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/disallowed-rules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDisallowedRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>GetFavouritesResponse</returns>
        public GetFavouritesResponse GetFavourites (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavouritesResponse> localVarResponse = GetFavouritesWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>ApiResponse of GetFavouritesResponse</returns>
        public ApiResponse< GetFavouritesResponse > GetFavouritesWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavourites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavouritesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavouritesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavouritesResponse)));
        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of GetFavouritesResponse</returns>
        public async System.Threading.Tasks.Task<GetFavouritesResponse> GetFavouritesAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<GetFavouritesResponse> localVarResponse = await GetFavouritesAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get favorite contacts and lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find contacts or lists by specified search query (optional, default to A)</param>
        /// <returns>Task of ApiResponse (GetFavouritesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFavouritesResponse>> GetFavouritesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/contacts/favorite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFavourites", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFavouritesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetFavouritesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFavouritesResponse)));
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetForwardedCallsResponse</returns>
        public GetForwardedCallsResponse GetForwardedCalls (int? page = null, int? limit = null)
        {
             ApiResponse<GetForwardedCallsResponse> localVarResponse = GetForwardedCallsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetForwardedCallsResponse</returns>
        public ApiResponse< GetForwardedCallsResponse > GetForwardedCallsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardedCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetForwardedCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetForwardedCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetForwardedCallsResponse)));
        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetForwardedCallsResponse</returns>
        public async System.Threading.Tasks.Task<GetForwardedCallsResponse> GetForwardedCallsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetForwardedCallsResponse> localVarResponse = await GetForwardedCallsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all forwarded calls. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetForwardedCallsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetForwardedCallsResponse>> GetForwardedCallsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForwardedCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetForwardedCallsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetForwardedCallsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetForwardedCallsResponse)));
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageIn</returns>
        public MessageIn GetInboundMessage (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = GetInboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageIn</returns>
        public ApiResponse< MessageIn > GetInboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageIn</returns>
        public async System.Threading.Tasks.Task<MessageIn> GetInboundMessageAsync (int? id)
        {
             ApiResponse<MessageIn> localVarResponse = await GetInboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single inbox message. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageIn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageIn>> GetInboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetInboundMessage");

            var localVarPath = "/api/v2/replies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageIn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageIn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageIn)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInboundMessagesNotificationSettingsResponse</returns>
        public GetInboundMessagesNotificationSettingsResponse GetInboundMessagesNotificationSettings ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = GetInboundMessagesNotificationSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetInboundMessagesNotificationSettingsResponse</returns>
        public ApiResponse< GetInboundMessagesNotificationSettingsResponse > GetInboundMessagesNotificationSettingsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInboundMessagesNotificationSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetInboundMessagesNotificationSettingsResponse> GetInboundMessagesNotificationSettingsAsync ()
        {
             ApiResponse<GetInboundMessagesNotificationSettingsResponse> localVarResponse = await GetInboundMessagesNotificationSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInboundMessagesNotificationSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInboundMessagesNotificationSettingsResponse>> GetInboundMessagesNotificationSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInboundMessagesNotificationSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInboundMessagesNotificationSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInboundMessagesNotificationSettingsResponse)));
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetInvoicesResponse</returns>
        public GetInvoicesResponse GetInvoices (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesResponse> localVarResponse = GetInvoicesWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetInvoicesResponse</returns>
        public ApiResponse< GetInvoicesResponse > GetInvoicesWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesResponse)));
        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetInvoicesResponse</returns>
        public async System.Threading.Tasks.Task<GetInvoicesResponse> GetInvoicesAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetInvoicesResponse> localVarResponse = await GetInvoicesAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return account invoices. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetInvoicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInvoicesResponse>> GetInvoicesAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvoices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetInvoicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetInvoicesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetInvoicesResponse)));
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Group</returns>
        public Group GetList (int? id)
        {
             ApiResponse<Group> localVarResponse = GetListWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Group</returns>
        public ApiResponse< Group > GetListWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Group</returns>
        public async System.Threading.Tasks.Task<Group> GetListAsync (int? id)
        {
             ApiResponse<Group> localVarResponse = await GetListAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Group)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Group>> GetListAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Group>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Group) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Group)));
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetListContactsIdsResponse</returns>
        public GetListContactsIdsResponse GetListContactsIds (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = GetListContactsIdsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetListContactsIdsResponse</returns>
        public ApiResponse< GetListContactsIdsResponse > GetListContactsIdsWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetListContactsIdsResponse</returns>
        public async System.Threading.Tasks.Task<GetListContactsIdsResponse> GetListContactsIdsAsync (int? id)
        {
             ApiResponse<GetListContactsIdsResponse> localVarResponse = await GetListContactsIdsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch all contacts IDs belonging to the list with ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetListContactsIdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListContactsIdsResponse>> GetListContactsIdsAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListContactsIds");

            var localVarPath = "/api/v2/lists/{id}/contacts/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListContactsIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListContactsIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListContactsIdsResponse)));
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetListsOfContactResponse</returns>
        public GetListsOfContactResponse GetListsOfContact (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactResponse> localVarResponse = GetListsOfContactWithHttpInfo(id, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetListsOfContactResponse</returns>
        public ApiResponse< GetListsOfContactResponse > GetListsOfContactWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactResponse)));
        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetListsOfContactResponse</returns>
        public async System.Threading.Tasks.Task<GetListsOfContactResponse> GetListsOfContactAsync (int? id, int? page = null, int? limit = null)
        {
             ApiResponse<GetListsOfContactResponse> localVarResponse = await GetListsOfContactAsyncWithHttpInfo(id, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return lists which contact belongs to. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetListsOfContactResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetListsOfContactResponse>> GetListsOfContactAsyncWithHttpInfo (int? id, int? page = null, int? limit = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetListsOfContact");

            var localVarPath = "/api/v2/contacts/{id}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListsOfContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetListsOfContactResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetListsOfContactResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetListsOfContactResponse)));
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePreviewResponse</returns>
        public GetMessagePreviewResponse GetMessagePreview (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = GetMessagePreviewWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePreviewResponse</returns>
        public ApiResponse< GetMessagePreviewResponse > GetMessagePreviewWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePreviewResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePreviewResponse> GetMessagePreviewAsync (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePreviewResponse> localVarResponse = await GetMessagePreviewAsyncWithHttpInfo(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preview message Get messages preview (with tags merged) up to 100 messages per session.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePreviewResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePreviewResponse>> GetMessagePreviewAsyncWithHttpInfo (string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePreviewResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePreviewResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePreviewResponse)));
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>GetMessagePriceResponse</returns>
        public GetMessagePriceResponse GetMessagePrice (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = GetMessagePriceWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>ApiResponse of GetMessagePriceResponse</returns>
        public ApiResponse< GetMessagePriceResponse > GetMessagePriceWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of GetMessagePriceResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePriceResponse> GetMessagePriceAsync (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {
             ApiResponse<GetMessagePriceResponse> localVarResponse = await GetMessagePriceAsyncWithHttpInfo(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check price Check pricing for a new outbound message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeBlocked">Should we show pricing for the blocked contacts. (optional, default to 0)</param>
        /// <param name="text">Message text. Required if template_id is not set (optional)</param>
        /// <param name="templateId">Template used instead of message text. Required if text is not set (optional)</param>
        /// <param name="sendingTime">DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)</param>
        /// <param name="sendingDateTime">Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)</param>
        /// <param name="sendingTimezone">ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)</param>
        /// <param name="contacts">Comma separated array of contact resources id message will be sent to (optional)</param>
        /// <param name="lists">Comma separated array of list resources id message will be sent to (optional)</param>
        /// <param name="phones">Comma separated array of E.164 phone numbers message will be sent to (optional)</param>
        /// <param name="cutExtra">Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)</param>
        /// <param name="partsCount">Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)</param>
        /// <param name="referenceId">Custom message reference id which can be used in your application infrastructure (optional)</param>
        /// <param name="from">One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)</param>
        /// <param name="rule">iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)</param>
        /// <param name="createChat">Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)</param>
        /// <param name="tts">Send Text to Speech message. Default is 0 (optional, default to 0)</param>
        /// <param name="local">Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="localCountry">2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagePriceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePriceResponse>> GetMessagePriceAsyncWithHttpInfo (int? includeBlocked = null, string text = null, int? templateId = null, int? sendingTime = null, string sendingDateTime = null, string sendingTimezone = null, string contacts = null, string lists = null, string phones = null, int? cutExtra = null, int? partsCount = null, int? referenceId = null, string from = null, string rule = null, int? createChat = null, int? tts = null, int? local = null, string localCountry = null)
        {

            var localVarPath = "/api/v2/messages/price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (sendingTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTime", sendingTime)); // query parameter
            if (sendingDateTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingDateTime", sendingDateTime)); // query parameter
            if (sendingTimezone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sendingTimezone", sendingTimezone)); // query parameter
            if (contacts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contacts", contacts)); // query parameter
            if (lists != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lists", lists)); // query parameter
            if (phones != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phones", phones)); // query parameter
            if (cutExtra != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cutExtra", cutExtra)); // query parameter
            if (partsCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partsCount", partsCount)); // query parameter
            if (referenceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referenceId", referenceId)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (rule != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rule", rule)); // query parameter
            if (createChat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createChat", createChat)); // query parameter
            if (tts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tts", tts)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (localCountry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "localCountry", localCountry)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePriceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePriceResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePriceResponse)));
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagePricesResponse</returns>
        public GetMessagePricesResponse GetMessagePrices ()
        {
             ApiResponse<GetMessagePricesResponse> localVarResponse = GetMessagePricesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagePricesResponse</returns>
        public ApiResponse< GetMessagePricesResponse > GetMessagePricesWithHttpInfo ()
        {

            var localVarPath = "/api/v2/messages/prices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePricesResponse)));
        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagePricesResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagePricesResponse> GetMessagePricesAsync ()
        {
             ApiResponse<GetMessagePricesResponse> localVarResponse = await GetMessagePricesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get pricing Get message prices for all countries.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagePricesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagePricesResponse>> GetMessagePricesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/messages/prices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagePrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagePricesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagePricesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagePricesResponse)));
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageSession</returns>
        public MessageSession GetMessageSession (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = GetMessageSessionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageSession</returns>
        public ApiResponse< MessageSession > GetMessageSessionWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageSession</returns>
        public async System.Threading.Tasks.Task<MessageSession> GetMessageSessionAsync (int? id)
        {
             ApiResponse<MessageSession> localVarResponse = await GetMessageSessionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a message session. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageSession>> GetMessageSessionAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSession");

            var localVarPath = "/api/v2/sessions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageSession)));
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessageSessionStatResponse</returns>
        public GetMessageSessionStatResponse GetMessageSessionStat (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = GetMessageSessionStatWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessageSessionStatResponse</returns>
        public ApiResponse< GetMessageSessionStatResponse > GetMessageSessionStatWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessageSessionStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageSessionStatResponse> GetMessageSessionStatAsync (int? id, int? includeDeleted = null)
        {
             ApiResponse<GetMessageSessionStatResponse> localVarResponse = await GetMessageSessionStatAsyncWithHttpInfo(id, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get sending session statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessageSessionStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessageSessionStatResponse>> GetMessageSessionStatAsyncWithHttpInfo (int? id, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessageSessionStat");

            var localVarPath = "/api/v2/sessions/{id}/stat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageSessionStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessageSessionStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessageSessionStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessageSessionStatResponse)));
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>GetMessagesBySessionIdResponse</returns>
        public GetMessagesBySessionIdResponse GetMessagesBySessionId (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdResponse> localVarResponse = GetMessagesBySessionIdWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>ApiResponse of GetMessagesBySessionIdResponse</returns>
        public ApiResponse< GetMessagesBySessionIdResponse > GetMessagesBySessionIdWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdResponse)));
        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of GetMessagesBySessionIdResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagesBySessionIdResponse> GetMessagesBySessionIdAsync (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
             ApiResponse<GetMessagesBySessionIdResponse> localVarResponse = await GetMessagesBySessionIdAsyncWithHttpInfo(id, page, limit, statuses, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch messages by given session id. A useful synonym for \&quot;messages/search\&quot; command with provided \&quot;sessionId\&quot; parameter.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetMessagesBySessionIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagesBySessionIdResponse>> GetMessagesBySessionIdAsyncWithHttpInfo (int? id, int? page = null, int? limit = null, string statuses = null, int? includeDeleted = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetMessagesBySessionId");

            var localVarPath = "/api/v2/sessions/{id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesBySessionId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagesBySessionIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagesBySessionIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagesBySessionIdResponse)));
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMessagingCountersResponse</returns>
        public GetMessagingCountersResponse GetMessagingCounters ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = GetMessagingCountersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMessagingCountersResponse</returns>
        public ApiResponse< GetMessagingCountersResponse > GetMessagingCountersWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMessagingCountersResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingCountersResponse> GetMessagingCountersAsync ()
        {
             ApiResponse<GetMessagingCountersResponse> localVarResponse = await GetMessagingCountersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return counters for messaging data views. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMessagingCountersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingCountersResponse>> GetMessagingCountersAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/stats/messaging/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingCounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingCountersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingCountersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingCountersResponse)));
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetMessagingStatResponse</returns>
        public GetMessagingStatResponse GetMessagingStat (string by = null, int? start = null, string end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = GetMessagingStatWithHttpInfo(by, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetMessagingStatResponse</returns>
        public ApiResponse< GetMessagingStatResponse > GetMessagingStatWithHttpInfo (string by = null, int? start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetMessagingStatResponse</returns>
        public async System.Threading.Tasks.Task<GetMessagingStatResponse> GetMessagingStatAsync (string by = null, int? start = null, string end = null)
        {
             ApiResponse<GetMessagingStatResponse> localVarResponse = await GetMessagingStatAsyncWithHttpInfo(by, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return messaging statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="by">Group results by specified period: off, day, month or year. Default is off (optional, default to off)</param>
        /// <param name="start">Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetMessagingStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMessagingStatResponse>> GetMessagingStatAsyncWithHttpInfo (string by = null, int? start = null, string end = null)
        {

            var localVarPath = "/api/v2/stats/messaging";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (by != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "by", by)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMessagingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMessagingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMessagingStatResponse)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageOut</returns>
        public MessageOut GetOutboundMessage (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = GetOutboundMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageOut</returns>
        public ApiResponse< MessageOut > GetOutboundMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageOut</returns>
        public async System.Threading.Tasks.Task<MessageOut> GetOutboundMessageAsync (int? id)
        {
             ApiResponse<MessageOut> localVarResponse = await GetOutboundMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single message Get a single outgoing message.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageOut)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageOut>> GetOutboundMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetOutboundMessage");

            var localVarPath = "/api/v2/messages/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageOut>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageOut) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageOut)));
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>GetOutboundMessagesHistoryResponse</returns>
        public GetOutboundMessagesHistoryResponse GetOutboundMessagesHistory (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryResponse> localVarResponse = GetOutboundMessagesHistoryWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of GetOutboundMessagesHistoryResponse</returns>
        public ApiResponse< GetOutboundMessagesHistoryResponse > GetOutboundMessagesHistoryWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryResponse)));
        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of GetOutboundMessagesHistoryResponse</returns>
        public async System.Threading.Tasks.Task<GetOutboundMessagesHistoryResponse> GetOutboundMessagesHistoryAsync (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {
             ApiResponse<GetOutboundMessagesHistoryResponse> localVarResponse = await GetOutboundMessagesHistoryAsyncWithHttpInfo(limit, lastId, query, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get history Get outbound messages history.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. (optional)</param>
        /// <param name="query">Find message by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (GetOutboundMessagesHistoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOutboundMessagesHistoryResponse>> GetOutboundMessagesHistoryAsyncWithHttpInfo (int? limit = null, int? lastId = null, string query = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOutboundMessagesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOutboundMessagesHistoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOutboundMessagesHistoryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOutboundMessagesHistoryResponse)));
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetPushTokensResponse</returns>
        public GetPushTokensResponse GetPushTokens ()
        {
             ApiResponse<GetPushTokensResponse> localVarResponse = GetPushTokensWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetPushTokensResponse</returns>
        public ApiResponse< GetPushTokensResponse > GetPushTokensWithHttpInfo ()
        {

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushTokensResponse)));
        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetPushTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetPushTokensResponse> GetPushTokensAsync ()
        {
             ApiResponse<GetPushTokensResponse> localVarResponse = await GetPushTokensAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all device tokens assigned to the current account 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetPushTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPushTokensResponse>> GetPushTokensAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/push/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPushTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPushTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPushTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPushTokensResponse)));
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessagesIcs</returns>
        public MessagesIcs GetScheduledMessage (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = GetScheduledMessageWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessagesIcs</returns>
        public ApiResponse< MessagesIcs > GetScheduledMessageWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessagesIcs</returns>
        public async System.Threading.Tasks.Task<MessagesIcs> GetScheduledMessageAsync (int? id)
        {
             ApiResponse<MessagesIcs> localVarResponse = await GetScheduledMessageAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get message schedule. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessagesIcs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessagesIcs>> GetScheduledMessageAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetScheduledMessage");

            var localVarPath = "/api/v2/schedules/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScheduledMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessagesIcs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessagesIcs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessagesIcs)));
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SenderId</returns>
        public SenderId GetSenderId (int? id)
        {
             ApiResponse<SenderId> localVarResponse = GetSenderIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SenderId</returns>
        public ApiResponse< SenderId > GetSenderIdWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SenderId</returns>
        public async System.Threading.Tasks.Task<SenderId> GetSenderIdAsync (int? id)
        {
             ApiResponse<SenderId> localVarResponse = await GetSenderIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SenderId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SenderId>> GetSenderIdAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSenderId");

            var localVarPath = "/api/v2/senderids/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SenderId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SenderId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderId)));
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSenderIdsResponse</returns>
        public GetSenderIdsResponse GetSenderIds (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsResponse> localVarResponse = GetSenderIdsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSenderIdsResponse</returns>
        public ApiResponse< GetSenderIdsResponse > GetSenderIdsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsResponse)));
        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSenderIdsResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderIdsResponse> GetSenderIdsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetSenderIdsResponse> localVarResponse = await GetSenderIdsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all sender IDs of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSenderIdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderIdsResponse>> GetSenderIdsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderIdsResponse)));
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>GetSenderSettingsResponse</returns>
        public GetSenderSettingsResponse GetSenderSettings (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = GetSenderSettingsWithHttpInfo(country);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>ApiResponse of GetSenderSettingsResponse</returns>
        public ApiResponse< GetSenderSettingsResponse > GetSenderSettingsWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of GetSenderSettingsResponse</returns>
        public async System.Threading.Tasks.Task<GetSenderSettingsResponse> GetSenderSettingsAsync (string country = null)
        {
             ApiResponse<GetSenderSettingsResponse> localVarResponse = await GetSenderSettingsAsyncWithHttpInfo(country);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user sender settings. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Return sender settings enabled for sending to specified country. Two upper case characters (optional)</param>
        /// <returns>Task of ApiResponse (GetSenderSettingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSenderSettingsResponse>> GetSenderSettingsAsyncWithHttpInfo (string country = null)
        {

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSenderSettingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSenderSettingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSenderSettingsResponse)));
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>GetSpendingStatResponse</returns>
        public GetSpendingStatResponse GetSpendingStat (int? page = null, int? limit = null, int? start = null, int? end = null)
        {
             ApiResponse<GetSpendingStatResponse> localVarResponse = GetSpendingStatWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>ApiResponse of GetSpendingStatResponse</returns>
        public ApiResponse< GetSpendingStatResponse > GetSpendingStatWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatResponse)));
        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of GetSpendingStatResponse</returns>
        public async System.Threading.Tasks.Task<GetSpendingStatResponse> GetSpendingStatAsync (int? page = null, int? limit = null, int? start = null, int? end = null)
        {
             ApiResponse<GetSpendingStatResponse> localVarResponse = await GetSpendingStatAsyncWithHttpInfo(page, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return account spending statistics. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="start">Optional. Start date in unix timestamp format. Default is 7 days ago (optional)</param>
        /// <param name="end">Optional. End date in unix timestamp format. Default is now (optional)</param>
        /// <returns>Task of ApiResponse (GetSpendingStatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSpendingStatResponse>> GetSpendingStatAsyncWithHttpInfo (int? page = null, int? limit = null, int? start = null, int? end = null)
        {

            var localVarPath = "/api/v2/stats/spending";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpendingStat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSpendingStatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSpendingStatResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSpendingStatResponse)));
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetStateResponse</returns>
        public GetStateResponse GetState ()
        {
             ApiResponse<GetStateResponse> localVarResponse = GetStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetStateResponse</returns>
        public ApiResponse< GetStateResponse > GetStateWithHttpInfo ()
        {

            var localVarPath = "/api/v2/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateResponse)));
        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetStateResponse</returns>
        public async System.Threading.Tasks.Task<GetStateResponse> GetStateAsync ()
        {
             ApiResponse<GetStateResponse> localVarResponse = await GetStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current entities state 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetStateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetStateResponse>> GetStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetStateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetStateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetStateResponse)));
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>User</returns>
        public User GetSubaccount (int? id)
        {
             ApiResponse<User> localVarResponse = GetSubaccountWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountAsync (int? id)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSubaccount");

            var localVarPath = "/api/v2/subaccounts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>User</returns>
        public User GetSubaccounts (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = GetSubaccountsWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetSubaccountsWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetSubaccountsAsync (int? page = null, int? limit = null)
        {
             ApiResponse<User> localVarResponse = await GetSubaccountsAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subaccounts of current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetSubaccountsAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>GetSubaccountsWithTokensResponse</returns>
        public GetSubaccountsWithTokensResponse GetSubaccountsWithTokens (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = GetSubaccountsWithTokensWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of GetSubaccountsWithTokensResponse</returns>
        public ApiResponse< GetSubaccountsWithTokensResponse > GetSubaccountsWithTokensWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of GetSubaccountsWithTokensResponse</returns>
        public async System.Threading.Tasks.Task<GetSubaccountsWithTokensResponse> GetSubaccountsWithTokensAsync (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null)
        {
             ApiResponse<GetSubaccountsWithTokensResponse> localVarResponse = await GetSubaccountsWithTokensAsyncWithHttpInfo(getSubaccountsWithTokensInputObject, page, limit, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subaccounts with their REST API tokens associated with specified app name. When more than one token related to app name, last key will be returned.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getSubaccountsWithTokensInputObject"></param>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (GetSubaccountsWithTokensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubaccountsWithTokensResponse>> GetSubaccountsWithTokensAsyncWithHttpInfo (GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject, decimal? page = null, int? limit = null, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'getSubaccountsWithTokensInputObject' is set
            if (getSubaccountsWithTokensInputObject == null)
                throw new ApiException(400, "Missing required parameter 'getSubaccountsWithTokensInputObject' when calling TextMagicApi->GetSubaccountsWithTokens");

            var localVarPath = "/api/v2/subaccounts/tokens/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (getSubaccountsWithTokensInputObject != null && getSubaccountsWithTokensInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(getSubaccountsWithTokensInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getSubaccountsWithTokensInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubaccountsWithTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubaccountsWithTokensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubaccountsWithTokensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubaccountsWithTokensResponse)));
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Survey</returns>
        public Survey GetSurvey (int? id)
        {
             ApiResponse<Survey> localVarResponse = GetSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Survey</returns>
        public ApiResponse< Survey > GetSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Survey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Survey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Survey)));
        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of Survey</returns>
        public async System.Threading.Tasks.Task<Survey> GetSurveyAsync (int? id)
        {
             ApiResponse<Survey> localVarResponse = await GetSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a survey by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (Survey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Survey>> GetSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Survey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Survey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Survey)));
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SurveyNode</returns>
        public SurveyNode GetSurveyNode (int? id)
        {
             ApiResponse<SurveyNode> localVarResponse = GetSurveyNodeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SurveyNode</returns>
        public ApiResponse< SurveyNode > GetSurveyNodeWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurveyNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SurveyNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurveyNode)));
        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SurveyNode</returns>
        public async System.Threading.Tasks.Task<SurveyNode> GetSurveyNodeAsync (int? id)
        {
             ApiResponse<SurveyNode> localVarResponse = await GetSurveyNodeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a node by id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SurveyNode)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SurveyNode>> GetSurveyNodeAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SurveyNode>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SurveyNode) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SurveyNode)));
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>GetSurveyNodesResponse</returns>
        public GetSurveyNodesResponse GetSurveyNodes (int? id)
        {
             ApiResponse<GetSurveyNodesResponse> localVarResponse = GetSurveyNodesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of GetSurveyNodesResponse</returns>
        public ApiResponse< GetSurveyNodesResponse > GetSurveyNodesWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNodes");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveyNodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveyNodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveyNodesResponse)));
        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of GetSurveyNodesResponse</returns>
        public async System.Threading.Tasks.Task<GetSurveyNodesResponse> GetSurveyNodesAsync (int? id)
        {
             ApiResponse<GetSurveyNodesResponse> localVarResponse = await GetSurveyNodesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch nodes by given survey id. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (GetSurveyNodesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSurveyNodesResponse>> GetSurveyNodesAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetSurveyNodes");

            var localVarPath = "/api/v2/surveys/{id}/nodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveyNodesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveyNodesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveyNodesResponse)));
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetSurveysResponse</returns>
        public GetSurveysResponse GetSurveys (int? page = null, int? limit = null)
        {
             ApiResponse<GetSurveysResponse> localVarResponse = GetSurveysWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetSurveysResponse</returns>
        public ApiResponse< GetSurveysResponse > GetSurveysWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveysResponse)));
        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetSurveysResponse</returns>
        public async System.Threading.Tasks.Task<GetSurveysResponse> GetSurveysAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetSurveysResponse> localVarResponse = await GetSurveysAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user surveys. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetSurveysResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSurveysResponse>> GetSurveysAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/surveys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSurveys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSurveysResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSurveysResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSurveysResponse)));
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MessageTemplate</returns>
        public MessageTemplate GetTemplate (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = GetTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MessageTemplate</returns>
        public ApiResponse< MessageTemplate > GetTemplateWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MessageTemplate</returns>
        public async System.Threading.Tasks.Task<MessageTemplate> GetTemplateAsync (int? id)
        {
             ApiResponse<MessageTemplate> localVarResponse = await GetTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MessageTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageTemplate>> GetTemplateAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MessageTemplate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageTemplate)));
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Object</returns>
        public Object GetTimezones (int? full = null)
        {
             ApiResponse<Object> localVarResponse = GetTimezonesWithHttpInfo(full);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetTimezonesWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetTimezonesAsync (int? full = null)
        {
             ApiResponse<Object> localVarResponse = await GetTimezonesAsyncWithHttpInfo(full);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return all available timezone IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="full">Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetTimezonesAsyncWithHttpInfo (int? full = null)
        {

            var localVarPath = "/api/v2/timezones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (full != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "full", full)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimezones", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetUnreadMessagesTotalResponse</returns>
        public GetUnreadMessagesTotalResponse GetUnreadMessagesTotal ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = GetUnreadMessagesTotalWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetUnreadMessagesTotalResponse</returns>
        public ApiResponse< GetUnreadMessagesTotalResponse > GetUnreadMessagesTotalWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetUnreadMessagesTotalResponse</returns>
        public async System.Threading.Tasks.Task<GetUnreadMessagesTotalResponse> GetUnreadMessagesTotalAsync ()
        {
             ApiResponse<GetUnreadMessagesTotalResponse> localVarResponse = await GetUnreadMessagesTotalAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get total amount of unread messages in the current user chats. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetUnreadMessagesTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnreadMessagesTotalResponse>> GetUnreadMessagesTotalAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/chats/unread/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnreadMessagesTotal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnreadMessagesTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnreadMessagesTotalResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnreadMessagesTotalResponse)));
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UnsubscribedContact</returns>
        public UnsubscribedContact GetUnsubscribedContact (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = GetUnsubscribedContactWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UnsubscribedContact</returns>
        public ApiResponse< UnsubscribedContact > GetUnsubscribedContactWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of UnsubscribedContact</returns>
        public async System.Threading.Tasks.Task<UnsubscribedContact> GetUnsubscribedContactAsync (int? id)
        {
             ApiResponse<UnsubscribedContact> localVarResponse = await GetUnsubscribedContactAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single unsubscribed contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (UnsubscribedContact)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribedContact>> GetUnsubscribedContactAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->GetUnsubscribedContact");

            var localVarPath = "/api/v2/unsubscribers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribedContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribedContact>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribedContact) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribedContact)));
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>GetUnsubscribersResponse</returns>
        public GetUnsubscribersResponse GetUnsubscribers (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersResponse> localVarResponse = GetUnsubscribersWithHttpInfo(page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>ApiResponse of GetUnsubscribersResponse</returns>
        public ApiResponse< GetUnsubscribersResponse > GetUnsubscribersWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersResponse)));
        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of GetUnsubscribersResponse</returns>
        public async System.Threading.Tasks.Task<GetUnsubscribersResponse> GetUnsubscribersAsync (int? page = null, int? limit = null)
        {
             ApiResponse<GetUnsubscribersResponse> localVarResponse = await GetUnsubscribersAsyncWithHttpInfo(page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all contact have unsubscribed from your communication. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (GetUnsubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUnsubscribersResponse>> GetUnsubscribersAsyncWithHttpInfo (int? page = null, int? limit = null)
        {

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUnsubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUnsubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUnsubscribersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUnsubscribersResponse)));
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>GetUserDedicatedNumbersResponse</returns>
        public GetUserDedicatedNumbersResponse GetUserDedicatedNumbers (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersResponse> localVarResponse = GetUserDedicatedNumbersWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>ApiResponse of GetUserDedicatedNumbersResponse</returns>
        public ApiResponse< GetUserDedicatedNumbersResponse > GetUserDedicatedNumbersWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of GetUserDedicatedNumbersResponse</returns>
        public async System.Threading.Tasks.Task<GetUserDedicatedNumbersResponse> GetUserDedicatedNumbersAsync (int? page = null, int? limit = null, int? surveyId = null)
        {
             ApiResponse<GetUserDedicatedNumbersResponse> localVarResponse = await GetUserDedicatedNumbersAsyncWithHttpInfo(page, limit, surveyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user&#39;s dedicated numbers. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="surveyId">Fetch only that numbers which are ready for the survey (optional)</param>
        /// <returns>Task of ApiResponse (GetUserDedicatedNumbersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserDedicatedNumbersResponse>> GetUserDedicatedNumbersAsyncWithHttpInfo (int? page = null, int? limit = null, int? surveyId = null)
        {

            var localVarPath = "/api/v2/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (surveyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "surveyId", surveyId)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserDedicatedNumbers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserDedicatedNumbersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserDedicatedNumbersResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserDedicatedNumbersResponse)));
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>GetUserListsResponse</returns>
        public GetUserListsResponse GetUserLists (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetUserListsResponse> localVarResponse = GetUserListsWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>ApiResponse of GetUserListsResponse</returns>
        public ApiResponse< GetUserListsResponse > GetUserListsWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserListsResponse)));
        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of GetUserListsResponse</returns>
        public async System.Threading.Tasks.Task<GetUserListsResponse> GetUserListsAsync (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {
             ApiResponse<GetUserListsResponse> localVarResponse = await GetUserListsAsyncWithHttpInfo(page, limit, orderBy, direction, favoriteOnly, onlyMine);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all user lists. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="favoriteOnly">Return only favorite lists (optional, default to 0)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetUserListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetUserListsResponse>> GetUserListsAsyncWithHttpInfo (int? page = null, int? limit = null, string orderBy = null, string direction = null, int? favoriteOnly = null, int? onlyMine = null)
        {

            var localVarPath = "/api/v2/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (favoriteOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "favoriteOnly", favoriteOnly)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetUserListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetUserListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetUserListsResponse)));
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetVersionsResponse</returns>
        public GetVersionsResponse GetVersions ()
        {
             ApiResponse<GetVersionsResponse> localVarResponse = GetVersionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetVersionsResponse</returns>
        public ApiResponse< GetVersionsResponse > GetVersionsWithHttpInfo ()
        {

            var localVarPath = "/api/v2/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVersionsResponse)));
        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetVersionsResponse</returns>
        public async System.Threading.Tasks.Task<GetVersionsResponse> GetVersionsAsync ()
        {
             ApiResponse<GetVersionsResponse> localVarResponse = await GetVersionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get minimal valid apps versions 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetVersionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetVersionsResponse>> GetVersionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetVersionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetVersionsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetVersionsResponse)));
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void InviteSubaccount (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null)
        {
             InviteSubaccountWithHttpInfo(inviteSubaccountInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InviteSubaccountWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteSubaccountAsync (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null)
        {
             await InviteSubaccountAsyncWithHttpInfo(inviteSubaccountInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Invite new subaccount. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteSubaccountInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InviteSubaccountAsyncWithHttpInfo (InviteSubaccountInputObject inviteSubaccountInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'inviteSubaccountInputObject' is set
            if (inviteSubaccountInputObject == null)
                throw new ApiException(400, "Missing required parameter 'inviteSubaccountInputObject' when calling TextMagicApi->InviteSubaccount");

            var localVarPath = "/api/v2/subaccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (inviteSubaccountInputObject != null && inviteSubaccountInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inviteSubaccountInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inviteSubaccountInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InviteSubaccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void MarkChatsReadBulk (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null)
        {
             MarkChatsReadBulkWithHttpInfo(markChatsReadBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsReadBulkWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsReadBulkAsync (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await MarkChatsReadBulkAsyncWithHttpInfo(markChatsReadBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Mark several chats as read by chat ids or mark all chats as read 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsReadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsReadBulkAsyncWithHttpInfo (MarkChatsReadBulkInputObject markChatsReadBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'markChatsReadBulkInputObject' is set
            if (markChatsReadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsReadBulkInputObject' when calling TextMagicApi->MarkChatsReadBulk");

            var localVarPath = "/api/v2/chats/read/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (markChatsReadBulkInputObject != null && markChatsReadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsReadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsReadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsReadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void MarkChatsUnreadBulk (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null)
        {
             MarkChatsUnreadBulkWithHttpInfo(markChatsUnreadBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MarkChatsUnreadBulkWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkChatsUnreadBulkAsync (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await MarkChatsUnreadBulkAsyncWithHttpInfo(markChatsUnreadBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Mark several chats as UNread by chat ids or mark all chats as UNread 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markChatsUnreadBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MarkChatsUnreadBulkAsyncWithHttpInfo (MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'markChatsUnreadBulkInputObject' is set
            if (markChatsUnreadBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'markChatsUnreadBulkInputObject' when calling TextMagicApi->MarkChatsUnreadBulk");

            var localVarPath = "/api/v2/chats/unread/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (markChatsUnreadBulkInputObject != null && markChatsUnreadBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(markChatsUnreadBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = markChatsUnreadBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarkChatsUnreadBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void MergeSurveyNodes (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null)
        {
             MergeSurveyNodesWithHttpInfo(mergeSurveyNodesInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MergeSurveyNodesWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'mergeSurveyNodesInputObject' is set
            if (mergeSurveyNodesInputObject == null)
                throw new ApiException(400, "Missing required parameter 'mergeSurveyNodesInputObject' when calling TextMagicApi->MergeSurveyNodes");

            var localVarPath = "/api/v2/surveys/nodes/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (mergeSurveyNodesInputObject != null && mergeSurveyNodesInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeSurveyNodesInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeSurveyNodesInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MergeSurveyNodesAsync (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null)
        {
             await MergeSurveyNodesAsyncWithHttpInfo(mergeSurveyNodesInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Merge two question nodes. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mergeSurveyNodesInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MergeSurveyNodesAsyncWithHttpInfo (MergeSurveyNodesInputObject mergeSurveyNodesInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'mergeSurveyNodesInputObject' is set
            if (mergeSurveyNodesInputObject == null)
                throw new ApiException(400, "Missing required parameter 'mergeSurveyNodesInputObject' when calling TextMagicApi->MergeSurveyNodes");

            var localVarPath = "/api/v2/surveys/nodes/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (mergeSurveyNodesInputObject != null && mergeSurveyNodesInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mergeSurveyNodesInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeSurveyNodesInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeSurveyNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse MuteChat (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = MuteChatWithHttpInfo(muteChatInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > MuteChatWithHttpInfo (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> MuteChatAsync (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await MuteChatAsyncWithHttpInfo(muteChatInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set mute mode. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> MuteChatAsyncWithHttpInfo (MuteChatInputObject muteChatInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'muteChatInputObject' is set
            if (muteChatInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatInputObject' when calling TextMagicApi->MuteChat");

            var localVarPath = "/api/v2/chats/mute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (muteChatInputObject != null && muteChatInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void MuteChatsBulk (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             MuteChatsBulkWithHttpInfo(muteChatsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> MuteChatsBulkWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MuteChatsBulkAsync (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await MuteChatsBulkAsyncWithHttpInfo(muteChatsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Mute several chats by chat ids or mute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="muteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> MuteChatsBulkAsyncWithHttpInfo (MuteChatsBulkInputObject muteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'muteChatsBulkInputObject' is set
            if (muteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'muteChatsBulkInputObject' when calling TextMagicApi->MuteChatsBulk");

            var localVarPath = "/api/v2/chats/mute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (muteChatsBulkInputObject != null && muteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(muteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = muteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PingResponse</returns>
        public PingResponse Ping ()
        {
             ApiResponse<PingResponse> localVarResponse = PingWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PingResponse</returns>
        public ApiResponse< PingResponse > PingWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PingResponse</returns>
        public async System.Threading.Tasks.Task<PingResponse> PingAsync ()
        {
             ApiResponse<PingResponse> localVarResponse = await PingAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Just does a pong. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PingResponse>> PingAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/ping";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PingResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PingResponse)));
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void ReopenChatsBulk (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             ReopenChatsBulkWithHttpInfo(reopenChatsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReopenChatsBulkWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReopenChatsBulkAsync (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await ReopenChatsBulkAsyncWithHttpInfo(reopenChatsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Reopen chats by chat ids or reopen all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reopenChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReopenChatsBulkAsyncWithHttpInfo (ReopenChatsBulkInputObject reopenChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'reopenChatsBulkInputObject' is set
            if (reopenChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'reopenChatsBulkInputObject' when calling TextMagicApi->ReopenChatsBulk");

            var localVarPath = "/api/v2/chats/reopen/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (reopenChatsBulkInputObject != null && reopenChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(reopenChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reopenChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReopenChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>User</returns>
        public User RequestNewSubaccountToken (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<User> localVarResponse = RequestNewSubaccountTokenWithHttpInfo(requestNewSubaccountTokenInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > RequestNewSubaccountTokenWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> RequestNewSubaccountTokenAsync (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<User> localVarResponse = await RequestNewSubaccountTokenAsyncWithHttpInfo(requestNewSubaccountTokenInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a new REST API token for subaccount. Returning user object, key and app name.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestNewSubaccountTokenInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> RequestNewSubaccountTokenAsyncWithHttpInfo (RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'requestNewSubaccountTokenInputObject' is set
            if (requestNewSubaccountTokenInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestNewSubaccountTokenInputObject' when calling TextMagicApi->RequestNewSubaccountToken");

            var localVarPath = "/api/v2/subaccounts/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (requestNewSubaccountTokenInputObject != null && requestNewSubaccountTokenInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestNewSubaccountTokenInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestNewSubaccountTokenInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestNewSubaccountToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse RequestSenderId (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = RequestSenderIdWithHttpInfo(requestSenderIdInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > RequestSenderIdWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> RequestSenderIdAsync (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await RequestSenderIdAsyncWithHttpInfo(requestSenderIdInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request for a new Sender ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSenderIdInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> RequestSenderIdAsyncWithHttpInfo (RequestSenderIdInputObject requestSenderIdInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'requestSenderIdInputObject' is set
            if (requestSenderIdInputObject == null)
                throw new ApiException(400, "Missing required parameter 'requestSenderIdInputObject' when calling TextMagicApi->RequestSenderId");

            var localVarPath = "/api/v2/senderids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (requestSenderIdInputObject != null && requestSenderIdInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(requestSenderIdInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = requestSenderIdInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestSenderId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse ResetSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = ResetSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > ResetSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ResetSurvey");

            var localVarPath = "/api/v2/surveys/{id}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> ResetSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await ResetSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset a survey flow. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> ResetSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->ResetSurvey");

            var localVarPath = "/api/v2/surveys/{id}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>SearchChatsResponse</returns>
        public SearchChatsResponse SearchChats (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsResponse> localVarResponse = SearchChatsWithHttpInfo(page, limit, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchChatsResponse</returns>
        public ApiResponse< SearchChatsResponse > SearchChatsWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsResponse)));
        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of SearchChatsResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsResponse> SearchChatsAsync (int? page = null, int? limit = null, string query = null)
        {
             ApiResponse<SearchChatsResponse> localVarResponse = await SearchChatsAsyncWithHttpInfo(page, limit, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by inbound or outbound messages text. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsResponse>> SearchChatsAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null)
        {

            var localVarPath = "/api/v2/chats/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsResponse)));
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>SearchChatsByIdsResponse</returns>
        public SearchChatsByIdsResponse SearchChatsByIds (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsResponse> localVarResponse = SearchChatsByIdsWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>ApiResponse of SearchChatsByIdsResponse</returns>
        public ApiResponse< SearchChatsByIdsResponse > SearchChatsByIdsWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsResponse)));
        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of SearchChatsByIdsResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByIdsResponse> SearchChatsByIdsAsync (int? page = null, int? limit = null, string ids = null)
        {
             ApiResponse<SearchChatsByIdsResponse> localVarResponse = await SearchChatsByIdsAsyncWithHttpInfo(page, limit, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by IDs. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find chats by ID(s) (optional)</param>
        /// <returns>Task of ApiResponse (SearchChatsByIdsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByIdsResponse>> SearchChatsByIdsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null)
        {

            var localVarPath = "/api/v2/chats/search/ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByIdsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByIdsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByIdsResponse)));
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>SearchChatsByReceipentResponse</returns>
        public SearchChatsByReceipentResponse SearchChatsByReceipent (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentResponse> localVarResponse = SearchChatsByReceipentWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>ApiResponse of SearchChatsByReceipentResponse</returns>
        public ApiResponse< SearchChatsByReceipentResponse > SearchChatsByReceipentWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentResponse)));
        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of SearchChatsByReceipentResponse</returns>
        public async System.Threading.Tasks.Task<SearchChatsByReceipentResponse> SearchChatsByReceipentAsync (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {
             ApiResponse<SearchChatsByReceipentResponse> localVarResponse = await SearchChatsByReceipentAsyncWithHttpInfo(page, limit, query, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find chats by recipient (contact, list name or phone number). 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find chats by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <returns>Task of ApiResponse (SearchChatsByReceipentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchChatsByReceipentResponse>> SearchChatsByReceipentAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string orderBy = null)
        {

            var localVarPath = "/api/v2/chats/search/recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchChatsByReceipent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchChatsByReceipentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchChatsByReceipentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchChatsByReceipentResponse)));
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchContactsResponse</returns>
        public SearchContactsResponse SearchContacts (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsResponse> localVarResponse = SearchContactsWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchContactsResponse</returns>
        public ApiResponse< SearchContactsResponse > SearchContactsWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsResponse)));
        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchContactsResponse</returns>
        public async System.Threading.Tasks.Task<SearchContactsResponse> SearchContactsAsync (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchContactsResponse> localVarResponse = await SearchContactsAsyncWithHttpInfo(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find user contacts by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="shared">Should shared contacts to be included (optional, default to 0)</param>
        /// <param name="ids">Find contact by ID(s) (optional)</param>
        /// <param name="listId">Find contact by List ID (optional)</param>
        /// <param name="includeBlocked">Should blocked contacts to be included (optional)</param>
        /// <param name="query">Find contacts by specified search query (optional)</param>
        /// <param name="local">Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)</param>
        /// <param name="country">2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchContactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchContactsResponse>> SearchContactsAsyncWithHttpInfo (int? page = null, int? limit = null, int? shared = null, string ids = null, int? listId = null, int? includeBlocked = null, string query = null, int? local = null, string country = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (shared != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shared", shared)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter
            if (includeBlocked != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeBlocked", includeBlocked)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (local != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "local", local)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchContactsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchContactsResponse)));
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>SearchInboundMessagesResponse</returns>
        public SearchInboundMessagesResponse SearchInboundMessages (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesResponse> localVarResponse = SearchInboundMessagesWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>ApiResponse of SearchInboundMessagesResponse</returns>
        public ApiResponse< SearchInboundMessagesResponse > SearchInboundMessagesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesResponse)));
        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of SearchInboundMessagesResponse</returns>
        public async System.Threading.Tasks.Task<SearchInboundMessagesResponse> SearchInboundMessagesAsync (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {
             ApiResponse<SearchInboundMessagesResponse> localVarResponse = await SearchInboundMessagesAsyncWithHttpInfo(page, limit, ids, query, orderBy, direction, expand);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find inbound messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="query">Find recipients by specified search query (optional)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <param name="expand">Expand by adding firstName, lastName and contactId (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (SearchInboundMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchInboundMessagesResponse>> SearchInboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, string orderBy = null, string direction = null, int? expand = null)
        {

            var localVarPath = "/api/v2/replies/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchInboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchInboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchInboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchInboundMessagesResponse)));
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchListsResponse</returns>
        public SearchListsResponse SearchLists (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsResponse> localVarResponse = SearchListsWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchListsResponse</returns>
        public ApiResponse< SearchListsResponse > SearchListsWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsResponse)));
        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchListsResponse</returns>
        public async System.Threading.Tasks.Task<SearchListsResponse> SearchListsAsync (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchListsResponse> localVarResponse = await SearchListsAsyncWithHttpInfo(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find contact lists by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find lists by ID(s) (optional)</param>
        /// <param name="query">Find lists by specified search query (optional)</param>
        /// <param name="onlyMine">Return only current user lists (optional, default to 0)</param>
        /// <param name="onlyDefault">Return only default lists (optional, default to 0)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchListsResponse>> SearchListsAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string query = null, int? onlyMine = null, int? onlyDefault = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/lists/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (onlyMine != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyMine", onlyMine)); // query parameter
            if (onlyDefault != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyDefault", onlyDefault)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchListsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchListsResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>SearchOutboundMessagesResponse</returns>
        public SearchOutboundMessagesResponse SearchOutboundMessages (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesResponse> localVarResponse = SearchOutboundMessagesWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>ApiResponse of SearchOutboundMessagesResponse</returns>
        public ApiResponse< SearchOutboundMessagesResponse > SearchOutboundMessagesWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesResponse)));
        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of SearchOutboundMessagesResponse</returns>
        public async System.Threading.Tasks.Task<SearchOutboundMessagesResponse> SearchOutboundMessagesAsync (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {
             ApiResponse<SearchOutboundMessagesResponse> localVarResponse = await SearchOutboundMessagesAsyncWithHttpInfo(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find messages Find outbound messages by given parameters.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="lastId">Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)</param>
        /// <param name="ids">Find message by ID(s) (optional)</param>
        /// <param name="sessionId">Find messages by session ID (optional)</param>
        /// <param name="statuses">Find messages by status (optional)</param>
        /// <param name="includeDeleted">Search also in deleted messages (optional, default to 0)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <returns>Task of ApiResponse (SearchOutboundMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchOutboundMessagesResponse>> SearchOutboundMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, int? lastId = null, string ids = null, int? sessionId = null, string statuses = null, int? includeDeleted = null, string query = null)
        {

            var localVarPath = "/api/v2/messages/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lastId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastId", lastId)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (sessionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sessionId", sessionId)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchOutboundMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchOutboundMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchOutboundMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchOutboundMessagesResponse)));
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>SearchScheduledMessagesResponse</returns>
        public SearchScheduledMessagesResponse SearchScheduledMessages (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesResponse> localVarResponse = SearchScheduledMessagesWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>ApiResponse of SearchScheduledMessagesResponse</returns>
        public ApiResponse< SearchScheduledMessagesResponse > SearchScheduledMessagesWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesResponse)));
        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of SearchScheduledMessagesResponse</returns>
        public async System.Threading.Tasks.Task<SearchScheduledMessagesResponse> SearchScheduledMessagesAsync (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {
             ApiResponse<SearchScheduledMessagesResponse> localVarResponse = await SearchScheduledMessagesAsyncWithHttpInfo(page, limit, query, ids, status, orderBy, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find scheduled messages by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="query">Find messages by specified search query (optional)</param>
        /// <param name="ids">Find schedules by ID(s) (optional)</param>
        /// <param name="status">Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)</param>
        /// <param name="orderBy">Order results by some field. Default is id (optional, default to id)</param>
        /// <param name="direction">Order direction. Default is desc (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (SearchScheduledMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchScheduledMessagesResponse>> SearchScheduledMessagesAsyncWithHttpInfo (int? page = null, int? limit = null, string query = null, string ids = null, string status = null, string orderBy = null, string direction = null)
        {

            var localVarPath = "/api/v2/schedules/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "orderBy", orderBy)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchScheduledMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchScheduledMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchScheduledMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchScheduledMessagesResponse)));
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>SearchTemplatesResponse</returns>
        public SearchTemplatesResponse SearchTemplates (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesResponse> localVarResponse = SearchTemplatesWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>ApiResponse of SearchTemplatesResponse</returns>
        public ApiResponse< SearchTemplatesResponse > SearchTemplatesWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesResponse)));
        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of SearchTemplatesResponse</returns>
        public async System.Threading.Tasks.Task<SearchTemplatesResponse> SearchTemplatesAsync (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {
             ApiResponse<SearchTemplatesResponse> localVarResponse = await SearchTemplatesAsyncWithHttpInfo(page, limit, ids, name, content);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find user templates by given parameters. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Fetch specified results page (optional, default to 1)</param>
        /// <param name="limit">How many results to return (optional, default to 10)</param>
        /// <param name="ids">Find template by ID(s) (optional)</param>
        /// <param name="name">Find template by name (optional)</param>
        /// <param name="content">Find template by content (optional)</param>
        /// <returns>Task of ApiResponse (SearchTemplatesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchTemplatesResponse>> SearchTemplatesAsyncWithHttpInfo (int? page = null, int? limit = null, string ids = null, string name = null, string content = null)
        {

            var localVarPath = "/api/v2/templates/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ids", ids)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchTemplatesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchTemplatesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchTemplatesResponse)));
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SendEmailVerificationCode ()
        {
             SendEmailVerificationCodeWithHttpInfo();
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendEmailVerificationCodeWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/email/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendEmailVerificationCodeAsync ()
        {
             await SendEmailVerificationCodeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Send user email verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendEmailVerificationCodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/email/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendEmailVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>SendMessageResponse</returns>
        public SendMessageResponse SendMessage (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<SendMessageResponse> localVarResponse = SendMessageWithHttpInfo(sendMessageInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of SendMessageResponse</returns>
        public ApiResponse< SendMessageResponse > SendMessageWithHttpInfo (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of SendMessageResponse</returns>
        public async System.Threading.Tasks.Task<SendMessageResponse> SendMessageAsync (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<SendMessageResponse> localVarResponse = await SendMessageAsyncWithHttpInfo(sendMessageInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send message The main entrypoint to send messages. See examples above for the reference.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sendMessageInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (SendMessageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendMessageResponse>> SendMessageAsyncWithHttpInfo (SendMessageInputObject sendMessageInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'sendMessageInputObject' is set
            if (sendMessageInputObject == null)
                throw new ApiException(400, "Missing required parameter 'sendMessageInputObject' when calling TextMagicApi->SendMessage");

            var localVarPath = "/api/v2/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (sendMessageInputObject != null && sendMessageInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendMessageInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendMessageInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendMessageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendMessageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendMessageResponse)));
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void SendPhoneVerificationCode ()
        {
             SendPhoneVerificationCodeWithHttpInfo();
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SendPhoneVerificationCodeWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendPhoneVerificationCodeAsync ()
        {
             await SendPhoneVerificationCodeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Send user phone verification 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SendPhoneVerificationCodeAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v2/user/phone/verification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPhoneVerificationCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse SetChatStatus (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = SetChatStatusWithHttpInfo(setChatStatusInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > SetChatStatusWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> SetChatStatusAsync (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await SetChatStatusAsyncWithHttpInfo(setChatStatusInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set status of the chat given by ID. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setChatStatusInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> SetChatStatusAsyncWithHttpInfo (SetChatStatusInputObject setChatStatusInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'setChatStatusInputObject' is set
            if (setChatStatusInputObject == null)
                throw new ApiException(400, "Missing required parameter 'setChatStatusInputObject' when calling TextMagicApi->SetChatStatus");

            var localVarPath = "/api/v2/chats/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (setChatStatusInputObject != null && setChatStatusInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(setChatStatusInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = setChatStatusInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetChatStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse StartSurvey (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = StartSurveyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > StartSurveyWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->StartSurvey");

            var localVarPath = "/api/v2/surveys/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> StartSurveyAsync (int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await StartSurveyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start a survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> StartSurveyAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->StartSurvey");

            var localVarPath = "/api/v2/surveys/{id}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UnblockContact (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null)
        {
             UnblockContactWithHttpInfo(unblockContactInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactWithHttpInfo (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactAsync (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null)
        {
             await UnblockContactAsyncWithHttpInfo(unblockContactInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Unblock contact by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactAsyncWithHttpInfo (UnblockContactInputObject unblockContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unblockContactInputObject' is set
            if (unblockContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactInputObject' when calling TextMagicApi->UnblockContact");

            var localVarPath = "/api/v2/contacts/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unblockContactInputObject != null && unblockContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UnblockContactsBulk (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             UnblockContactsBulkWithHttpInfo(unblockContactsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnblockContactsBulkWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnblockContactsBulkAsync (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await UnblockContactsBulkAsyncWithHttpInfo(unblockContactsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Unblock several contacts by blocked contact ids or unblock all contacts 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unblockContactsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnblockContactsBulkAsyncWithHttpInfo (UnblockContactsBulkInputObject unblockContactsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unblockContactsBulkInputObject' is set
            if (unblockContactsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unblockContactsBulkInputObject' when calling TextMagicApi->UnblockContactsBulk");

            var localVarPath = "/api/v2/contacts/unblock/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unblockContactsBulkInputObject != null && unblockContactsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unblockContactsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unblockContactsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockContactsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UnmuteChatsBulk (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             UnmuteChatsBulkWithHttpInfo(unmuteChatsBulkInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UnmuteChatsBulkWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnmuteChatsBulkAsync (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
             await UnmuteChatsBulkAsyncWithHttpInfo(unmuteChatsBulkInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Unmute several chats by chat ids or unmute all chats 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unmuteChatsBulkInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UnmuteChatsBulkAsyncWithHttpInfo (UnmuteChatsBulkInputObject unmuteChatsBulkInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unmuteChatsBulkInputObject' is set
            if (unmuteChatsBulkInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unmuteChatsBulkInputObject' when calling TextMagicApi->UnmuteChatsBulk");

            var localVarPath = "/api/v2/chats/unmute/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unmuteChatsBulkInputObject != null && unmuteChatsBulkInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unmuteChatsBulkInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unmuteChatsBulkInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnmuteChatsBulk", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UnsubscribeContact (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UnsubscribeContactWithHttpInfo(unsubscribeContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UnsubscribeContactWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UnsubscribeContactAsync (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UnsubscribeContactAsyncWithHttpInfo(unsubscribeContactInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribe contact from your communication by phone number. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unsubscribeContactInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UnsubscribeContactAsyncWithHttpInfo (UnsubscribeContactInputObject unsubscribeContactInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'unsubscribeContactInputObject' is set
            if (unsubscribeContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'unsubscribeContactInputObject' when calling TextMagicApi->UnsubscribeContact");

            var localVarPath = "/api/v2/unsubscribers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (unsubscribeContactInputObject != null && unsubscribeContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(unsubscribeContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = unsubscribeContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribeContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdateBalanceNotificationSettings (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             UpdateBalanceNotificationSettingsWithHttpInfo(updateBalanceNotificationSettingsInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateBalanceNotificationSettingsWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateBalanceNotificationSettingsAsync (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdateBalanceNotificationSettingsAsyncWithHttpInfo(updateBalanceNotificationSettingsInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Update balance notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateBalanceNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBalanceNotificationSettingsAsyncWithHttpInfo (UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateBalanceNotificationSettingsInputObject' is set
            if (updateBalanceNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateBalanceNotificationSettingsInputObject' when calling TextMagicApi->UpdateBalanceNotificationSettings");

            var localVarPath = "/api/v2/user/notification/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateBalanceNotificationSettingsInputObject != null && updateBalanceNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateBalanceNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBalanceNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdateCallbackSettings (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             UpdateCallbackSettingsWithHttpInfo(updateCallbackSettingsInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCallbackSettingsWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCallbackSettingsAsync (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdateCallbackSettingsAsyncWithHttpInfo(updateCallbackSettingsInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Update callback URL settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCallbackSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCallbackSettingsAsyncWithHttpInfo (UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCallbackSettingsInputObject' is set
            if (updateCallbackSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCallbackSettingsInputObject' when calling TextMagicApi->UpdateCallbackSettings");

            var localVarPath = "/api/v2/callback/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCallbackSettingsInputObject != null && updateCallbackSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCallbackSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCallbackSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCallbackSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdateChatDesktopNotificationSettings (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             UpdateChatDesktopNotificationSettingsWithHttpInfo(updateChatDesktopNotificationSettingsInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateChatDesktopNotificationSettingsWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChatDesktopNotificationSettingsAsync (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo(updateChatDesktopNotificationSettingsInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Update chat desktop notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateChatDesktopNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChatDesktopNotificationSettingsAsyncWithHttpInfo (UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateChatDesktopNotificationSettingsInputObject' is set
            if (updateChatDesktopNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateChatDesktopNotificationSettingsInputObject' when calling TextMagicApi->UpdateChatDesktopNotificationSettings");

            var localVarPath = "/api/v2/user/desktop/notification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateChatDesktopNotificationSettingsInputObject != null && updateChatDesktopNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChatDesktopNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChatDesktopNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChatDesktopNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContact (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactWithHttpInfo(updateContactInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactAsync (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactAsyncWithHttpInfo(updateContactInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactAsyncWithHttpInfo (UpdateContactInputObject updateContactInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateContactInputObject' is set
            if (updateContactInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactInputObject' when calling TextMagicApi->UpdateContact");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContact");

            var localVarPath = "/api/v2/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateContactInputObject != null && updateContactInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateContactNote (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateContactNoteWithHttpInfo(updateContactNoteInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateContactNoteWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateContactNoteAsync (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateContactNoteAsyncWithHttpInfo(updateContactNoteInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing contact note. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateContactNoteInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateContactNoteAsyncWithHttpInfo (UpdateContactNoteInputObject updateContactNoteInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateContactNoteInputObject' is set
            if (updateContactNoteInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateContactNoteInputObject' when calling TextMagicApi->UpdateContactNote");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateContactNote");

            var localVarPath = "/api/v2/notes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateContactNoteInputObject != null && updateContactNoteInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContactNoteInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateContactNoteInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateContactNote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>UpdateCurrentUserResponse</returns>
        public UpdateCurrentUserResponse UpdateCurrentUser (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = UpdateCurrentUserWithHttpInfo(updateCurrentUserInputObject, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of UpdateCurrentUserResponse</returns>
        public ApiResponse< UpdateCurrentUserResponse > UpdateCurrentUserWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of UpdateCurrentUserResponse</returns>
        public async System.Threading.Tasks.Task<UpdateCurrentUserResponse> UpdateCurrentUserAsync (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null)
        {
             ApiResponse<UpdateCurrentUserResponse> localVarResponse = await UpdateCurrentUserAsyncWithHttpInfo(updateCurrentUserInputObject, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update current user info. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCurrentUserInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (UpdateCurrentUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateCurrentUserResponse>> UpdateCurrentUserAsyncWithHttpInfo (UpdateCurrentUserInputObject updateCurrentUserInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCurrentUserInputObject' is set
            if (updateCurrentUserInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCurrentUserInputObject' when calling TextMagicApi->UpdateCurrentUser");

            var localVarPath = "/api/v2/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCurrentUserInputObject != null && updateCurrentUserInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCurrentUserInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCurrentUserInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateCurrentUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdateCurrentUserResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateCurrentUserResponse)));
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomField (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldWithHttpInfo(updateCustomFieldInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldAsync (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldAsyncWithHttpInfo(updateCustomFieldInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing custom field. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldAsyncWithHttpInfo (UpdateCustomFieldInputObject updateCustomFieldInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCustomFieldInputObject' is set
            if (updateCustomFieldInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldInputObject' when calling TextMagicApi->UpdateCustomField");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomField");

            var localVarPath = "/api/v2/customfields/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCustomFieldInputObject != null && updateCustomFieldInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateCustomFieldValue (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateCustomFieldValueWithHttpInfo(updateCustomFieldValueInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateCustomFieldValueWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateCustomFieldValueAsync (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateCustomFieldValueAsyncWithHttpInfo(updateCustomFieldValueInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update contact&#39;s custom field value. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldValueInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateCustomFieldValueAsyncWithHttpInfo (UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject, string id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateCustomFieldValueInputObject' is set
            if (updateCustomFieldValueInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateCustomFieldValueInputObject' when calling TextMagicApi->UpdateCustomFieldValue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateCustomFieldValue");

            var localVarPath = "/api/v2/customfields/{id}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateCustomFieldValueInputObject != null && updateCustomFieldValueInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCustomFieldValueInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCustomFieldValueInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCustomFieldValue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdateInboundMessagesNotificationSettings (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             UpdateInboundMessagesNotificationSettingsWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateInboundMessagesNotificationSettingsWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateInboundMessagesNotificationSettingsAsync (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo(updateInboundMessagesNotificationSettingsInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Update inbound messages notification settings 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateInboundMessagesNotificationSettingsInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateInboundMessagesNotificationSettingsAsyncWithHttpInfo (UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateInboundMessagesNotificationSettingsInputObject' is set
            if (updateInboundMessagesNotificationSettingsInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateInboundMessagesNotificationSettingsInputObject' when calling TextMagicApi->UpdateInboundMessagesNotificationSettings");

            var localVarPath = "/api/v2/user/notification/inbound";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateInboundMessagesNotificationSettingsInputObject != null && updateInboundMessagesNotificationSettingsInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateInboundMessagesNotificationSettingsInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateInboundMessagesNotificationSettingsInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInboundMessagesNotificationSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateList (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateListWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateListWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateListAsync (int? id, UpdateListObject updateListObject = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateListAsyncWithHttpInfo(id, updateListObject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateListObject"> (optional)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateListAsyncWithHttpInfo (int? id, UpdateListObject updateListObject = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateList");

            var localVarPath = "/api/v2/lists/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (updateListObject != null && updateListObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateListObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateListObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdatePassword (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null)
        {
             UpdatePasswordWithHttpInfo(updatePasswordInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePasswordWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updatePasswordInputObject' is set
            if (updatePasswordInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordInputObject' when calling TextMagicApi->UpdatePassword");

            var localVarPath = "/api/v2/user/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updatePasswordInputObject != null && updatePasswordInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePasswordInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePasswordAsync (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdatePasswordAsyncWithHttpInfo(updatePasswordInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Change user password. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePasswordInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePasswordAsyncWithHttpInfo (UpdatePasswordInputObject updatePasswordInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updatePasswordInputObject' is set
            if (updatePasswordInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updatePasswordInputObject' when calling TextMagicApi->UpdatePassword");

            var localVarPath = "/api/v2/user/password/change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updatePasswordInputObject != null && updatePasswordInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePasswordInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePasswordInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns></returns>
        public void UpdateSenderSetting (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null)
        {
             UpdateSenderSettingWithHttpInfo(updateSenderSettingInputObject, xIgnoreNullValues);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateSenderSettingWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSenderSettingAsync (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null)
        {
             await UpdateSenderSettingAsyncWithHttpInfo(updateSenderSettingInputObject, xIgnoreNullValues);

        }

        /// <summary>
        /// Change sender settings for specified country. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSenderSettingInputObject"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSenderSettingAsyncWithHttpInfo (UpdateSenderSettingInputObject updateSenderSettingInputObject, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSenderSettingInputObject' is set
            if (updateSenderSettingInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSenderSettingInputObject' when calling TextMagicApi->UpdateSenderSetting");

            var localVarPath = "/api/v2/sender/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSenderSettingInputObject != null && updateSenderSettingInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSenderSettingInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSenderSettingInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSenderSetting", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateSurvey (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateSurveyWithHttpInfo(updateSurveyInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateSurveyWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSurveyInputObject' is set
            if (updateSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyInputObject' when calling TextMagicApi->UpdateSurvey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSurveyInputObject != null && updateSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyAsync (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateSurveyAsyncWithHttpInfo(updateSurveyInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing survey. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyAsyncWithHttpInfo (UpdateSurveyInputObject updateSurveyInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSurveyInputObject' is set
            if (updateSurveyInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyInputObject' when calling TextMagicApi->UpdateSurvey");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurvey");

            var localVarPath = "/api/v2/surveys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSurveyInputObject != null && updateSurveyInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurvey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateSurveyNode (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateSurveyNodeWithHttpInfo(updateSurveyNodeInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateSurveyNodeWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSurveyNodeInputObject' is set
            if (updateSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyNodeInputObject' when calling TextMagicApi->UpdateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSurveyNodeInputObject != null && updateSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateSurveyNodeAsync (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateSurveyNodeAsyncWithHttpInfo(updateSurveyNodeInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing node. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateSurveyNodeInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateSurveyNodeAsyncWithHttpInfo (UpdateSurveyNodeInputObject updateSurveyNodeInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateSurveyNodeInputObject' is set
            if (updateSurveyNodeInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateSurveyNodeInputObject' when calling TextMagicApi->UpdateSurveyNode");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateSurveyNode");

            var localVarPath = "/api/v2/surveys/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateSurveyNodeInputObject != null && updateSurveyNodeInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateSurveyNodeInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateSurveyNodeInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSurveyNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UpdateTemplate (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UpdateTemplateWithHttpInfo(updateTemplateInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UpdateTemplateWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UpdateTemplateAsync (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(updateTemplateInputObject, id, xIgnoreNullValues);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update existing template. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTemplateInputObject"></param>
        /// <param name="id"></param>
        /// <param name="xIgnoreNullValues"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UpdateTemplateAsyncWithHttpInfo (UpdateTemplateInputObject updateTemplateInputObject, int? id, bool? xIgnoreNullValues = null)
        {
            // verify the required parameter 'updateTemplateInputObject' is set
            if (updateTemplateInputObject == null)
                throw new ApiException(400, "Missing required parameter 'updateTemplateInputObject' when calling TextMagicApi->UpdateTemplate");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UpdateTemplate");

            var localVarPath = "/api/v2/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (xIgnoreNullValues != null) localVarHeaderParams.Add("X-Ignore-Null-Values", this.Configuration.ApiClient.ParameterToString(xIgnoreNullValues)); // header parameter
            if (updateTemplateInputObject != null && updateTemplateInputObject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateTemplateInputObject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateTemplateInputObject; // byte array
            }

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns></returns>
        public void UploadAvatar (System.IO.Stream image)
        {
             UploadAvatarWithHttpInfo(image);
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadAvatarWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadAvatarAsync (System.IO.Stream image)
        {
             await UploadAvatarAsyncWithHttpInfo(image);

        }

        /// <summary>
        /// Add an avatar for the current user. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">User avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadAvatarAsyncWithHttpInfo (System.IO.Stream image)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadAvatar");

            var localVarPath = "/api/v2/user/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadContactAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadContactAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadContactAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadContactAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadContactAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an avatar for the contact. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">Contact avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadContactAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadContactAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadContactAvatar");

            var localVarPath = "/api/v2/contacts/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadContactAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ResourceLinkResponse</returns>
        public ResourceLinkResponse UploadListAvatar (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = UploadListAvatarWithHttpInfo(image, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResourceLinkResponse</returns>
        public ApiResponse< ResourceLinkResponse > UploadListAvatarWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ResourceLinkResponse</returns>
        public async System.Threading.Tasks.Task<ResourceLinkResponse> UploadListAvatarAsync (System.IO.Stream image, int? id)
        {
             ApiResponse<ResourceLinkResponse> localVarResponse = await UploadListAvatarAsyncWithHttpInfo(image, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an avatar for the list. 
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">List avatar. Should be PNG or JPG file not more than 10 MB</param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResourceLinkResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceLinkResponse>> UploadListAvatarAsyncWithHttpInfo (System.IO.Stream image, int? id)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling TextMagicApi->UploadListAvatar");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TextMagicApi->UploadListAvatar");

            var localVarPath = "/api/v2/lists/{id}/avatar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadListAvatar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceLinkResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResourceLinkResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceLinkResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>UploadMessageAttachmentResponse</returns>
        public UploadMessageAttachmentResponse UploadMessageAttachment (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = UploadMessageAttachmentWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>ApiResponse of UploadMessageAttachmentResponse</returns>
        public ApiResponse< UploadMessageAttachmentResponse > UploadMessageAttachmentWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of UploadMessageAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadMessageAttachmentResponse> UploadMessageAttachmentAsync (System.IO.Stream file)
        {
             ApiResponse<UploadMessageAttachmentResponse> localVarResponse = await UploadMessageAttachmentAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload message attachment Upload a new file to insert it as a link.
        /// </summary>
        /// <exception cref="TextMagicClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats</param>
        /// <returns>Task of ApiResponse (UploadMessageAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadMessageAttachmentResponse>> UploadMessageAttachmentAsyncWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling TextMagicApi->UploadMessageAttachment");

            var localVarPath = "/api/v2/messages/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMessageAttachment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMessageAttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMessageAttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMessageAttachmentResponse)));
        }

    }
}
