/* 
 * TextMagic API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// ForwardedCall
    /// </summary>
    [DataContract]
    public partial class ForwardedCall :  IEquatable<ForwardedCall>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForwardedCall" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ForwardedCall() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ForwardedCall" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="callTime">callTime (required).</param>
        /// <param name="caller">caller (required).</param>
        /// <param name="via">Inbound id (required).</param>
        /// <param name="receiver">receiver (required).</param>
        public ForwardedCall(int? id = default(int?), DateTime? callTime = default(DateTime?), string caller = default(string), string via = default(string), string receiver = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ForwardedCall and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "callTime" is required (not null)
            if (callTime == null)
            {
                throw new InvalidDataException("callTime is a required property for ForwardedCall and cannot be null");
            }
            else
            {
                this.CallTime = callTime;
            }
            // to ensure "caller" is required (not null)
            if (caller == null)
            {
                throw new InvalidDataException("caller is a required property for ForwardedCall and cannot be null");
            }
            else
            {
                this.Caller = caller;
            }
            // to ensure "via" is required (not null)
            if (via == null)
            {
                throw new InvalidDataException("via is a required property for ForwardedCall and cannot be null");
            }
            else
            {
                this.Via = via;
            }
            // to ensure "receiver" is required (not null)
            if (receiver == null)
            {
                throw new InvalidDataException("receiver is a required property for ForwardedCall and cannot be null");
            }
            else
            {
                this.Receiver = receiver;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets CallTime
        /// </summary>
        [DataMember(Name="callTime", EmitDefaultValue=false)]
        public DateTime? CallTime { get; set; }

        /// <summary>
        /// Gets or Sets Caller
        /// </summary>
        [DataMember(Name="caller", EmitDefaultValue=false)]
        public string Caller { get; set; }

        /// <summary>
        /// Inbound id
        /// </summary>
        /// <value>Inbound id</value>
        [DataMember(Name="via", EmitDefaultValue=false)]
        public string Via { get; set; }

        /// <summary>
        /// Gets or Sets Receiver
        /// </summary>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForwardedCall {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CallTime: ").Append(CallTime).Append("\n");
            sb.Append("  Caller: ").Append(Caller).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ForwardedCall);
        }

        /// <summary>
        /// Returns true if ForwardedCall instances are equal
        /// </summary>
        /// <param name="input">Instance of ForwardedCall to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForwardedCall input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CallTime == input.CallTime ||
                    (this.CallTime != null &&
                    this.CallTime.Equals(input.CallTime))
                ) && 
                (
                    this.Caller == input.Caller ||
                    (this.Caller != null &&
                    this.Caller.Equals(input.Caller))
                ) && 
                (
                    this.Via == input.Via ||
                    (this.Via != null &&
                    this.Via.Equals(input.Via))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CallTime != null)
                    hashCode = hashCode * 59 + this.CallTime.GetHashCode();
                if (this.Caller != null)
                    hashCode = hashCode * 59 + this.Caller.GetHashCode();
                if (this.Via != null)
                    hashCode = hashCode * 59 + this.Via.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
