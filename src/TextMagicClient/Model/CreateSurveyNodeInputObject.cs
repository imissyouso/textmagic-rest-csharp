/* 
 * TextMagic API Documentation
 *
 * # Overview ## Introduction 1 <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// CreateSurveyNodeInputObject
    /// </summary>
    [DataContract]
    public partial class CreateSurveyNodeInputObject :  IEquatable<CreateSurveyNodeInputObject>, IValidatableObject
    {
        /// <summary>
        /// Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question
        /// </summary>
        /// <value>Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NodeTypeEnum
        {
            
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,
            
            /// <summary>
            /// Enum Q for value: q
            /// </summary>
            [EnumMember(Value = "q")]
            Q = 2
        }

        /// <summary>
        /// Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question
        /// </summary>
        /// <value>Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question</value>
        [DataMember(Name="nodeType", EmitDefaultValue=false)]
        public NodeTypeEnum? NodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSurveyNodeInputObject" /> class.
        /// </summary>
        /// <param name="nodeType">Node type. \\&#39;a\\&#39; answer; \\&#39;q\\&#39; - question.</param>
        /// <param name="label">Node label.</param>
        /// <param name="body">Node body.</param>
        /// <param name="startNode">Start node id.</param>
        /// <param name="sendDelay">Define delay for sending question to recipients after previous answer. Default is 0.</param>
        public CreateSurveyNodeInputObject(NodeTypeEnum? nodeType = default(NodeTypeEnum?), string label = default(string), string body = default(string), int? startNode = default(int?), int? sendDelay = default(int?))
        {
            this.NodeType = nodeType;
            this.Label = label;
            this.Body = body;
            this.StartNode = startNode;
            this.SendDelay = sendDelay;
        }
        

        /// <summary>
        /// Node label
        /// </summary>
        /// <value>Node label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Node body
        /// </summary>
        /// <value>Node body</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// Start node id
        /// </summary>
        /// <value>Start node id</value>
        [DataMember(Name="startNode", EmitDefaultValue=false)]
        public int? StartNode { get; set; }

        /// <summary>
        /// Define delay for sending question to recipients after previous answer. Default is 0
        /// </summary>
        /// <value>Define delay for sending question to recipients after previous answer. Default is 0</value>
        [DataMember(Name="sendDelay", EmitDefaultValue=false)]
        public int? SendDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSurveyNodeInputObject {\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  StartNode: ").Append(StartNode).Append("\n");
            sb.Append("  SendDelay: ").Append(SendDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSurveyNodeInputObject);
        }

        /// <summary>
        /// Returns true if CreateSurveyNodeInputObject instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSurveyNodeInputObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSurveyNodeInputObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeType == input.NodeType ||
                    (this.NodeType != null &&
                    this.NodeType.Equals(input.NodeType))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.StartNode == input.StartNode ||
                    (this.StartNode != null &&
                    this.StartNode.Equals(input.StartNode))
                ) && 
                (
                    this.SendDelay == input.SendDelay ||
                    (this.SendDelay != null &&
                    this.SendDelay.Equals(input.SendDelay))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeType != null)
                    hashCode = hashCode * 59 + this.NodeType.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.StartNode != null)
                    hashCode = hashCode * 59 + this.StartNode.GetHashCode();
                if (this.SendDelay != null)
                    hashCode = hashCode * 59 + this.SendDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
