/* 
 * TextMagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// MergeSurveyNodesInputObject
    /// </summary>
    [DataContract]
    public partial class MergeSurveyNodesInputObject :  IEquatable<MergeSurveyNodesInputObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeSurveyNodesInputObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MergeSurveyNodesInputObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MergeSurveyNodesInputObject" /> class.
        /// </summary>
        /// <param name="firstNode">First node id (required).</param>
        /// <param name="secondNode">Second node id (required).</param>
        public MergeSurveyNodesInputObject(int? firstNode = default(int?), int? secondNode = default(int?))
        {
            // to ensure "firstNode" is required (not null)
            if (firstNode == null)
            {
                throw new InvalidDataException("firstNode is a required property for MergeSurveyNodesInputObject and cannot be null");
            }
            else
            {
                this.FirstNode = firstNode;
            }
            // to ensure "secondNode" is required (not null)
            if (secondNode == null)
            {
                throw new InvalidDataException("secondNode is a required property for MergeSurveyNodesInputObject and cannot be null");
            }
            else
            {
                this.SecondNode = secondNode;
            }
        }
        
        /// <summary>
        /// First node id
        /// </summary>
        /// <value>First node id</value>
        [DataMember(Name="firstNode", EmitDefaultValue=false)]
        public int? FirstNode { get; set; }

        /// <summary>
        /// Second node id
        /// </summary>
        /// <value>Second node id</value>
        [DataMember(Name="secondNode", EmitDefaultValue=false)]
        public int? SecondNode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MergeSurveyNodesInputObject {\n");
            sb.Append("  FirstNode: ").Append(FirstNode).Append("\n");
            sb.Append("  SecondNode: ").Append(SecondNode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MergeSurveyNodesInputObject);
        }

        /// <summary>
        /// Returns true if MergeSurveyNodesInputObject instances are equal
        /// </summary>
        /// <param name="input">Instance of MergeSurveyNodesInputObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MergeSurveyNodesInputObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstNode == input.FirstNode ||
                    (this.FirstNode != null &&
                    this.FirstNode.Equals(input.FirstNode))
                ) && 
                (
                    this.SecondNode == input.SecondNode ||
                    (this.SecondNode != null &&
                    this.SecondNode.Equals(input.SecondNode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstNode != null)
                    hashCode = hashCode * 59 + this.FirstNode.GetHashCode();
                if (this.SecondNode != null)
                    hashCode = hashCode * 59 + this.SecondNode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
