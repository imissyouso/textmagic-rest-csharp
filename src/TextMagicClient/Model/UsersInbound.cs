/* 
 * TextMagic API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// UsersInbound
    /// </summary>
    [DataContract]
    public partial class UsersInbound :  IEquatable<UsersInbound>, IValidatableObject
    {
        /// <summary>
        /// A - active, in use (at least one message was sent/received from/to this number), U - never used before
        /// </summary>
        /// <value>A - active, in use (at least one message was sent/received from/to this number), U - never used before</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 1,
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 2
        }

        /// <summary>
        /// A - active, in use (at least one message was sent/received from/to this number), U - never used before
        /// </summary>
        /// <value>A - active, in use (at least one message was sent/received from/to this number), U - never used before</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersInbound" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UsersInbound() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UsersInbound" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="user">user (required).</param>
        /// <param name="purchasedAt">purchasedAt (required).</param>
        /// <param name="expireAt">expireAt (required).</param>
        /// <param name="status">A - active, in use (at least one message was sent/received from/to this number), U - never used before (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="phone">phone.</param>
        public UsersInbound(int? id = default(int?), User user = default(User), DateTime? purchasedAt = default(DateTime?), DateTime? expireAt = default(DateTime?), StatusEnum status = default(StatusEnum), Country country = default(Country), string phone = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "purchasedAt" is required (not null)
            if (purchasedAt == null)
            {
                throw new InvalidDataException("purchasedAt is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.PurchasedAt = purchasedAt;
            }
            // to ensure "expireAt" is required (not null)
            if (expireAt == null)
            {
                throw new InvalidDataException("expireAt is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.ExpireAt = expireAt;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for UsersInbound and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            this.Phone = phone;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets PurchasedAt
        /// </summary>
        [DataMember(Name="purchasedAt", EmitDefaultValue=false)]
        public DateTime? PurchasedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpireAt
        /// </summary>
        [DataMember(Name="expireAt", EmitDefaultValue=false)]
        public DateTime? ExpireAt { get; set; }


        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersInbound {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  PurchasedAt: ").Append(PurchasedAt).Append("\n");
            sb.Append("  ExpireAt: ").Append(ExpireAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsersInbound);
        }

        /// <summary>
        /// Returns true if UsersInbound instances are equal
        /// </summary>
        /// <param name="input">Instance of UsersInbound to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersInbound input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.PurchasedAt == input.PurchasedAt ||
                    (this.PurchasedAt != null &&
                    this.PurchasedAt.Equals(input.PurchasedAt))
                ) && 
                (
                    this.ExpireAt == input.ExpireAt ||
                    (this.ExpireAt != null &&
                    this.ExpireAt.Equals(input.ExpireAt))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.PurchasedAt != null)
                    hashCode = hashCode * 59 + this.PurchasedAt.GetHashCode();
                if (this.ExpireAt != null)
                    hashCode = hashCode * 59 + this.ExpireAt.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
