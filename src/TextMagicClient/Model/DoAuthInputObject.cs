/* 
 * TextMagic API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// DoAuthInputObject
    /// </summary>
    [DataContract]
    public partial class DoAuthInputObject :  IEquatable<DoAuthInputObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DoAuthInputObject" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DoAuthInputObject() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DoAuthInputObject" /> class.
        /// </summary>
        /// <param name="username">Account username or email (required).</param>
        /// <param name="password">Account password (required).</param>
        /// <param name="appName">Application name.</param>
        /// <param name="appVersion">Application version.</param>
        /// <param name="deviceId">Device ID for push notification service.</param>
        /// <param name="pushServiceType">required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging.</param>
        /// <param name="tfaCode">required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer).</param>
        /// <param name="tfaId">required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer).</param>
        public DoAuthInputObject(string username = default(string), string password = default(string), string appName = default(string), string appVersion = default(string), string deviceId = default(string), string pushServiceType = default(string), string tfaCode = default(string), string tfaId = default(string))
        {
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for DoAuthInputObject and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for DoAuthInputObject and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            this.AppName = appName;
            this.AppVersion = appVersion;
            this.DeviceId = deviceId;
            this.PushServiceType = pushServiceType;
            this.TfaCode = tfaCode;
            this.TfaId = tfaId;
        }
        
        /// <summary>
        /// Account username or email
        /// </summary>
        /// <value>Account username or email</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Account password
        /// </summary>
        /// <value>Account password</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Application name
        /// </summary>
        /// <value>Application name</value>
        [DataMember(Name="appName", EmitDefaultValue=false)]
        public string AppName { get; set; }

        /// <summary>
        /// Application version
        /// </summary>
        /// <value>Application version</value>
        [DataMember(Name="appVersion", EmitDefaultValue=false)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Device ID for push notification service
        /// </summary>
        /// <value>Device ID for push notification service</value>
        [DataMember(Name="deviceId", EmitDefaultValue=false)]
        public string DeviceId { get; set; }

        /// <summary>
        /// required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging
        /// </summary>
        /// <value>required when deviceId provided. Push notification service type: a for Apple Push Notifications, g for Google Cloud Messaging</value>
        [DataMember(Name="pushServiceType", EmitDefaultValue=false)]
        public string PushServiceType { get; set; }

        /// <summary>
        /// required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)
        /// </summary>
        /// <value>required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)</value>
        [DataMember(Name="tfaCode", EmitDefaultValue=false)]
        public string TfaCode { get; set; }

        /// <summary>
        /// required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)
        /// </summary>
        /// <value>required when 2FA enabled on account. 2FA challenge response (SMS code or security question answer)</value>
        [DataMember(Name="tfaId", EmitDefaultValue=false)]
        public string TfaId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DoAuthInputObject {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  PushServiceType: ").Append(PushServiceType).Append("\n");
            sb.Append("  TfaCode: ").Append(TfaCode).Append("\n");
            sb.Append("  TfaId: ").Append(TfaId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DoAuthInputObject);
        }

        /// <summary>
        /// Returns true if DoAuthInputObject instances are equal
        /// </summary>
        /// <param name="input">Instance of DoAuthInputObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DoAuthInputObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.AppName == input.AppName ||
                    (this.AppName != null &&
                    this.AppName.Equals(input.AppName))
                ) && 
                (
                    this.AppVersion == input.AppVersion ||
                    (this.AppVersion != null &&
                    this.AppVersion.Equals(input.AppVersion))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.PushServiceType == input.PushServiceType ||
                    (this.PushServiceType != null &&
                    this.PushServiceType.Equals(input.PushServiceType))
                ) && 
                (
                    this.TfaCode == input.TfaCode ||
                    (this.TfaCode != null &&
                    this.TfaCode.Equals(input.TfaCode))
                ) && 
                (
                    this.TfaId == input.TfaId ||
                    (this.TfaId != null &&
                    this.TfaId.Equals(input.TfaId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.AppName != null)
                    hashCode = hashCode * 59 + this.AppName.GetHashCode();
                if (this.AppVersion != null)
                    hashCode = hashCode * 59 + this.AppVersion.GetHashCode();
                if (this.DeviceId != null)
                    hashCode = hashCode * 59 + this.DeviceId.GetHashCode();
                if (this.PushServiceType != null)
                    hashCode = hashCode * 59 + this.PushServiceType.GetHashCode();
                if (this.TfaCode != null)
                    hashCode = hashCode * 59 + this.TfaCode.GetHashCode();
                if (this.TfaId != null)
                    hashCode = hashCode * 59 + this.TfaId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
