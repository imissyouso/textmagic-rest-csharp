/* 
 * TextMagic API Documentation
 *
 * # Overview ## Introduction <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// GetContactsAutocompleteResponse
    /// </summary>
    [DataContract]
    public partial class GetContactsAutocompleteResponse :  IEquatable<GetContactsAutocompleteResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines EntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityTypeEnum
        {
            
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1,
            
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 2,
            
            /// <summary>
            /// Enum Reply for value: reply
            /// </summary>
            [EnumMember(Value = "reply")]
            Reply = 3
        }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public EntityTypeEnum EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactsAutocompleteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetContactsAutocompleteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactsAutocompleteResponse" /> class.
        /// </summary>
        /// <param name="entityId">Id of entity. 0 if object is a Reply (required).</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="value">Id of contact/list if entityType is contact/list OR phone number if entityType is reply (required).</param>
        /// <param name="label">Name of the contact/list if entityType is contact/list OR phone number if entityType is reply (required).</param>
        /// <param name="sharedBy">If contact or list was shared by another user then name if this user will be shown (required).</param>
        /// <param name="avatar">avatar (required).</param>
        /// <param name="favorited">If contact was marked as favourited (required).</param>
        /// <param name="userId">Owner id of the contact/list (if it was shared) (required).</param>
        /// <param name="countryName">countryName (required).</param>
        /// <param name="qposition">qposition (required).</param>
        /// <param name="rposition">rposition (required).</param>
        public GetContactsAutocompleteResponse(int? entityId = default(int?), EntityTypeEnum entityType = default(EntityTypeEnum), string value = default(string), string label = default(string), string sharedBy = default(string), string avatar = default(string), bool? favorited = default(bool?), int? userId = default(int?), string countryName = default(string), int? qposition = default(int?), int? rposition = default(int?))
        {
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new InvalidDataException("entityId is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.EntityId = entityId;
            }
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new InvalidDataException("entityType is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.EntityType = entityType;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new InvalidDataException("label is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Label = label;
            }
            // to ensure "sharedBy" is required (not null)
            if (sharedBy == null)
            {
                throw new InvalidDataException("sharedBy is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.SharedBy = sharedBy;
            }
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new InvalidDataException("avatar is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Avatar = avatar;
            }
            // to ensure "favorited" is required (not null)
            if (favorited == null)
            {
                throw new InvalidDataException("favorited is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Favorited = favorited;
            }
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new InvalidDataException("userId is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.UserId = userId;
            }
            // to ensure "countryName" is required (not null)
            if (countryName == null)
            {
                throw new InvalidDataException("countryName is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.CountryName = countryName;
            }
            // to ensure "qposition" is required (not null)
            if (qposition == null)
            {
                throw new InvalidDataException("qposition is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Qposition = qposition;
            }
            // to ensure "rposition" is required (not null)
            if (rposition == null)
            {
                throw new InvalidDataException("rposition is a required property for GetContactsAutocompleteResponse and cannot be null");
            }
            else
            {
                this.Rposition = rposition;
            }
        }
        
        /// <summary>
        /// Id of entity. 0 if object is a Reply
        /// </summary>
        /// <value>Id of entity. 0 if object is a Reply</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public int? EntityId { get; set; }


        /// <summary>
        /// Id of contact/list if entityType is contact/list OR phone number if entityType is reply
        /// </summary>
        /// <value>Id of contact/list if entityType is contact/list OR phone number if entityType is reply</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Name of the contact/list if entityType is contact/list OR phone number if entityType is reply
        /// </summary>
        /// <value>Name of the contact/list if entityType is contact/list OR phone number if entityType is reply</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// If contact or list was shared by another user then name if this user will be shown
        /// </summary>
        /// <value>If contact or list was shared by another user then name if this user will be shown</value>
        [DataMember(Name="sharedBy", EmitDefaultValue=false)]
        public string SharedBy { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// If contact was marked as favourited
        /// </summary>
        /// <value>If contact was marked as favourited</value>
        [DataMember(Name="favorited", EmitDefaultValue=false)]
        public bool? Favorited { get; set; }

        /// <summary>
        /// Owner id of the contact/list (if it was shared)
        /// </summary>
        /// <value>Owner id of the contact/list (if it was shared)</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets Qposition
        /// </summary>
        [DataMember(Name="qposition", EmitDefaultValue=false)]
        public int? Qposition { get; set; }

        /// <summary>
        /// Gets or Sets Rposition
        /// </summary>
        [DataMember(Name="rposition", EmitDefaultValue=false)]
        public int? Rposition { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetContactsAutocompleteResponse {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  SharedBy: ").Append(SharedBy).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Favorited: ").Append(Favorited).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Qposition: ").Append(Qposition).Append("\n");
            sb.Append("  Rposition: ").Append(Rposition).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetContactsAutocompleteResponse);
        }

        /// <summary>
        /// Returns true if GetContactsAutocompleteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetContactsAutocompleteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetContactsAutocompleteResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.SharedBy == input.SharedBy ||
                    (this.SharedBy != null &&
                    this.SharedBy.Equals(input.SharedBy))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Favorited == input.Favorited ||
                    (this.Favorited != null &&
                    this.Favorited.Equals(input.Favorited))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Qposition == input.Qposition ||
                    (this.Qposition != null &&
                    this.Qposition.Equals(input.Qposition))
                ) && 
                (
                    this.Rposition == input.Rposition ||
                    (this.Rposition != null &&
                    this.Rposition.Equals(input.Rposition))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.SharedBy != null)
                    hashCode = hashCode * 59 + this.SharedBy.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Favorited != null)
                    hashCode = hashCode * 59 + this.Favorited.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.Qposition != null)
                    hashCode = hashCode * 59 + this.Qposition.GetHashCode();
                if (this.Rposition != null)
                    hashCode = hashCode * 59 + this.Rposition.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
