/* 
 * TextMagic API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// MessageOut
    /// </summary>
    [DataContract]
    public partial class MessageOut :  IEquatable<MessageOut>, IValidatableObject
    {
        /// <summary>
        /// Delivery status of the message. See [message delivery statuses](http://docs.textmagictesting.com/#section/Delivery-status-codes) for details. 
        /// </summary>
        /// <value>Delivery status of the message. See [message delivery statuses](http://docs.textmagictesting.com/#section/Delivery-status-codes) for details. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Q for value: q
            /// </summary>
            [EnumMember(Value = "q")]
            Q = 1,
            
            /// <summary>
            /// Enum S for value: s
            /// </summary>
            [EnumMember(Value = "s")]
            S = 2,
            
            /// <summary>
            /// Enum E for value: e
            /// </summary>
            [EnumMember(Value = "e")]
            E = 3,
            
            /// <summary>
            /// Enum R for value: r
            /// </summary>
            [EnumMember(Value = "r")]
            R = 4,
            
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 5,
            
            /// <summary>
            /// Enum D for value: d
            /// </summary>
            [EnumMember(Value = "d")]
            D = 6,
            
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 7,
            
            /// <summary>
            /// Enum F for value: f
            /// </summary>
            [EnumMember(Value = "f")]
            F = 8,
            
            /// <summary>
            /// Enum U for value: u
            /// </summary>
            [EnumMember(Value = "u")]
            U = 9,
            
            /// <summary>
            /// Enum J for value: j
            /// </summary>
            [EnumMember(Value = "j")]
            J = 10,
            
            /// <summary>
            /// Enum I for value: i
            /// </summary>
            [EnumMember(Value = "i")]
            I = 11,
            
            /// <summary>
            /// Enum P for value: p
            /// </summary>
            [EnumMember(Value = "p")]
            P = 12,
            
            /// <summary>
            /// Enum H for value: h
            /// </summary>
            [EnumMember(Value = "h")]
            H = 13
        }

        /// <summary>
        /// Delivery status of the message. See [message delivery statuses](http://docs.textmagictesting.com/#section/Delivery-status-codes) for details. 
        /// </summary>
        /// <value>Delivery status of the message. See [message delivery statuses](http://docs.textmagictesting.com/#section/Delivery-status-codes) for details. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageOut" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageOut() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageOut" /> class.
        /// </summary>
        /// <param name="id">Message ID. (required).</param>
        /// <param name="sender">Message sender (phone number or alphanumeric Sender ID)..</param>
        /// <param name="receiver">Recipient phone number..</param>
        /// <param name="text">text (required).</param>
        /// <param name="status">Delivery status of the message. See [message delivery statuses](http://docs.textmagictesting.com/#section/Delivery-status-codes) for details.  (required).</param>
        /// <param name="contactId">Recipient contact ID. (required).</param>
        /// <param name="sessionId">Message Session ID of a Message. (required).</param>
        /// <param name="messageTime">Sending time. (required).</param>
        /// <param name="avatar">avatar (required).</param>
        /// <param name="deleted">Indicates that message has been deleted..</param>
        /// <param name="charset">Message charset. Could be: *   **ISO-8859-1** for plaintext SMS *   **UTF-16BE** for Unicode SMS  (required).</param>
        /// <param name="charsetLabel">charsetLabel (required).</param>
        /// <param name="firstName">Contact first name. Could be substituted from your [Contacts](http://docs.textmagictesting.com/#tag/Contacts) (even if you submitted phone number instead of contact ID).  (required).</param>
        /// <param name="lastName">Contact last name. (required).</param>
        /// <param name="country">Two-letter ISO country code of the recipient phone number.  (required).</param>
        /// <param name="phone">Receipent phone number..</param>
        /// <param name="price">Message price..</param>
        /// <param name="partsCount">Message parts (multiples of 160 characters) count. (required).</param>
        /// <param name="fromEmail">fromEmail.</param>
        /// <param name="fromNumber">Phone number which is used to send SMS..</param>
        /// <param name="smscId">smscId.</param>
        /// <param name="contact">contact.</param>
        /// <param name="source">source.</param>
        /// <param name="deliveredCount">deliveredCount.</param>
        /// <param name="numbersCount">numbersCount.</param>
        /// <param name="userId">userId.</param>
        /// <param name="creditsPrice">creditsPrice.</param>
        /// <param name="chars">chars.</param>
        public MessageOut(int? id = default(int?), string sender = default(string), string receiver = default(string), string text = default(string), StatusEnum status = default(StatusEnum), int? contactId = default(int?), int? sessionId = default(int?), DateTime? messageTime = default(DateTime?), string avatar = default(string), bool? deleted = default(bool?), string charset = default(string), string charsetLabel = default(string), string firstName = default(string), string lastName = default(string), string country = default(string), string phone = default(string), float? price = default(float?), int? partsCount = default(int?), string fromEmail = default(string), string fromNumber = default(string), string smscId = default(string), string contact = default(string), string source = default(string), int? deliveredCount = default(int?), int? numbersCount = default(int?), int? userId = default(int?), string creditsPrice = default(string), int? chars = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Text = text;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "contactId" is required (not null)
            if (contactId == null)
            {
                throw new InvalidDataException("contactId is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.ContactId = contactId;
            }
            // to ensure "sessionId" is required (not null)
            if (sessionId == null)
            {
                throw new InvalidDataException("sessionId is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.SessionId = sessionId;
            }
            // to ensure "messageTime" is required (not null)
            if (messageTime == null)
            {
                throw new InvalidDataException("messageTime is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.MessageTime = messageTime;
            }
            // to ensure "avatar" is required (not null)
            if (avatar == null)
            {
                throw new InvalidDataException("avatar is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Avatar = avatar;
            }
            // to ensure "charset" is required (not null)
            if (charset == null)
            {
                throw new InvalidDataException("charset is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Charset = charset;
            }
            // to ensure "charsetLabel" is required (not null)
            if (charsetLabel == null)
            {
                throw new InvalidDataException("charsetLabel is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.CharsetLabel = charsetLabel;
            }
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new InvalidDataException("firstName is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.FirstName = firstName;
            }
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new InvalidDataException("lastName is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.LastName = lastName;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "partsCount" is required (not null)
            if (partsCount == null)
            {
                throw new InvalidDataException("partsCount is a required property for MessageOut and cannot be null");
            }
            else
            {
                this.PartsCount = partsCount;
            }
            this.Sender = sender;
            this.Receiver = receiver;
            this.Deleted = deleted;
            this.Phone = phone;
            this.Price = price;
            this.FromEmail = fromEmail;
            this.FromNumber = fromNumber;
            this.SmscId = smscId;
            this.Contact = contact;
            this.Source = source;
            this.DeliveredCount = deliveredCount;
            this.NumbersCount = numbersCount;
            this.UserId = userId;
            this.CreditsPrice = creditsPrice;
            this.Chars = chars;
        }
        
        /// <summary>
        /// Message ID.
        /// </summary>
        /// <value>Message ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Message sender (phone number or alphanumeric Sender ID).
        /// </summary>
        /// <value>Message sender (phone number or alphanumeric Sender ID).</value>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// Recipient phone number.
        /// </summary>
        /// <value>Recipient phone number.</value>
        [DataMember(Name="receiver", EmitDefaultValue=false)]
        public string Receiver { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Recipient contact ID.
        /// </summary>
        /// <value>Recipient contact ID.</value>
        [DataMember(Name="contactId", EmitDefaultValue=false)]
        public int? ContactId { get; set; }

        /// <summary>
        /// Message Session ID of a Message.
        /// </summary>
        /// <value>Message Session ID of a Message.</value>
        [DataMember(Name="sessionId", EmitDefaultValue=false)]
        public int? SessionId { get; set; }

        /// <summary>
        /// Sending time.
        /// </summary>
        /// <value>Sending time.</value>
        [DataMember(Name="messageTime", EmitDefaultValue=false)]
        public DateTime? MessageTime { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Indicates that message has been deleted.
        /// </summary>
        /// <value>Indicates that message has been deleted.</value>
        [DataMember(Name="deleted", EmitDefaultValue=false)]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Message charset. Could be: *   **ISO-8859-1** for plaintext SMS *   **UTF-16BE** for Unicode SMS 
        /// </summary>
        /// <value>Message charset. Could be: *   **ISO-8859-1** for plaintext SMS *   **UTF-16BE** for Unicode SMS </value>
        [DataMember(Name="charset", EmitDefaultValue=false)]
        public string Charset { get; set; }

        /// <summary>
        /// Gets or Sets CharsetLabel
        /// </summary>
        [DataMember(Name="charsetLabel", EmitDefaultValue=false)]
        public string CharsetLabel { get; set; }

        /// <summary>
        /// Contact first name. Could be substituted from your [Contacts](http://docs.textmagictesting.com/#tag/Contacts) (even if you submitted phone number instead of contact ID). 
        /// </summary>
        /// <value>Contact first name. Could be substituted from your [Contacts](http://docs.textmagictesting.com/#tag/Contacts) (even if you submitted phone number instead of contact ID). </value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Contact last name.
        /// </summary>
        /// <value>Contact last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Two-letter ISO country code of the recipient phone number. 
        /// </summary>
        /// <value>Two-letter ISO country code of the recipient phone number. </value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Receipent phone number.
        /// </summary>
        /// <value>Receipent phone number.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Message price.
        /// </summary>
        /// <value>Message price.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public float? Price { get; set; }

        /// <summary>
        /// Message parts (multiples of 160 characters) count.
        /// </summary>
        /// <value>Message parts (multiples of 160 characters) count.</value>
        [DataMember(Name="partsCount", EmitDefaultValue=false)]
        public int? PartsCount { get; set; }

        /// <summary>
        /// Gets or Sets FromEmail
        /// </summary>
        [DataMember(Name="fromEmail", EmitDefaultValue=false)]
        public string FromEmail { get; set; }

        /// <summary>
        /// Phone number which is used to send SMS.
        /// </summary>
        /// <value>Phone number which is used to send SMS.</value>
        [DataMember(Name="fromNumber", EmitDefaultValue=false)]
        public string FromNumber { get; set; }

        /// <summary>
        /// Gets or Sets SmscId
        /// </summary>
        [DataMember(Name="smscId", EmitDefaultValue=false)]
        public string SmscId { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public string Contact { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredCount
        /// </summary>
        [DataMember(Name="deliveredCount", EmitDefaultValue=false)]
        public int? DeliveredCount { get; set; }

        /// <summary>
        /// Gets or Sets NumbersCount
        /// </summary>
        [DataMember(Name="numbersCount", EmitDefaultValue=false)]
        public int? NumbersCount { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreditsPrice
        /// </summary>
        [DataMember(Name="creditsPrice", EmitDefaultValue=false)]
        public string CreditsPrice { get; set; }

        /// <summary>
        /// Gets or Sets Chars
        /// </summary>
        [DataMember(Name="chars", EmitDefaultValue=false)]
        public int? Chars { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageOut {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  MessageTime: ").Append(MessageTime).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  CharsetLabel: ").Append(CharsetLabel).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PartsCount: ").Append(PartsCount).Append("\n");
            sb.Append("  FromEmail: ").Append(FromEmail).Append("\n");
            sb.Append("  FromNumber: ").Append(FromNumber).Append("\n");
            sb.Append("  SmscId: ").Append(SmscId).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  DeliveredCount: ").Append(DeliveredCount).Append("\n");
            sb.Append("  NumbersCount: ").Append(NumbersCount).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreditsPrice: ").Append(CreditsPrice).Append("\n");
            sb.Append("  Chars: ").Append(Chars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageOut);
        }

        /// <summary>
        /// Returns true if MessageOut instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageOut to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageOut input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Receiver == input.Receiver ||
                    (this.Receiver != null &&
                    this.Receiver.Equals(input.Receiver))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ContactId == input.ContactId ||
                    (this.ContactId != null &&
                    this.ContactId.Equals(input.ContactId))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.MessageTime == input.MessageTime ||
                    (this.MessageTime != null &&
                    this.MessageTime.Equals(input.MessageTime))
                ) && 
                (
                    this.Avatar == input.Avatar ||
                    (this.Avatar != null &&
                    this.Avatar.Equals(input.Avatar))
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    (this.Deleted != null &&
                    this.Deleted.Equals(input.Deleted))
                ) && 
                (
                    this.Charset == input.Charset ||
                    (this.Charset != null &&
                    this.Charset.Equals(input.Charset))
                ) && 
                (
                    this.CharsetLabel == input.CharsetLabel ||
                    (this.CharsetLabel != null &&
                    this.CharsetLabel.Equals(input.CharsetLabel))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.PartsCount == input.PartsCount ||
                    (this.PartsCount != null &&
                    this.PartsCount.Equals(input.PartsCount))
                ) && 
                (
                    this.FromEmail == input.FromEmail ||
                    (this.FromEmail != null &&
                    this.FromEmail.Equals(input.FromEmail))
                ) && 
                (
                    this.FromNumber == input.FromNumber ||
                    (this.FromNumber != null &&
                    this.FromNumber.Equals(input.FromNumber))
                ) && 
                (
                    this.SmscId == input.SmscId ||
                    (this.SmscId != null &&
                    this.SmscId.Equals(input.SmscId))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.DeliveredCount == input.DeliveredCount ||
                    (this.DeliveredCount != null &&
                    this.DeliveredCount.Equals(input.DeliveredCount))
                ) && 
                (
                    this.NumbersCount == input.NumbersCount ||
                    (this.NumbersCount != null &&
                    this.NumbersCount.Equals(input.NumbersCount))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreditsPrice == input.CreditsPrice ||
                    (this.CreditsPrice != null &&
                    this.CreditsPrice.Equals(input.CreditsPrice))
                ) && 
                (
                    this.Chars == input.Chars ||
                    (this.Chars != null &&
                    this.Chars.Equals(input.Chars))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Receiver != null)
                    hashCode = hashCode * 59 + this.Receiver.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ContactId != null)
                    hashCode = hashCode * 59 + this.ContactId.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.MessageTime != null)
                    hashCode = hashCode * 59 + this.MessageTime.GetHashCode();
                if (this.Avatar != null)
                    hashCode = hashCode * 59 + this.Avatar.GetHashCode();
                if (this.Deleted != null)
                    hashCode = hashCode * 59 + this.Deleted.GetHashCode();
                if (this.Charset != null)
                    hashCode = hashCode * 59 + this.Charset.GetHashCode();
                if (this.CharsetLabel != null)
                    hashCode = hashCode * 59 + this.CharsetLabel.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.PartsCount != null)
                    hashCode = hashCode * 59 + this.PartsCount.GetHashCode();
                if (this.FromEmail != null)
                    hashCode = hashCode * 59 + this.FromEmail.GetHashCode();
                if (this.FromNumber != null)
                    hashCode = hashCode * 59 + this.FromNumber.GetHashCode();
                if (this.SmscId != null)
                    hashCode = hashCode * 59 + this.SmscId.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.DeliveredCount != null)
                    hashCode = hashCode * 59 + this.DeliveredCount.GetHashCode();
                if (this.NumbersCount != null)
                    hashCode = hashCode * 59 + this.NumbersCount.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CreditsPrice != null)
                    hashCode = hashCode * 59 + this.CreditsPrice.GetHashCode();
                if (this.Chars != null)
                    hashCode = hashCode * 59 + this.Chars.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
