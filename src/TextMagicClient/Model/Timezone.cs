/* 
 * TextMagic API Documentation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TextMagicClient.Client.SwaggerDateConverter;

namespace TextMagicClient.Model
{
    /// <summary>
    /// Timezone
    /// </summary>
    [DataContract]
    public partial class Timezone :  IEquatable<Timezone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Timezone" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Timezone() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Timezone" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="area">area (required).</param>
        /// <param name="dst">dst (required).</param>
        /// <param name="offset">offset (required).</param>
        /// <param name="timezone">timezone (required).</param>
        public Timezone(int? id = default(int?), string area = default(string), int? dst = default(int?), int? offset = default(int?), string timezone = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Timezone and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new InvalidDataException("area is a required property for Timezone and cannot be null");
            }
            else
            {
                this.Area = area;
            }
            // to ensure "dst" is required (not null)
            if (dst == null)
            {
                throw new InvalidDataException("dst is a required property for Timezone and cannot be null");
            }
            else
            {
                this.Dst = dst;
            }
            // to ensure "offset" is required (not null)
            if (offset == null)
            {
                throw new InvalidDataException("offset is a required property for Timezone and cannot be null");
            }
            else
            {
                this.Offset = offset;
            }
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new InvalidDataException("timezone is a required property for Timezone and cannot be null");
            }
            else
            {
                this._Timezone = timezone;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="area", EmitDefaultValue=false)]
        public string Area { get; set; }

        /// <summary>
        /// Gets or Sets Dst
        /// </summary>
        [DataMember(Name="dst", EmitDefaultValue=false)]
        public int? Dst { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// Gets or Sets _Timezone
        /// </summary>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string _Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timezone {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Dst: ").Append(Dst).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  _Timezone: ").Append(_Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Timezone);
        }

        /// <summary>
        /// Returns true if Timezone instances are equal
        /// </summary>
        /// <param name="input">Instance of Timezone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timezone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Dst == input.Dst ||
                    (this.Dst != null &&
                    this.Dst.Equals(input.Dst))
                ) && 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this._Timezone == input._Timezone ||
                    (this._Timezone != null &&
                    this._Timezone.Equals(input._Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.Dst != null)
                    hashCode = hashCode * 59 + this.Dst.GetHashCode();
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this._Timezone != null)
                    hashCode = hashCode * 59 + this._Timezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
