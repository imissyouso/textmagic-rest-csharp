/* 
 * TextMagic API Documentation
 *
 * # Overview ## Introduction <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 
 *
 * OpenAPI spec version: 2
 * Contact: support@textmagi.biz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TextMagicClient.Client;
using TextMagicClient.Api;
using TextMagicClient.Model;

namespace TextMagicClient.Test
{
    /// <summary>
    ///  Class for testing TextMagicApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TextMagicApiTests
    {
        private TextMagicApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TextMagicApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TextMagicApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TextMagicApi
            //Assert.IsInstanceOfType(typeof(TextMagicApi), instance, "instance is a TextMagicApi");
        }

        
        /// <summary>
        /// Test AssignContactsToList
        /// </summary>
        [Test]
        public void AssignContactsToListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AssignContactsToListInputObject assignContactsToListInputObject = null;
            //int? id = null;
            //var response = instance.AssignContactsToList(assignContactsToListInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test BlockContact
        /// </summary>
        [Test]
        public void BlockContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BlockContactInputObject blockContactInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.BlockContact(blockContactInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test BuyDedicatedNumber
        /// </summary>
        [Test]
        public void BuyDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuyDedicatedNumberInputObject buyDedicatedNumberInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.BuyDedicatedNumber(buyDedicatedNumberInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test CancelSurvey
        /// </summary>
        [Test]
        public void CancelSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.CancelSurvey(id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CheckPhoneVerificationCode
        /// </summary>
        [Test]
        public void CheckPhoneVerificationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckPhoneVerificationCodeInputObject checkPhoneVerificationCodeInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.CheckPhoneVerificationCode(checkPhoneVerificationCodeInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test ClearAndAssignContactsToList
        /// </summary>
        [Test]
        public void ClearAndAssignContactsToListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClearAndAssignContactsToListInputObject clearAndAssignContactsToListInputObject = null;
            //int? id = null;
            //var response = instance.ClearAndAssignContactsToList(clearAndAssignContactsToListInputObject, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CloseChatsBulk
        /// </summary>
        [Test]
        public void CloseChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseChatsBulkInputObject closeChatsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.CloseChatsBulk(closeChatsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test CloseReadChats
        /// </summary>
        [Test]
        public void CloseReadChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CloseReadChats();
            
        }
        
        /// <summary>
        /// Test CloseSubaccount
        /// </summary>
        [Test]
        public void CloseSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.CloseSubaccount(id);
            
        }
        
        /// <summary>
        /// Test CreateContact
        /// </summary>
        [Test]
        public void CreateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContactInputObject createContactInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateContact(createContactInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateContactNote
        /// </summary>
        [Test]
        public void CreateContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContactNoteInputObject createContactNoteInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateContactNote(createContactNoteInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateCustomField
        /// </summary>
        [Test]
        public void CreateCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateCustomFieldInputObject createCustomFieldInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateCustomField(createCustomFieldInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateList
        /// </summary>
        [Test]
        public void CreateListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateListInputObject createListInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateList(createListInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreatePushToken
        /// </summary>
        [Test]
        public void CreatePushTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreatePushTokenInputObject createPushTokenInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.CreatePushToken(createPushTokenInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test CreateSurvey
        /// </summary>
        [Test]
        public void CreateSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSurveyInputObject createSurveyInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateSurvey(createSurveyInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateSurveyNode
        /// </summary>
        [Test]
        public void CreateSurveyNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSurveyNodeInputObject createSurveyNodeInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateSurveyNode(createSurveyNodeInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test CreateTemplate
        /// </summary>
        [Test]
        public void CreateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateTemplateInputObject createTemplateInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.CreateTemplate(createTemplateInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test DeleteAllContacts
        /// </summary>
        [Test]
        public void DeleteAllContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllContacts();
            
        }
        
        /// <summary>
        /// Test DeleteAllOutboundMessages
        /// </summary>
        [Test]
        public void DeleteAllOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAllOutboundMessages();
            
        }
        
        /// <summary>
        /// Test DeleteAvatar
        /// </summary>
        [Test]
        public void DeleteAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DeleteAvatar();
            
        }
        
        /// <summary>
        /// Test DeleteChatMessages
        /// </summary>
        [Test]
        public void DeleteChatMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteChatMessagesBulkInputObject deleteChatMessagesBulkInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteChatMessages(deleteChatMessagesBulkInputObject, id, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteChatsBulk
        /// </summary>
        [Test]
        public void DeleteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteChatsBulkInputObject deleteChatsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteChatsBulk(deleteChatsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteContact
        /// </summary>
        [Test]
        public void DeleteContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContact(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactAvatar
        /// </summary>
        [Test]
        public void DeleteContactAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContactAvatar(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactNote
        /// </summary>
        [Test]
        public void DeleteContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteContactNote(id);
            
        }
        
        /// <summary>
        /// Test DeleteContactNotesBulk
        /// </summary>
        [Test]
        public void DeleteContactNotesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //DeleteContactNotesBulkInputObject deleteContactNotesBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteContactNotesBulk(id, deleteContactNotesBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteContactsByIds
        /// </summary>
        [Test]
        public void DeleteContactsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteContactsByIdsInputObject deleteContactsByIdsInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteContactsByIds(deleteContactsByIdsInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteContactsFromList
        /// </summary>
        [Test]
        public void DeleteContactsFromListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteContacsFromListObject deleteContacsFromListObject = null;
            //int? id = null;
            //instance.DeleteContactsFromList(deleteContacsFromListObject, id);
            
        }
        
        /// <summary>
        /// Test DeleteCustomField
        /// </summary>
        [Test]
        public void DeleteCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteCustomField(id);
            
        }
        
        /// <summary>
        /// Test DeleteDedicatedNumber
        /// </summary>
        [Test]
        public void DeleteDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteDedicatedNumber(id);
            
        }
        
        /// <summary>
        /// Test DeleteInboundMessage
        /// </summary>
        [Test]
        public void DeleteInboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteInboundMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteInboundMessagesBulk
        /// </summary>
        [Test]
        public void DeleteInboundMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteInboundMessagesBulkInputObject deleteInboundMessagesBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteInboundMessagesBulk(deleteInboundMessagesBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteList
        /// </summary>
        [Test]
        public void DeleteListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteList(id);
            
        }
        
        /// <summary>
        /// Test DeleteListAvatar
        /// </summary>
        [Test]
        public void DeleteListAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteListAvatar(id);
            
        }
        
        /// <summary>
        /// Test DeleteListContactsBulk
        /// </summary>
        [Test]
        public void DeleteListContactsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteListContactsBulkInputObject deleteListContactsBulkInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteListContactsBulk(deleteListContactsBulkInputObject, id, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteListsBulk
        /// </summary>
        [Test]
        public void DeleteListsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteListsBulkInputObject deleteListsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteListsBulk(deleteListsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteMessageSession
        /// </summary>
        [Test]
        public void DeleteMessageSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteMessageSession(id);
            
        }
        
        /// <summary>
        /// Test DeleteMessageSessionsBulk
        /// </summary>
        [Test]
        public void DeleteMessageSessionsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteMessageSessionsBulkInputObject deleteMessageSessionsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteMessageSessionsBulk(deleteMessageSessionsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteOutboundMessage
        /// </summary>
        [Test]
        public void DeleteOutboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteOutboundMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteOutboundMessagesBulk
        /// </summary>
        [Test]
        public void DeleteOutboundMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteOutboundMessagesBulkInputObject deleteOutboundMessagesBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteOutboundMessagesBulk(deleteOutboundMessagesBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeletePushToken
        /// </summary>
        [Test]
        public void DeletePushTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //int? deviceId = null;
            //instance.DeletePushToken(type, deviceId);
            
        }
        
        /// <summary>
        /// Test DeleteScheduledMessage
        /// </summary>
        [Test]
        public void DeleteScheduledMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteScheduledMessage(id);
            
        }
        
        /// <summary>
        /// Test DeleteScheduledMessagesBulk
        /// </summary>
        [Test]
        public void DeleteScheduledMessagesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteScheduledMessagesBulkInputObject deleteScheduledMessagesBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteScheduledMessagesBulk(deleteScheduledMessagesBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DeleteSenderId
        /// </summary>
        [Test]
        public void DeleteSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteSenderId(id);
            
        }
        
        /// <summary>
        /// Test DeleteSurvey
        /// </summary>
        [Test]
        public void DeleteSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteSurvey(id);
            
        }
        
        /// <summary>
        /// Test DeleteSurveyNode
        /// </summary>
        [Test]
        public void DeleteSurveyNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteSurveyNode(id);
            
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Test]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteTemplate(id);
            
        }
        
        /// <summary>
        /// Test DeleteTemplatesBulk
        /// </summary>
        [Test]
        public void DeleteTemplatesBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteTemplatesBulkInputObject deleteTemplatesBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.DeleteTemplatesBulk(deleteTemplatesBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test DoAuth
        /// </summary>
        [Test]
        public void DoAuthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DoAuthInputObject doAuthInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.DoAuth(doAuthInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<DoAuthResponse> (response, "response is DoAuthResponse");
        }
        
        /// <summary>
        /// Test DoCarrierLookup
        /// </summary>
        [Test]
        public void DoCarrierLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //string country = null;
            //var response = instance.DoCarrierLookup(phone, country);
            //Assert.IsInstanceOf<DoCarrierLookupResponse> (response, "response is DoCarrierLookupResponse");
        }
        
        /// <summary>
        /// Test DoEmailLookup
        /// </summary>
        [Test]
        public void DoEmailLookupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.DoEmailLookup(email);
            //Assert.IsInstanceOf<DoEmailLookupResponse> (response, "response is DoEmailLookupResponse");
        }
        
        /// <summary>
        /// Test DuplicateSurvey
        /// </summary>
        [Test]
        public void DuplicateSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.DuplicateSurvey(id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test GetAllBulkSessions
        /// </summary>
        [Test]
        public void GetAllBulkSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllBulkSessions(page, limit);
            //Assert.IsInstanceOf<GetAllBulkSessionsResponse> (response, "response is GetAllBulkSessionsResponse");
        }
        
        /// <summary>
        /// Test GetAllChats
        /// </summary>
        [Test]
        public void GetAllChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string status = null;
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //int? voice = null;
            //int? flat = null;
            //var response = instance.GetAllChats(status, page, limit, orderBy, voice, flat);
            //Assert.IsInstanceOf<GetAllChatsResponse> (response, "response is GetAllChatsResponse");
        }
        
        /// <summary>
        /// Test GetAllInboundMessages
        /// </summary>
        [Test]
        public void GetAllInboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetAllInboundMessages(page, limit, orderBy, direction);
            //Assert.IsInstanceOf<GetAllInboundMessagesResponse> (response, "response is GetAllInboundMessagesResponse");
        }
        
        /// <summary>
        /// Test GetAllMessageSessions
        /// </summary>
        [Test]
        public void GetAllMessageSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllMessageSessions(page, limit);
            //Assert.IsInstanceOf<GetAllMessageSessionsResponse> (response, "response is GetAllMessageSessionsResponse");
        }
        
        /// <summary>
        /// Test GetAllOutboundMessages
        /// </summary>
        [Test]
        public void GetAllOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? lastId = null;
            //var response = instance.GetAllOutboundMessages(page, limit, lastId);
            //Assert.IsInstanceOf<GetAllOutboundMessagesResponse> (response, "response is GetAllOutboundMessagesResponse");
        }
        
        /// <summary>
        /// Test GetAllScheduledMessages
        /// </summary>
        [Test]
        public void GetAllScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string status = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetAllScheduledMessages(page, limit, status, orderBy, direction);
            //Assert.IsInstanceOf<GetAllScheduledMessagesResponse> (response, "response is GetAllScheduledMessagesResponse");
        }
        
        /// <summary>
        /// Test GetAllTemplates
        /// </summary>
        [Test]
        public void GetAllTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetAllTemplates(page, limit);
            //Assert.IsInstanceOf<GetAllTemplatesResponse> (response, "response is GetAllTemplatesResponse");
        }
        
        /// <summary>
        /// Test GetAvailableDedicatedNumbers
        /// </summary>
        [Test]
        public void GetAvailableDedicatedNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //int? prefix = null;
            //int? tollfree = null;
            //var response = instance.GetAvailableDedicatedNumbers(country, prefix, tollfree);
            //Assert.IsInstanceOf<GetAvailableDedicatedNumbersResponse> (response, "response is GetAvailableDedicatedNumbersResponse");
        }
        
        /// <summary>
        /// Test GetAvailableSenderSettingOptions
        /// </summary>
        [Test]
        public void GetAvailableSenderSettingOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //var response = instance.GetAvailableSenderSettingOptions(country);
            //Assert.IsInstanceOf<GetAvailableSenderSettingOptionsResponse> (response, "response is GetAvailableSenderSettingOptionsResponse");
        }
        
        /// <summary>
        /// Test GetBalanceNotificationOptions
        /// </summary>
        [Test]
        public void GetBalanceNotificationOptionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBalanceNotificationOptions();
            //Assert.IsInstanceOf<GetBalanceNotificationOptionsResponse> (response, "response is GetBalanceNotificationOptionsResponse");
        }
        
        /// <summary>
        /// Test GetBalanceNotificationSettings
        /// </summary>
        [Test]
        public void GetBalanceNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBalanceNotificationSettings();
            //Assert.IsInstanceOf<GetBalanceNotificationSettingsResponse> (response, "response is GetBalanceNotificationSettingsResponse");
        }
        
        /// <summary>
        /// Test GetBlockedContacts
        /// </summary>
        [Test]
        public void GetBlockedContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetBlockedContacts(page, limit, query, orderBy, direction);
            //Assert.IsInstanceOf<GetBlockedContactsResponse> (response, "response is GetBlockedContactsResponse");
        }
        
        /// <summary>
        /// Test GetBulkSession
        /// </summary>
        [Test]
        public void GetBulkSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetBulkSession(id);
            //Assert.IsInstanceOf<BulkSession> (response, "response is BulkSession");
        }
        
        /// <summary>
        /// Test GetCallbackSettings
        /// </summary>
        [Test]
        public void GetCallbackSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCallbackSettings();
            //Assert.IsInstanceOf<GetCallbackSettingsResponse> (response, "response is GetCallbackSettingsResponse");
        }
        
        /// <summary>
        /// Test GetCallsPrices
        /// </summary>
        [Test]
        public void GetCallsPricesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCallsPrices();
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GetChat
        /// </summary>
        [Test]
        public void GetChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetChat(id);
            //Assert.IsInstanceOf<Chat> (response, "response is Chat");
        }
        
        /// <summary>
        /// Test GetChatByPhone
        /// </summary>
        [Test]
        public void GetChatByPhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //int? upsert = null;
            //int? reopen = null;
            //var response = instance.GetChatByPhone(phone, upsert, reopen);
            //Assert.IsInstanceOf<Chat> (response, "response is Chat");
        }
        
        /// <summary>
        /// Test GetChatMessages
        /// </summary>
        [Test]
        public void GetChatMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //int? start = null;
            //int? end = null;
            //string direction = null;
            //int? voice = null;
            //var response = instance.GetChatMessages(id, page, limit, query, start, end, direction, voice);
            //Assert.IsInstanceOf<GetChatMessagesResponse> (response, "response is GetChatMessagesResponse");
        }
        
        /// <summary>
        /// Test GetContact
        /// </summary>
        [Test]
        public void GetContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContact(id);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactByPhone
        /// </summary>
        [Test]
        public void GetContactByPhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //var response = instance.GetContactByPhone(phone);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactIfBlocked
        /// </summary>
        [Test]
        public void GetContactIfBlockedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phone = null;
            //var response = instance.GetContactIfBlocked(phone);
            //Assert.IsInstanceOf<Contact> (response, "response is Contact");
        }
        
        /// <summary>
        /// Test GetContactImportSessionProgress
        /// </summary>
        [Test]
        public void GetContactImportSessionProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContactImportSessionProgress(id);
            //Assert.IsInstanceOf<GetContactImportSessionProgressResponse> (response, "response is GetContactImportSessionProgressResponse");
        }
        
        /// <summary>
        /// Test GetContactNote
        /// </summary>
        [Test]
        public void GetContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetContactNote(id);
            //Assert.IsInstanceOf<ContactNote> (response, "response is ContactNote");
        }
        
        /// <summary>
        /// Test GetContactNotes
        /// </summary>
        [Test]
        public void GetContactNotesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetContactNotes(id, page, limit);
            //Assert.IsInstanceOf<GetContactNotesResponse> (response, "response is GetContactNotesResponse");
        }
        
        /// <summary>
        /// Test GetContacts
        /// </summary>
        [Test]
        public void GetContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? shared = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetContacts(page, limit, shared, orderBy, direction);
            //Assert.IsInstanceOf<GetContactsResponse> (response, "response is GetContactsResponse");
        }
        
        /// <summary>
        /// Test GetContactsAutocomplete
        /// </summary>
        [Test]
        public void GetContactsAutocompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? limit = null;
            //int? lists = null;
            //var response = instance.GetContactsAutocomplete(query, limit, lists);
            //Assert.IsInstanceOf<List<GetContactsAutocompleteResponse>> (response, "response is List<GetContactsAutocompleteResponse>");
        }
        
        /// <summary>
        /// Test GetContactsByListId
        /// </summary>
        [Test]
        public void GetContactsByListIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetContactsByListId(id, page, limit, orderBy, direction);
            //Assert.IsInstanceOf<GetContactsByListIdResponse> (response, "response is GetContactsByListIdResponse");
        }
        
        /// <summary>
        /// Test GetCountries
        /// </summary>
        [Test]
        public void GetCountriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCountries();
            //Assert.IsInstanceOf<List<Country>> (response, "response is List<Country>");
        }
        
        /// <summary>
        /// Test GetCurrentUser
        /// </summary>
        [Test]
        public void GetCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCurrentUser();
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetCustomField
        /// </summary>
        [Test]
        public void GetCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetCustomField(id);
            //Assert.IsInstanceOf<UserCustomField> (response, "response is UserCustomField");
        }
        
        /// <summary>
        /// Test GetCustomFields
        /// </summary>
        [Test]
        public void GetCustomFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetCustomFields(page, limit);
            //Assert.IsInstanceOf<GetCustomFieldsResponse> (response, "response is GetCustomFieldsResponse");
        }
        
        /// <summary>
        /// Test GetDedicatedNumber
        /// </summary>
        [Test]
        public void GetDedicatedNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetDedicatedNumber(id);
            //Assert.IsInstanceOf<UsersInbound> (response, "response is UsersInbound");
        }
        
        /// <summary>
        /// Test GetDisallowedRules
        /// </summary>
        [Test]
        public void GetDisallowedRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDisallowedRules();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetFavourites
        /// </summary>
        [Test]
        public void GetFavouritesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //var response = instance.GetFavourites(page, limit, query);
            //Assert.IsInstanceOf<GetFavouritesResponse> (response, "response is GetFavouritesResponse");
        }
        
        /// <summary>
        /// Test GetForwardedCalls
        /// </summary>
        [Test]
        public void GetForwardedCallsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetForwardedCalls(page, limit);
            //Assert.IsInstanceOf<GetForwardedCallsResponse> (response, "response is GetForwardedCallsResponse");
        }
        
        /// <summary>
        /// Test GetInboundMessage
        /// </summary>
        [Test]
        public void GetInboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetInboundMessage(id);
            //Assert.IsInstanceOf<MessageIn> (response, "response is MessageIn");
        }
        
        /// <summary>
        /// Test GetInboundMessagesNotificationSettings
        /// </summary>
        [Test]
        public void GetInboundMessagesNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetInboundMessagesNotificationSettings();
            //Assert.IsInstanceOf<GetInboundMessagesNotificationSettingsResponse> (response, "response is GetInboundMessagesNotificationSettingsResponse");
        }
        
        /// <summary>
        /// Test GetInvoices
        /// </summary>
        [Test]
        public void GetInvoicesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetInvoices(page, limit);
            //Assert.IsInstanceOf<GetInvoicesResponse> (response, "response is GetInvoicesResponse");
        }
        
        /// <summary>
        /// Test GetList
        /// </summary>
        [Test]
        public void GetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetList(id);
            //Assert.IsInstanceOf<Group> (response, "response is Group");
        }
        
        /// <summary>
        /// Test GetListContactsIds
        /// </summary>
        [Test]
        public void GetListContactsIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetListContactsIds(id);
            //Assert.IsInstanceOf<GetListContactsIdsResponse> (response, "response is GetListContactsIdsResponse");
        }
        
        /// <summary>
        /// Test GetListsOfContact
        /// </summary>
        [Test]
        public void GetListsOfContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetListsOfContact(id, page, limit);
            //Assert.IsInstanceOf<GetListsOfContactResponse> (response, "response is GetListsOfContactResponse");
        }
        
        /// <summary>
        /// Test GetMessagePreview
        /// </summary>
        [Test]
        public void GetMessagePreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //int? templateId = null;
            //int? sendingTime = null;
            //string sendingDateTime = null;
            //string sendingTimezone = null;
            //string contacts = null;
            //string lists = null;
            //string phones = null;
            //int? cutExtra = null;
            //int? partsCount = null;
            //int? referenceId = null;
            //string from = null;
            //string rule = null;
            //int? createChat = null;
            //int? tts = null;
            //int? local = null;
            //string localCountry = null;
            //var response = instance.GetMessagePreview(text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
            //Assert.IsInstanceOf<GetMessagePreviewResponse> (response, "response is GetMessagePreviewResponse");
        }
        
        /// <summary>
        /// Test GetMessagePrice
        /// </summary>
        [Test]
        public void GetMessagePriceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? includeBlocked = null;
            //string text = null;
            //int? templateId = null;
            //int? sendingTime = null;
            //string sendingDateTime = null;
            //string sendingTimezone = null;
            //string contacts = null;
            //string lists = null;
            //string phones = null;
            //int? cutExtra = null;
            //int? partsCount = null;
            //int? referenceId = null;
            //string from = null;
            //string rule = null;
            //int? createChat = null;
            //int? tts = null;
            //int? local = null;
            //string localCountry = null;
            //var response = instance.GetMessagePrice(includeBlocked, text, templateId, sendingTime, sendingDateTime, sendingTimezone, contacts, lists, phones, cutExtra, partsCount, referenceId, from, rule, createChat, tts, local, localCountry);
            //Assert.IsInstanceOf<GetMessagePriceResponse> (response, "response is GetMessagePriceResponse");
        }
        
        /// <summary>
        /// Test GetMessagePrices
        /// </summary>
        [Test]
        public void GetMessagePricesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMessagePrices();
            //Assert.IsInstanceOf<GetMessagePricesResponse> (response, "response is GetMessagePricesResponse");
        }
        
        /// <summary>
        /// Test GetMessageSession
        /// </summary>
        [Test]
        public void GetMessageSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetMessageSession(id);
            //Assert.IsInstanceOf<MessageSession> (response, "response is MessageSession");
        }
        
        /// <summary>
        /// Test GetMessageSessionStat
        /// </summary>
        [Test]
        public void GetMessageSessionStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? includeDeleted = null;
            //var response = instance.GetMessageSessionStat(id, includeDeleted);
            //Assert.IsInstanceOf<GetMessageSessionStatResponse> (response, "response is GetMessageSessionStatResponse");
        }
        
        /// <summary>
        /// Test GetMessagesBySessionId
        /// </summary>
        [Test]
        public void GetMessagesBySessionIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //int? page = null;
            //int? limit = null;
            //string statuses = null;
            //int? includeDeleted = null;
            //var response = instance.GetMessagesBySessionId(id, page, limit, statuses, includeDeleted);
            //Assert.IsInstanceOf<GetMessagesBySessionIdResponse> (response, "response is GetMessagesBySessionIdResponse");
        }
        
        /// <summary>
        /// Test GetMessagingCounters
        /// </summary>
        [Test]
        public void GetMessagingCountersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMessagingCounters();
            //Assert.IsInstanceOf<GetMessagingCountersResponse> (response, "response is GetMessagingCountersResponse");
        }
        
        /// <summary>
        /// Test GetMessagingStat
        /// </summary>
        [Test]
        public void GetMessagingStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string by = null;
            //int? start = null;
            //string end = null;
            //var response = instance.GetMessagingStat(by, start, end);
            //Assert.IsInstanceOf<GetMessagingStatResponse> (response, "response is GetMessagingStatResponse");
        }
        
        /// <summary>
        /// Test GetOutboundMessage
        /// </summary>
        [Test]
        public void GetOutboundMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetOutboundMessage(id);
            //Assert.IsInstanceOf<MessageOut> (response, "response is MessageOut");
        }
        
        /// <summary>
        /// Test GetOutboundMessagesHistory
        /// </summary>
        [Test]
        public void GetOutboundMessagesHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? lastId = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.GetOutboundMessagesHistory(limit, lastId, query, orderBy, direction);
            //Assert.IsInstanceOf<GetOutboundMessagesHistoryResponse> (response, "response is GetOutboundMessagesHistoryResponse");
        }
        
        /// <summary>
        /// Test GetPushTokens
        /// </summary>
        [Test]
        public void GetPushTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetPushTokens();
            //Assert.IsInstanceOf<GetPushTokensResponse> (response, "response is GetPushTokensResponse");
        }
        
        /// <summary>
        /// Test GetScheduledMessage
        /// </summary>
        [Test]
        public void GetScheduledMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetScheduledMessage(id);
            //Assert.IsInstanceOf<MessagesIcs> (response, "response is MessagesIcs");
        }
        
        /// <summary>
        /// Test GetSenderId
        /// </summary>
        [Test]
        public void GetSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSenderId(id);
            //Assert.IsInstanceOf<SenderId> (response, "response is SenderId");
        }
        
        /// <summary>
        /// Test GetSenderIds
        /// </summary>
        [Test]
        public void GetSenderIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSenderIds(page, limit);
            //Assert.IsInstanceOf<GetSenderIdsResponse> (response, "response is GetSenderIdsResponse");
        }
        
        /// <summary>
        /// Test GetSenderSettings
        /// </summary>
        [Test]
        public void GetSenderSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string country = null;
            //var response = instance.GetSenderSettings(country);
            //Assert.IsInstanceOf<GetSenderSettingsResponse> (response, "response is GetSenderSettingsResponse");
        }
        
        /// <summary>
        /// Test GetSpendingStat
        /// </summary>
        [Test]
        public void GetSpendingStatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? start = null;
            //int? end = null;
            //var response = instance.GetSpendingStat(page, limit, start, end);
            //Assert.IsInstanceOf<GetSpendingStatResponse> (response, "response is GetSpendingStatResponse");
        }
        
        /// <summary>
        /// Test GetState
        /// </summary>
        [Test]
        public void GetStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetState();
            //Assert.IsInstanceOf<GetStateResponse> (response, "response is GetStateResponse");
        }
        
        /// <summary>
        /// Test GetSubaccount
        /// </summary>
        [Test]
        public void GetSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSubaccount(id);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetSubaccounts
        /// </summary>
        [Test]
        public void GetSubaccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSubaccounts(page, limit);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test GetSubaccountsWithTokens
        /// </summary>
        [Test]
        public void GetSubaccountsWithTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetSubaccountsWithTokensInputObject getSubaccountsWithTokensInputObject = null;
            //decimal? page = null;
            //int? limit = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.GetSubaccountsWithTokens(getSubaccountsWithTokensInputObject, page, limit, xIgnoreNullValues);
            //Assert.IsInstanceOf<GetSubaccountsWithTokensResponse> (response, "response is GetSubaccountsWithTokensResponse");
        }
        
        /// <summary>
        /// Test GetSurvey
        /// </summary>
        [Test]
        public void GetSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSurvey(id);
            //Assert.IsInstanceOf<Survey> (response, "response is Survey");
        }
        
        /// <summary>
        /// Test GetSurveyNode
        /// </summary>
        [Test]
        public void GetSurveyNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSurveyNode(id);
            //Assert.IsInstanceOf<SurveyNode> (response, "response is SurveyNode");
        }
        
        /// <summary>
        /// Test GetSurveyNodes
        /// </summary>
        [Test]
        public void GetSurveyNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetSurveyNodes(id);
            //Assert.IsInstanceOf<GetSurveyNodesResponse> (response, "response is GetSurveyNodesResponse");
        }
        
        /// <summary>
        /// Test GetSurveys
        /// </summary>
        [Test]
        public void GetSurveysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetSurveys(page, limit);
            //Assert.IsInstanceOf<GetSurveysResponse> (response, "response is GetSurveysResponse");
        }
        
        /// <summary>
        /// Test GetTemplate
        /// </summary>
        [Test]
        public void GetTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetTemplate(id);
            //Assert.IsInstanceOf<MessageTemplate> (response, "response is MessageTemplate");
        }
        
        /// <summary>
        /// Test GetTimezones
        /// </summary>
        [Test]
        public void GetTimezonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? full = null;
            //var response = instance.GetTimezones(full);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetUnreadMessagesTotal
        /// </summary>
        [Test]
        public void GetUnreadMessagesTotalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUnreadMessagesTotal();
            //Assert.IsInstanceOf<GetUnreadMessagesTotalResponse> (response, "response is GetUnreadMessagesTotalResponse");
        }
        
        /// <summary>
        /// Test GetUnsubscribedContact
        /// </summary>
        [Test]
        public void GetUnsubscribedContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetUnsubscribedContact(id);
            //Assert.IsInstanceOf<UnsubscribedContact> (response, "response is UnsubscribedContact");
        }
        
        /// <summary>
        /// Test GetUnsubscribers
        /// </summary>
        [Test]
        public void GetUnsubscribersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //var response = instance.GetUnsubscribers(page, limit);
            //Assert.IsInstanceOf<GetUnsubscribersResponse> (response, "response is GetUnsubscribersResponse");
        }
        
        /// <summary>
        /// Test GetUserDedicatedNumbers
        /// </summary>
        [Test]
        public void GetUserDedicatedNumbersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? surveyId = null;
            //var response = instance.GetUserDedicatedNumbers(page, limit, surveyId);
            //Assert.IsInstanceOf<GetUserDedicatedNumbersResponse> (response, "response is GetUserDedicatedNumbersResponse");
        }
        
        /// <summary>
        /// Test GetUserLists
        /// </summary>
        [Test]
        public void GetUserListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string orderBy = null;
            //string direction = null;
            //int? favoriteOnly = null;
            //int? onlyMine = null;
            //var response = instance.GetUserLists(page, limit, orderBy, direction, favoriteOnly, onlyMine);
            //Assert.IsInstanceOf<GetUserListsResponse> (response, "response is GetUserListsResponse");
        }
        
        /// <summary>
        /// Test GetVersions
        /// </summary>
        [Test]
        public void GetVersionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetVersions();
            //Assert.IsInstanceOf<GetVersionsResponse> (response, "response is GetVersionsResponse");
        }
        
        /// <summary>
        /// Test InviteSubaccount
        /// </summary>
        [Test]
        public void InviteSubaccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InviteSubaccountInputObject inviteSubaccountInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.InviteSubaccount(inviteSubaccountInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test MarkChatsReadBulk
        /// </summary>
        [Test]
        public void MarkChatsReadBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkChatsReadBulkInputObject markChatsReadBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.MarkChatsReadBulk(markChatsReadBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test MarkChatsUnreadBulk
        /// </summary>
        [Test]
        public void MarkChatsUnreadBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkChatsUnreadBulkInputObject markChatsUnreadBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.MarkChatsUnreadBulk(markChatsUnreadBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test MergeSurveyNodes
        /// </summary>
        [Test]
        public void MergeSurveyNodesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MergeSurveyNodesInputObject mergeSurveyNodesInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.MergeSurveyNodes(mergeSurveyNodesInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test MuteChat
        /// </summary>
        [Test]
        public void MuteChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MuteChatInputObject muteChatInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.MuteChat(muteChatInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test MuteChatsBulk
        /// </summary>
        [Test]
        public void MuteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MuteChatsBulkInputObject muteChatsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.MuteChatsBulk(muteChatsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test Ping
        /// </summary>
        [Test]
        public void PingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Ping();
            //Assert.IsInstanceOf<PingResponse> (response, "response is PingResponse");
        }
        
        /// <summary>
        /// Test ReopenChatsBulk
        /// </summary>
        [Test]
        public void ReopenChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReopenChatsBulkInputObject reopenChatsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.ReopenChatsBulk(reopenChatsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test RequestNewSubaccountToken
        /// </summary>
        [Test]
        public void RequestNewSubaccountTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestNewSubaccountTokenInputObject requestNewSubaccountTokenInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.RequestNewSubaccountToken(requestNewSubaccountTokenInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test RequestSenderId
        /// </summary>
        [Test]
        public void RequestSenderIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RequestSenderIdInputObject requestSenderIdInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.RequestSenderId(requestSenderIdInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test ResetSurvey
        /// </summary>
        [Test]
        public void ResetSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.ResetSurvey(id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test SearchChats
        /// </summary>
        [Test]
        public void SearchChatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //var response = instance.SearchChats(page, limit, query);
            //Assert.IsInstanceOf<SearchChatsResponse> (response, "response is SearchChatsResponse");
        }
        
        /// <summary>
        /// Test SearchChatsByIds
        /// </summary>
        [Test]
        public void SearchChatsByIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //var response = instance.SearchChatsByIds(page, limit, ids);
            //Assert.IsInstanceOf<SearchChatsByIdsResponse> (response, "response is SearchChatsByIdsResponse");
        }
        
        /// <summary>
        /// Test SearchChatsByReceipent
        /// </summary>
        [Test]
        public void SearchChatsByReceipentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string orderBy = null;
            //var response = instance.SearchChatsByReceipent(page, limit, query, orderBy);
            //Assert.IsInstanceOf<SearchChatsByReceipentResponse> (response, "response is SearchChatsByReceipentResponse");
        }
        
        /// <summary>
        /// Test SearchContacts
        /// </summary>
        [Test]
        public void SearchContactsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? shared = null;
            //string ids = null;
            //int? listId = null;
            //int? includeBlocked = null;
            //string query = null;
            //int? local = null;
            //string country = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchContacts(page, limit, shared, ids, listId, includeBlocked, query, local, country, orderBy, direction);
            //Assert.IsInstanceOf<SearchContactsResponse> (response, "response is SearchContactsResponse");
        }
        
        /// <summary>
        /// Test SearchInboundMessages
        /// </summary>
        [Test]
        public void SearchInboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string query = null;
            //string orderBy = null;
            //string direction = null;
            //int? expand = null;
            //var response = instance.SearchInboundMessages(page, limit, ids, query, orderBy, direction, expand);
            //Assert.IsInstanceOf<SearchInboundMessagesResponse> (response, "response is SearchInboundMessagesResponse");
        }
        
        /// <summary>
        /// Test SearchLists
        /// </summary>
        [Test]
        public void SearchListsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string query = null;
            //int? onlyMine = null;
            //int? onlyDefault = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchLists(page, limit, ids, query, onlyMine, onlyDefault, orderBy, direction);
            //Assert.IsInstanceOf<SearchListsResponse> (response, "response is SearchListsResponse");
        }
        
        /// <summary>
        /// Test SearchOutboundMessages
        /// </summary>
        [Test]
        public void SearchOutboundMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //int? lastId = null;
            //string ids = null;
            //int? sessionId = null;
            //string statuses = null;
            //int? includeDeleted = null;
            //string query = null;
            //var response = instance.SearchOutboundMessages(page, limit, lastId, ids, sessionId, statuses, includeDeleted, query);
            //Assert.IsInstanceOf<SearchOutboundMessagesResponse> (response, "response is SearchOutboundMessagesResponse");
        }
        
        /// <summary>
        /// Test SearchScheduledMessages
        /// </summary>
        [Test]
        public void SearchScheduledMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string query = null;
            //string ids = null;
            //string status = null;
            //string orderBy = null;
            //string direction = null;
            //var response = instance.SearchScheduledMessages(page, limit, query, ids, status, orderBy, direction);
            //Assert.IsInstanceOf<SearchScheduledMessagesResponse> (response, "response is SearchScheduledMessagesResponse");
        }
        
        /// <summary>
        /// Test SearchTemplates
        /// </summary>
        [Test]
        public void SearchTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? limit = null;
            //string ids = null;
            //string name = null;
            //string content = null;
            //var response = instance.SearchTemplates(page, limit, ids, name, content);
            //Assert.IsInstanceOf<SearchTemplatesResponse> (response, "response is SearchTemplatesResponse");
        }
        
        /// <summary>
        /// Test SendEmailVerificationCode
        /// </summary>
        [Test]
        public void SendEmailVerificationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.SendEmailVerificationCode();
            
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendMessageInputObject sendMessageInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.SendMessage(sendMessageInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<SendMessageResponse> (response, "response is SendMessageResponse");
        }
        
        /// <summary>
        /// Test SendPhoneVerificationCode
        /// </summary>
        [Test]
        public void SendPhoneVerificationCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.SendPhoneVerificationCode();
            
        }
        
        /// <summary>
        /// Test SetChatStatus
        /// </summary>
        [Test]
        public void SetChatStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetChatStatusInputObject setChatStatusInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.SetChatStatus(setChatStatusInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test StartSurvey
        /// </summary>
        [Test]
        public void StartSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.StartSurvey(id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UnblockContact
        /// </summary>
        [Test]
        public void UnblockContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnblockContactInputObject unblockContactInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UnblockContact(unblockContactInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UnblockContactsBulk
        /// </summary>
        [Test]
        public void UnblockContactsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnblockContactsBulkInputObject unblockContactsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UnblockContactsBulk(unblockContactsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UnmuteChatsBulk
        /// </summary>
        [Test]
        public void UnmuteChatsBulkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnmuteChatsBulkInputObject unmuteChatsBulkInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UnmuteChatsBulk(unmuteChatsBulkInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UnsubscribeContact
        /// </summary>
        [Test]
        public void UnsubscribeContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UnsubscribeContactInputObject unsubscribeContactInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UnsubscribeContact(unsubscribeContactInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateBalanceNotificationSettings
        /// </summary>
        [Test]
        public void UpdateBalanceNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateBalanceNotificationSettingsInputObject updateBalanceNotificationSettingsInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdateBalanceNotificationSettings(updateBalanceNotificationSettingsInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateCallbackSettings
        /// </summary>
        [Test]
        public void UpdateCallbackSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCallbackSettingsInputObject updateCallbackSettingsInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdateCallbackSettings(updateCallbackSettingsInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateChatDesktopNotificationSettings
        /// </summary>
        [Test]
        public void UpdateChatDesktopNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateChatDesktopNotificationSettingsInputObject updateChatDesktopNotificationSettingsInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdateChatDesktopNotificationSettings(updateChatDesktopNotificationSettingsInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateContact
        /// </summary>
        [Test]
        public void UpdateContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateContactInputObject updateContactInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateContact(updateContactInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateContactNote
        /// </summary>
        [Test]
        public void UpdateContactNoteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateContactNoteInputObject updateContactNoteInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateContactNote(updateContactNoteInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateCurrentUser
        /// </summary>
        [Test]
        public void UpdateCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCurrentUserInputObject updateCurrentUserInputObject = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateCurrentUser(updateCurrentUserInputObject, xIgnoreNullValues);
            //Assert.IsInstanceOf<UpdateCurrentUserResponse> (response, "response is UpdateCurrentUserResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomField
        /// </summary>
        [Test]
        public void UpdateCustomFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCustomFieldInputObject updateCustomFieldInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateCustomField(updateCustomFieldInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateCustomFieldValue
        /// </summary>
        [Test]
        public void UpdateCustomFieldValueTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateCustomFieldValueInputObject updateCustomFieldValueInputObject = null;
            //string id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateCustomFieldValue(updateCustomFieldValueInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateInboundMessagesNotificationSettings
        /// </summary>
        [Test]
        public void UpdateInboundMessagesNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateInboundMessagesNotificationSettingsInputObject updateInboundMessagesNotificationSettingsInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdateInboundMessagesNotificationSettings(updateInboundMessagesNotificationSettingsInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateList
        /// </summary>
        [Test]
        public void UpdateListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //UpdateListObject updateListObject = null;
            //var response = instance.UpdateList(id, updateListObject);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdatePassword
        /// </summary>
        [Test]
        public void UpdatePasswordTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdatePasswordInputObject updatePasswordInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdatePassword(updatePasswordInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateSenderSetting
        /// </summary>
        [Test]
        public void UpdateSenderSettingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateSenderSettingInputObject updateSenderSettingInputObject = null;
            //bool? xIgnoreNullValues = null;
            //instance.UpdateSenderSetting(updateSenderSettingInputObject, xIgnoreNullValues);
            
        }
        
        /// <summary>
        /// Test UpdateSurvey
        /// </summary>
        [Test]
        public void UpdateSurveyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateSurveyInputObject updateSurveyInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateSurvey(updateSurveyInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateSurveyNode
        /// </summary>
        [Test]
        public void UpdateSurveyNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateSurveyNodeInputObject updateSurveyNodeInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateSurveyNode(updateSurveyNodeInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Test]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateTemplateInputObject updateTemplateInputObject = null;
            //int? id = null;
            //bool? xIgnoreNullValues = null;
            //var response = instance.UpdateTemplate(updateTemplateInputObject, id, xIgnoreNullValues);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadAvatar
        /// </summary>
        [Test]
        public void UploadAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //instance.UploadAvatar(image);
            
        }
        
        /// <summary>
        /// Test UploadContactAvatar
        /// </summary>
        [Test]
        public void UploadContactAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //int? id = null;
            //var response = instance.UploadContactAvatar(image, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadListAvatar
        /// </summary>
        [Test]
        public void UploadListAvatarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream image = null;
            //int? id = null;
            //var response = instance.UploadListAvatar(image, id);
            //Assert.IsInstanceOf<ResourceLinkResponse> (response, "response is ResourceLinkResponse");
        }
        
        /// <summary>
        /// Test UploadMessageAttachment
        /// </summary>
        [Test]
        public void UploadMessageAttachmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.UploadMessageAttachment(file);
            //Assert.IsInstanceOf<UploadMessageAttachmentResponse> (response, "response is UploadMessageAttachmentResponse");
        }
        
    }

}
